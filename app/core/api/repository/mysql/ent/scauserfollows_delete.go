// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/predicate"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scauserfollows"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScaUserFollowsDelete is the builder for deleting a ScaUserFollows entity.
type ScaUserFollowsDelete struct {
	config
	hooks    []Hook
	mutation *ScaUserFollowsMutation
}

// Where appends a list predicates to the ScaUserFollowsDelete builder.
func (sufd *ScaUserFollowsDelete) Where(ps ...predicate.ScaUserFollows) *ScaUserFollowsDelete {
	sufd.mutation.Where(ps...)
	return sufd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sufd *ScaUserFollowsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sufd.sqlExec, sufd.mutation, sufd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sufd *ScaUserFollowsDelete) ExecX(ctx context.Context) int {
	n, err := sufd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sufd *ScaUserFollowsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(scauserfollows.Table, sqlgraph.NewFieldSpec(scauserfollows.FieldID, field.TypeInt))
	if ps := sufd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sufd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sufd.mutation.done = true
	return affected, err
}

// ScaUserFollowsDeleteOne is the builder for deleting a single ScaUserFollows entity.
type ScaUserFollowsDeleteOne struct {
	sufd *ScaUserFollowsDelete
}

// Where appends a list predicates to the ScaUserFollowsDelete builder.
func (sufdo *ScaUserFollowsDeleteOne) Where(ps ...predicate.ScaUserFollows) *ScaUserFollowsDeleteOne {
	sufdo.sufd.mutation.Where(ps...)
	return sufdo
}

// Exec executes the deletion query.
func (sufdo *ScaUserFollowsDeleteOne) Exec(ctx context.Context) error {
	n, err := sufdo.sufd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{scauserfollows.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sufdo *ScaUserFollowsDeleteOne) ExecX(ctx context.Context) {
	if err := sufdo.Exec(ctx); err != nil {
		panic(err)
	}
}
