// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scauserlevel"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 用户等级表
type ScaUserLevel struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,omitempty"`
	// 用户Id
	UserID string `json:"user_id,omitempty"`
	// 等级类型
	LevelType uint8 `json:"level_type,omitempty"`
	// 等级
	Level int `json:"level,omitempty"`
	// 等级名称
	LevelName string `json:"level_name,omitempty"`
	// 开始经验值
	ExpStart int64 `json:"exp_start,omitempty"`
	// 结束经验值
	ExpEnd int64 `json:"exp_end,omitempty"`
	// 等级描述
	LevelDescription string `json:"level_description,omitempty"`
	selectValues     sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScaUserLevel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scauserlevel.FieldID, scauserlevel.FieldLevelType, scauserlevel.FieldLevel, scauserlevel.FieldExpStart, scauserlevel.FieldExpEnd:
			values[i] = new(sql.NullInt64)
		case scauserlevel.FieldUserID, scauserlevel.FieldLevelName, scauserlevel.FieldLevelDescription:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScaUserLevel fields.
func (sul *ScaUserLevel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scauserlevel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sul.ID = int64(value.Int64)
		case scauserlevel.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				sul.UserID = value.String
			}
		case scauserlevel.FieldLevelType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level_type", values[i])
			} else if value.Valid {
				sul.LevelType = uint8(value.Int64)
			}
		case scauserlevel.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				sul.Level = int(value.Int64)
			}
		case scauserlevel.FieldLevelName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level_name", values[i])
			} else if value.Valid {
				sul.LevelName = value.String
			}
		case scauserlevel.FieldExpStart:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exp_start", values[i])
			} else if value.Valid {
				sul.ExpStart = value.Int64
			}
		case scauserlevel.FieldExpEnd:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exp_end", values[i])
			} else if value.Valid {
				sul.ExpEnd = value.Int64
			}
		case scauserlevel.FieldLevelDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level_description", values[i])
			} else if value.Valid {
				sul.LevelDescription = value.String
			}
		default:
			sul.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScaUserLevel.
// This includes values selected through modifiers, order, etc.
func (sul *ScaUserLevel) Value(name string) (ent.Value, error) {
	return sul.selectValues.Get(name)
}

// Update returns a builder for updating this ScaUserLevel.
// Note that you need to call ScaUserLevel.Unwrap() before calling this method if this ScaUserLevel
// was returned from a transaction, and the transaction was committed or rolled back.
func (sul *ScaUserLevel) Update() *ScaUserLevelUpdateOne {
	return NewScaUserLevelClient(sul.config).UpdateOne(sul)
}

// Unwrap unwraps the ScaUserLevel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sul *ScaUserLevel) Unwrap() *ScaUserLevel {
	_tx, ok := sul.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScaUserLevel is not a transactional entity")
	}
	sul.config.driver = _tx.drv
	return sul
}

// String implements the fmt.Stringer.
func (sul *ScaUserLevel) String() string {
	var builder strings.Builder
	builder.WriteString("ScaUserLevel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sul.ID))
	builder.WriteString("user_id=")
	builder.WriteString(sul.UserID)
	builder.WriteString(", ")
	builder.WriteString("level_type=")
	builder.WriteString(fmt.Sprintf("%v", sul.LevelType))
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", sul.Level))
	builder.WriteString(", ")
	builder.WriteString("level_name=")
	builder.WriteString(sul.LevelName)
	builder.WriteString(", ")
	builder.WriteString("exp_start=")
	builder.WriteString(fmt.Sprintf("%v", sul.ExpStart))
	builder.WriteString(", ")
	builder.WriteString("exp_end=")
	builder.WriteString(fmt.Sprintf("%v", sul.ExpEnd))
	builder.WriteString(", ")
	builder.WriteString("level_description=")
	builder.WriteString(sul.LevelDescription)
	builder.WriteByte(')')
	return builder.String()
}

// ScaUserLevels is a parsable slice of ScaUserLevel.
type ScaUserLevels []*ScaUserLevel
