// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scacommentlikes"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScaCommentLikesCreate is the builder for creating a ScaCommentLikes entity.
type ScaCommentLikesCreate struct {
	config
	mutation *ScaCommentLikesMutation
	hooks    []Hook
}

// SetTopicID sets the "topic_id" field.
func (sclc *ScaCommentLikesCreate) SetTopicID(s string) *ScaCommentLikesCreate {
	sclc.mutation.SetTopicID(s)
	return sclc
}

// SetUserID sets the "user_id" field.
func (sclc *ScaCommentLikesCreate) SetUserID(s string) *ScaCommentLikesCreate {
	sclc.mutation.SetUserID(s)
	return sclc
}

// SetCommentID sets the "comment_id" field.
func (sclc *ScaCommentLikesCreate) SetCommentID(i int64) *ScaCommentLikesCreate {
	sclc.mutation.SetCommentID(i)
	return sclc
}

// SetLikeTime sets the "like_time" field.
func (sclc *ScaCommentLikesCreate) SetLikeTime(t time.Time) *ScaCommentLikesCreate {
	sclc.mutation.SetLikeTime(t)
	return sclc
}

// SetNillableLikeTime sets the "like_time" field if the given value is not nil.
func (sclc *ScaCommentLikesCreate) SetNillableLikeTime(t *time.Time) *ScaCommentLikesCreate {
	if t != nil {
		sclc.SetLikeTime(*t)
	}
	return sclc
}

// SetID sets the "id" field.
func (sclc *ScaCommentLikesCreate) SetID(i int64) *ScaCommentLikesCreate {
	sclc.mutation.SetID(i)
	return sclc
}

// Mutation returns the ScaCommentLikesMutation object of the builder.
func (sclc *ScaCommentLikesCreate) Mutation() *ScaCommentLikesMutation {
	return sclc.mutation
}

// Save creates the ScaCommentLikes in the database.
func (sclc *ScaCommentLikesCreate) Save(ctx context.Context) (*ScaCommentLikes, error) {
	sclc.defaults()
	return withHooks(ctx, sclc.sqlSave, sclc.mutation, sclc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sclc *ScaCommentLikesCreate) SaveX(ctx context.Context) *ScaCommentLikes {
	v, err := sclc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sclc *ScaCommentLikesCreate) Exec(ctx context.Context) error {
	_, err := sclc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sclc *ScaCommentLikesCreate) ExecX(ctx context.Context) {
	if err := sclc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sclc *ScaCommentLikesCreate) defaults() {
	if _, ok := sclc.mutation.LikeTime(); !ok {
		v := scacommentlikes.DefaultLikeTime()
		sclc.mutation.SetLikeTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sclc *ScaCommentLikesCreate) check() error {
	if _, ok := sclc.mutation.TopicID(); !ok {
		return &ValidationError{Name: "topic_id", err: errors.New(`ent: missing required field "ScaCommentLikes.topic_id"`)}
	}
	if _, ok := sclc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ScaCommentLikes.user_id"`)}
	}
	if _, ok := sclc.mutation.CommentID(); !ok {
		return &ValidationError{Name: "comment_id", err: errors.New(`ent: missing required field "ScaCommentLikes.comment_id"`)}
	}
	if _, ok := sclc.mutation.LikeTime(); !ok {
		return &ValidationError{Name: "like_time", err: errors.New(`ent: missing required field "ScaCommentLikes.like_time"`)}
	}
	return nil
}

func (sclc *ScaCommentLikesCreate) sqlSave(ctx context.Context) (*ScaCommentLikes, error) {
	if err := sclc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sclc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sclc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sclc.mutation.id = &_node.ID
	sclc.mutation.done = true
	return _node, nil
}

func (sclc *ScaCommentLikesCreate) createSpec() (*ScaCommentLikes, *sqlgraph.CreateSpec) {
	var (
		_node = &ScaCommentLikes{config: sclc.config}
		_spec = sqlgraph.NewCreateSpec(scacommentlikes.Table, sqlgraph.NewFieldSpec(scacommentlikes.FieldID, field.TypeInt64))
	)
	if id, ok := sclc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sclc.mutation.TopicID(); ok {
		_spec.SetField(scacommentlikes.FieldTopicID, field.TypeString, value)
		_node.TopicID = value
	}
	if value, ok := sclc.mutation.UserID(); ok {
		_spec.SetField(scacommentlikes.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := sclc.mutation.CommentID(); ok {
		_spec.SetField(scacommentlikes.FieldCommentID, field.TypeInt64, value)
		_node.CommentID = value
	}
	if value, ok := sclc.mutation.LikeTime(); ok {
		_spec.SetField(scacommentlikes.FieldLikeTime, field.TypeTime, value)
		_node.LikeTime = value
	}
	return _node, _spec
}

// ScaCommentLikesCreateBulk is the builder for creating many ScaCommentLikes entities in bulk.
type ScaCommentLikesCreateBulk struct {
	config
	err      error
	builders []*ScaCommentLikesCreate
}

// Save creates the ScaCommentLikes entities in the database.
func (sclcb *ScaCommentLikesCreateBulk) Save(ctx context.Context) ([]*ScaCommentLikes, error) {
	if sclcb.err != nil {
		return nil, sclcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sclcb.builders))
	nodes := make([]*ScaCommentLikes, len(sclcb.builders))
	mutators := make([]Mutator, len(sclcb.builders))
	for i := range sclcb.builders {
		func(i int, root context.Context) {
			builder := sclcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScaCommentLikesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sclcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sclcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sclcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sclcb *ScaCommentLikesCreateBulk) SaveX(ctx context.Context) []*ScaCommentLikes {
	v, err := sclcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sclcb *ScaCommentLikesCreateBulk) Exec(ctx context.Context) error {
	_, err := sclcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sclcb *ScaCommentLikesCreateBulk) ExecX(ctx context.Context) {
	if err := sclcb.Exec(ctx); err != nil {
		panic(err)
	}
}
