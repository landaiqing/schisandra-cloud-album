// Code generated by ent, DO NOT EDIT.

package scauserlevel

import (
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldEQ(FieldUserID, v))
}

// LevelType applies equality check predicate on the "level_type" field. It's identical to LevelTypeEQ.
func LevelType(v uint8) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldEQ(FieldLevelType, v))
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v int) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldEQ(FieldLevel, v))
}

// LevelName applies equality check predicate on the "level_name" field. It's identical to LevelNameEQ.
func LevelName(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldEQ(FieldLevelName, v))
}

// ExpStart applies equality check predicate on the "exp_start" field. It's identical to ExpStartEQ.
func ExpStart(v int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldEQ(FieldExpStart, v))
}

// ExpEnd applies equality check predicate on the "exp_end" field. It's identical to ExpEndEQ.
func ExpEnd(v int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldEQ(FieldExpEnd, v))
}

// LevelDescription applies equality check predicate on the "level_description" field. It's identical to LevelDescriptionEQ.
func LevelDescription(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldEQ(FieldLevelDescription, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldContainsFold(FieldUserID, v))
}

// LevelTypeEQ applies the EQ predicate on the "level_type" field.
func LevelTypeEQ(v uint8) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldEQ(FieldLevelType, v))
}

// LevelTypeNEQ applies the NEQ predicate on the "level_type" field.
func LevelTypeNEQ(v uint8) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldNEQ(FieldLevelType, v))
}

// LevelTypeIn applies the In predicate on the "level_type" field.
func LevelTypeIn(vs ...uint8) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldIn(FieldLevelType, vs...))
}

// LevelTypeNotIn applies the NotIn predicate on the "level_type" field.
func LevelTypeNotIn(vs ...uint8) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldNotIn(FieldLevelType, vs...))
}

// LevelTypeGT applies the GT predicate on the "level_type" field.
func LevelTypeGT(v uint8) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldGT(FieldLevelType, v))
}

// LevelTypeGTE applies the GTE predicate on the "level_type" field.
func LevelTypeGTE(v uint8) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldGTE(FieldLevelType, v))
}

// LevelTypeLT applies the LT predicate on the "level_type" field.
func LevelTypeLT(v uint8) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldLT(FieldLevelType, v))
}

// LevelTypeLTE applies the LTE predicate on the "level_type" field.
func LevelTypeLTE(v uint8) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldLTE(FieldLevelType, v))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v int) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v int) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...int) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...int) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldNotIn(FieldLevel, vs...))
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v int) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldGT(FieldLevel, v))
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v int) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldGTE(FieldLevel, v))
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v int) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldLT(FieldLevel, v))
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v int) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldLTE(FieldLevel, v))
}

// LevelNameEQ applies the EQ predicate on the "level_name" field.
func LevelNameEQ(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldEQ(FieldLevelName, v))
}

// LevelNameNEQ applies the NEQ predicate on the "level_name" field.
func LevelNameNEQ(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldNEQ(FieldLevelName, v))
}

// LevelNameIn applies the In predicate on the "level_name" field.
func LevelNameIn(vs ...string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldIn(FieldLevelName, vs...))
}

// LevelNameNotIn applies the NotIn predicate on the "level_name" field.
func LevelNameNotIn(vs ...string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldNotIn(FieldLevelName, vs...))
}

// LevelNameGT applies the GT predicate on the "level_name" field.
func LevelNameGT(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldGT(FieldLevelName, v))
}

// LevelNameGTE applies the GTE predicate on the "level_name" field.
func LevelNameGTE(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldGTE(FieldLevelName, v))
}

// LevelNameLT applies the LT predicate on the "level_name" field.
func LevelNameLT(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldLT(FieldLevelName, v))
}

// LevelNameLTE applies the LTE predicate on the "level_name" field.
func LevelNameLTE(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldLTE(FieldLevelName, v))
}

// LevelNameContains applies the Contains predicate on the "level_name" field.
func LevelNameContains(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldContains(FieldLevelName, v))
}

// LevelNameHasPrefix applies the HasPrefix predicate on the "level_name" field.
func LevelNameHasPrefix(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldHasPrefix(FieldLevelName, v))
}

// LevelNameHasSuffix applies the HasSuffix predicate on the "level_name" field.
func LevelNameHasSuffix(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldHasSuffix(FieldLevelName, v))
}

// LevelNameEqualFold applies the EqualFold predicate on the "level_name" field.
func LevelNameEqualFold(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldEqualFold(FieldLevelName, v))
}

// LevelNameContainsFold applies the ContainsFold predicate on the "level_name" field.
func LevelNameContainsFold(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldContainsFold(FieldLevelName, v))
}

// ExpStartEQ applies the EQ predicate on the "exp_start" field.
func ExpStartEQ(v int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldEQ(FieldExpStart, v))
}

// ExpStartNEQ applies the NEQ predicate on the "exp_start" field.
func ExpStartNEQ(v int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldNEQ(FieldExpStart, v))
}

// ExpStartIn applies the In predicate on the "exp_start" field.
func ExpStartIn(vs ...int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldIn(FieldExpStart, vs...))
}

// ExpStartNotIn applies the NotIn predicate on the "exp_start" field.
func ExpStartNotIn(vs ...int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldNotIn(FieldExpStart, vs...))
}

// ExpStartGT applies the GT predicate on the "exp_start" field.
func ExpStartGT(v int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldGT(FieldExpStart, v))
}

// ExpStartGTE applies the GTE predicate on the "exp_start" field.
func ExpStartGTE(v int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldGTE(FieldExpStart, v))
}

// ExpStartLT applies the LT predicate on the "exp_start" field.
func ExpStartLT(v int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldLT(FieldExpStart, v))
}

// ExpStartLTE applies the LTE predicate on the "exp_start" field.
func ExpStartLTE(v int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldLTE(FieldExpStart, v))
}

// ExpEndEQ applies the EQ predicate on the "exp_end" field.
func ExpEndEQ(v int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldEQ(FieldExpEnd, v))
}

// ExpEndNEQ applies the NEQ predicate on the "exp_end" field.
func ExpEndNEQ(v int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldNEQ(FieldExpEnd, v))
}

// ExpEndIn applies the In predicate on the "exp_end" field.
func ExpEndIn(vs ...int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldIn(FieldExpEnd, vs...))
}

// ExpEndNotIn applies the NotIn predicate on the "exp_end" field.
func ExpEndNotIn(vs ...int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldNotIn(FieldExpEnd, vs...))
}

// ExpEndGT applies the GT predicate on the "exp_end" field.
func ExpEndGT(v int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldGT(FieldExpEnd, v))
}

// ExpEndGTE applies the GTE predicate on the "exp_end" field.
func ExpEndGTE(v int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldGTE(FieldExpEnd, v))
}

// ExpEndLT applies the LT predicate on the "exp_end" field.
func ExpEndLT(v int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldLT(FieldExpEnd, v))
}

// ExpEndLTE applies the LTE predicate on the "exp_end" field.
func ExpEndLTE(v int64) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldLTE(FieldExpEnd, v))
}

// LevelDescriptionEQ applies the EQ predicate on the "level_description" field.
func LevelDescriptionEQ(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldEQ(FieldLevelDescription, v))
}

// LevelDescriptionNEQ applies the NEQ predicate on the "level_description" field.
func LevelDescriptionNEQ(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldNEQ(FieldLevelDescription, v))
}

// LevelDescriptionIn applies the In predicate on the "level_description" field.
func LevelDescriptionIn(vs ...string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldIn(FieldLevelDescription, vs...))
}

// LevelDescriptionNotIn applies the NotIn predicate on the "level_description" field.
func LevelDescriptionNotIn(vs ...string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldNotIn(FieldLevelDescription, vs...))
}

// LevelDescriptionGT applies the GT predicate on the "level_description" field.
func LevelDescriptionGT(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldGT(FieldLevelDescription, v))
}

// LevelDescriptionGTE applies the GTE predicate on the "level_description" field.
func LevelDescriptionGTE(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldGTE(FieldLevelDescription, v))
}

// LevelDescriptionLT applies the LT predicate on the "level_description" field.
func LevelDescriptionLT(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldLT(FieldLevelDescription, v))
}

// LevelDescriptionLTE applies the LTE predicate on the "level_description" field.
func LevelDescriptionLTE(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldLTE(FieldLevelDescription, v))
}

// LevelDescriptionContains applies the Contains predicate on the "level_description" field.
func LevelDescriptionContains(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldContains(FieldLevelDescription, v))
}

// LevelDescriptionHasPrefix applies the HasPrefix predicate on the "level_description" field.
func LevelDescriptionHasPrefix(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldHasPrefix(FieldLevelDescription, v))
}

// LevelDescriptionHasSuffix applies the HasSuffix predicate on the "level_description" field.
func LevelDescriptionHasSuffix(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldHasSuffix(FieldLevelDescription, v))
}

// LevelDescriptionIsNil applies the IsNil predicate on the "level_description" field.
func LevelDescriptionIsNil() predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldIsNull(FieldLevelDescription))
}

// LevelDescriptionNotNil applies the NotNil predicate on the "level_description" field.
func LevelDescriptionNotNil() predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldNotNull(FieldLevelDescription))
}

// LevelDescriptionEqualFold applies the EqualFold predicate on the "level_description" field.
func LevelDescriptionEqualFold(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldEqualFold(FieldLevelDescription, v))
}

// LevelDescriptionContainsFold applies the ContainsFold predicate on the "level_description" field.
func LevelDescriptionContainsFold(v string) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.FieldContainsFold(FieldLevelDescription, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScaUserLevel) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScaUserLevel) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScaUserLevel) predicate.ScaUserLevel {
	return predicate.ScaUserLevel(sql.NotPredicates(p))
}
