// Code generated by ent, DO NOT EDIT.

package scauserlevel

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the scauserlevel type in the database.
	Label = "sca_user_level"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldLevelType holds the string denoting the level_type field in the database.
	FieldLevelType = "level_type"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldLevelName holds the string denoting the level_name field in the database.
	FieldLevelName = "level_name"
	// FieldExpStart holds the string denoting the exp_start field in the database.
	FieldExpStart = "exp_start"
	// FieldExpEnd holds the string denoting the exp_end field in the database.
	FieldExpEnd = "exp_end"
	// FieldLevelDescription holds the string denoting the level_description field in the database.
	FieldLevelDescription = "level_description"
	// Table holds the table name of the scauserlevel in the database.
	Table = "sca_user_level"
)

// Columns holds all SQL columns for scauserlevel fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldLevelType,
	FieldLevel,
	FieldLevelName,
	FieldExpStart,
	FieldExpEnd,
	FieldLevelDescription,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// LevelNameValidator is a validator for the "level_name" field. It is called by the builders before save.
	LevelNameValidator func(string) error
)

// OrderOption defines the ordering options for the ScaUserLevel queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByLevelType orders the results by the level_type field.
func ByLevelType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevelType, opts...).ToFunc()
}

// ByLevel orders the results by the level field.
func ByLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevel, opts...).ToFunc()
}

// ByLevelName orders the results by the level_name field.
func ByLevelName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevelName, opts...).ToFunc()
}

// ByExpStart orders the results by the exp_start field.
func ByExpStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpStart, opts...).ToFunc()
}

// ByExpEnd orders the results by the exp_end field.
func ByExpEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpEnd, opts...).ToFunc()
}

// ByLevelDescription orders the results by the level_description field.
func ByLevelDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevelDescription, opts...).ToFunc()
}
