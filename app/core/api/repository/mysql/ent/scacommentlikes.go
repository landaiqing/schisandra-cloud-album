// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scacommentlikes"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 评论点赞表
type ScaCommentLikes struct {
	config `json:"-"`
	// ID of the ent.
	// 主键id
	ID int64 `json:"id,omitempty"`
	// 话题ID
	TopicID string `json:"topic_id,omitempty"`
	// 用户ID
	UserID string `json:"user_id,omitempty"`
	// 评论ID
	CommentID int64 `json:"comment_id,omitempty"`
	// 点赞时间
	LikeTime     time.Time `json:"like_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScaCommentLikes) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scacommentlikes.FieldID, scacommentlikes.FieldCommentID:
			values[i] = new(sql.NullInt64)
		case scacommentlikes.FieldTopicID, scacommentlikes.FieldUserID:
			values[i] = new(sql.NullString)
		case scacommentlikes.FieldLikeTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScaCommentLikes fields.
func (scl *ScaCommentLikes) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scacommentlikes.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			scl.ID = int64(value.Int64)
		case scacommentlikes.FieldTopicID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic_id", values[i])
			} else if value.Valid {
				scl.TopicID = value.String
			}
		case scacommentlikes.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				scl.UserID = value.String
			}
		case scacommentlikes.FieldCommentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field comment_id", values[i])
			} else if value.Valid {
				scl.CommentID = value.Int64
			}
		case scacommentlikes.FieldLikeTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field like_time", values[i])
			} else if value.Valid {
				scl.LikeTime = value.Time
			}
		default:
			scl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScaCommentLikes.
// This includes values selected through modifiers, order, etc.
func (scl *ScaCommentLikes) Value(name string) (ent.Value, error) {
	return scl.selectValues.Get(name)
}

// Update returns a builder for updating this ScaCommentLikes.
// Note that you need to call ScaCommentLikes.Unwrap() before calling this method if this ScaCommentLikes
// was returned from a transaction, and the transaction was committed or rolled back.
func (scl *ScaCommentLikes) Update() *ScaCommentLikesUpdateOne {
	return NewScaCommentLikesClient(scl.config).UpdateOne(scl)
}

// Unwrap unwraps the ScaCommentLikes entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (scl *ScaCommentLikes) Unwrap() *ScaCommentLikes {
	_tx, ok := scl.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScaCommentLikes is not a transactional entity")
	}
	scl.config.driver = _tx.drv
	return scl
}

// String implements the fmt.Stringer.
func (scl *ScaCommentLikes) String() string {
	var builder strings.Builder
	builder.WriteString("ScaCommentLikes(")
	builder.WriteString(fmt.Sprintf("id=%v, ", scl.ID))
	builder.WriteString("topic_id=")
	builder.WriteString(scl.TopicID)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(scl.UserID)
	builder.WriteString(", ")
	builder.WriteString("comment_id=")
	builder.WriteString(fmt.Sprintf("%v", scl.CommentID))
	builder.WriteString(", ")
	builder.WriteString("like_time=")
	builder.WriteString(scl.LikeTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ScaCommentLikesSlice is a parsable slice of ScaCommentLikes.
type ScaCommentLikesSlice []*ScaCommentLikes
