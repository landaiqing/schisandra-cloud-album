// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scaauthuser"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 用户表
type ScaAuthUser struct {
	config `json:"-"`
	// ID of the ent.
	// 自增ID
	ID int64 `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 是否删除 0 未删除 1 已删除
	Deleted int8 `json:"deleted,omitempty"`
	// 唯一ID
	UID string `json:"uid,omitempty"`
	// 用户名
	Username string `json:"username,omitempty"`
	// 昵称
	Nickname string `json:"nickname,omitempty"`
	// 邮箱
	Email string `json:"email,omitempty"`
	// 电话
	Phone string `json:"phone,omitempty"`
	// 密码
	Password string `json:"-"`
	// 性别
	Gender int8 `json:"gender,omitempty"`
	// 头像
	Avatar string `json:"avatar,omitempty"`
	// 状态 0 正常 1 封禁
	Status int8 `json:"status,omitempty"`
	// 介绍
	Introduce string `json:"introduce,omitempty"`
	// 博客
	Blog *string `json:"blog,omitempty"`
	// 地址
	Location *string `json:"location,omitempty"`
	// 公司
	Company      *string `json:"company,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScaAuthUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scaauthuser.FieldID, scaauthuser.FieldDeleted, scaauthuser.FieldGender, scaauthuser.FieldStatus:
			values[i] = new(sql.NullInt64)
		case scaauthuser.FieldUID, scaauthuser.FieldUsername, scaauthuser.FieldNickname, scaauthuser.FieldEmail, scaauthuser.FieldPhone, scaauthuser.FieldPassword, scaauthuser.FieldAvatar, scaauthuser.FieldIntroduce, scaauthuser.FieldBlog, scaauthuser.FieldLocation, scaauthuser.FieldCompany:
			values[i] = new(sql.NullString)
		case scaauthuser.FieldCreatedAt, scaauthuser.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScaAuthUser fields.
func (sau *ScaAuthUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scaauthuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sau.ID = int64(value.Int64)
		case scaauthuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sau.CreatedAt = value.Time
			}
		case scaauthuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sau.UpdatedAt = value.Time
			}
		case scaauthuser.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				sau.Deleted = int8(value.Int64)
			}
		case scaauthuser.FieldUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				sau.UID = value.String
			}
		case scaauthuser.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				sau.Username = value.String
			}
		case scaauthuser.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				sau.Nickname = value.String
			}
		case scaauthuser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				sau.Email = value.String
			}
		case scaauthuser.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				sau.Phone = value.String
			}
		case scaauthuser.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				sau.Password = value.String
			}
		case scaauthuser.FieldGender:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				sau.Gender = int8(value.Int64)
			}
		case scaauthuser.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				sau.Avatar = value.String
			}
		case scaauthuser.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sau.Status = int8(value.Int64)
			}
		case scaauthuser.FieldIntroduce:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field introduce", values[i])
			} else if value.Valid {
				sau.Introduce = value.String
			}
		case scaauthuser.FieldBlog:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field blog", values[i])
			} else if value.Valid {
				sau.Blog = new(string)
				*sau.Blog = value.String
			}
		case scaauthuser.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				sau.Location = new(string)
				*sau.Location = value.String
			}
		case scaauthuser.FieldCompany:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company", values[i])
			} else if value.Valid {
				sau.Company = new(string)
				*sau.Company = value.String
			}
		default:
			sau.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScaAuthUser.
// This includes values selected through modifiers, order, etc.
func (sau *ScaAuthUser) Value(name string) (ent.Value, error) {
	return sau.selectValues.Get(name)
}

// Update returns a builder for updating this ScaAuthUser.
// Note that you need to call ScaAuthUser.Unwrap() before calling this method if this ScaAuthUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (sau *ScaAuthUser) Update() *ScaAuthUserUpdateOne {
	return NewScaAuthUserClient(sau.config).UpdateOne(sau)
}

// Unwrap unwraps the ScaAuthUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sau *ScaAuthUser) Unwrap() *ScaAuthUser {
	_tx, ok := sau.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScaAuthUser is not a transactional entity")
	}
	sau.config.driver = _tx.drv
	return sau
}

// String implements the fmt.Stringer.
func (sau *ScaAuthUser) String() string {
	var builder strings.Builder
	builder.WriteString("ScaAuthUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sau.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sau.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sau.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", sau.Deleted))
	builder.WriteString(", ")
	builder.WriteString("uid=")
	builder.WriteString(sau.UID)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(sau.Username)
	builder.WriteString(", ")
	builder.WriteString("nickname=")
	builder.WriteString(sau.Nickname)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(sau.Email)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(sau.Phone)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", sau.Gender))
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(sau.Avatar)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sau.Status))
	builder.WriteString(", ")
	builder.WriteString("introduce=")
	builder.WriteString(sau.Introduce)
	builder.WriteString(", ")
	if v := sau.Blog; v != nil {
		builder.WriteString("blog=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sau.Location; v != nil {
		builder.WriteString("location=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sau.Company; v != nil {
		builder.WriteString("company=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// ScaAuthUsers is a parsable slice of ScaAuthUser.
type ScaAuthUsers []*ScaAuthUser
