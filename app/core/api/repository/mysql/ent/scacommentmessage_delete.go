// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/predicate"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scacommentmessage"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScaCommentMessageDelete is the builder for deleting a ScaCommentMessage entity.
type ScaCommentMessageDelete struct {
	config
	hooks    []Hook
	mutation *ScaCommentMessageMutation
}

// Where appends a list predicates to the ScaCommentMessageDelete builder.
func (scmd *ScaCommentMessageDelete) Where(ps ...predicate.ScaCommentMessage) *ScaCommentMessageDelete {
	scmd.mutation.Where(ps...)
	return scmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (scmd *ScaCommentMessageDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, scmd.sqlExec, scmd.mutation, scmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (scmd *ScaCommentMessageDelete) ExecX(ctx context.Context) int {
	n, err := scmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (scmd *ScaCommentMessageDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(scacommentmessage.Table, sqlgraph.NewFieldSpec(scacommentmessage.FieldID, field.TypeInt64))
	if ps := scmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, scmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	scmd.mutation.done = true
	return affected, err
}

// ScaCommentMessageDeleteOne is the builder for deleting a single ScaCommentMessage entity.
type ScaCommentMessageDeleteOne struct {
	scmd *ScaCommentMessageDelete
}

// Where appends a list predicates to the ScaCommentMessageDelete builder.
func (scmdo *ScaCommentMessageDeleteOne) Where(ps ...predicate.ScaCommentMessage) *ScaCommentMessageDeleteOne {
	scmdo.scmd.mutation.Where(ps...)
	return scmdo
}

// Exec executes the deletion query.
func (scmdo *ScaCommentMessageDeleteOne) Exec(ctx context.Context) error {
	n, err := scmdo.scmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{scacommentmessage.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (scmdo *ScaCommentMessageDeleteOne) ExecX(ctx context.Context) {
	if err := scmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
