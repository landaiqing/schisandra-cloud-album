// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/predicate"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scauserlevel"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScaUserLevelDelete is the builder for deleting a ScaUserLevel entity.
type ScaUserLevelDelete struct {
	config
	hooks    []Hook
	mutation *ScaUserLevelMutation
}

// Where appends a list predicates to the ScaUserLevelDelete builder.
func (suld *ScaUserLevelDelete) Where(ps ...predicate.ScaUserLevel) *ScaUserLevelDelete {
	suld.mutation.Where(ps...)
	return suld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (suld *ScaUserLevelDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, suld.sqlExec, suld.mutation, suld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (suld *ScaUserLevelDelete) ExecX(ctx context.Context) int {
	n, err := suld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (suld *ScaUserLevelDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(scauserlevel.Table, sqlgraph.NewFieldSpec(scauserlevel.FieldID, field.TypeInt64))
	if ps := suld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, suld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	suld.mutation.done = true
	return affected, err
}

// ScaUserLevelDeleteOne is the builder for deleting a single ScaUserLevel entity.
type ScaUserLevelDeleteOne struct {
	suld *ScaUserLevelDelete
}

// Where appends a list predicates to the ScaUserLevelDelete builder.
func (suldo *ScaUserLevelDeleteOne) Where(ps ...predicate.ScaUserLevel) *ScaUserLevelDeleteOne {
	suldo.suld.mutation.Where(ps...)
	return suldo
}

// Exec executes the deletion query.
func (suldo *ScaUserLevelDeleteOne) Exec(ctx context.Context) error {
	n, err := suldo.suld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{scauserlevel.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (suldo *ScaUserLevelDeleteOne) ExecX(ctx context.Context) {
	if err := suldo.Exec(ctx); err != nil {
		panic(err)
	}
}
