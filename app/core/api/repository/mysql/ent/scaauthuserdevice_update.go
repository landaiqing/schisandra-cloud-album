// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/predicate"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scaauthuserdevice"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScaAuthUserDeviceUpdate is the builder for updating ScaAuthUserDevice entities.
type ScaAuthUserDeviceUpdate struct {
	config
	hooks    []Hook
	mutation *ScaAuthUserDeviceMutation
}

// Where appends a list predicates to the ScaAuthUserDeviceUpdate builder.
func (saudu *ScaAuthUserDeviceUpdate) Where(ps ...predicate.ScaAuthUserDevice) *ScaAuthUserDeviceUpdate {
	saudu.mutation.Where(ps...)
	return saudu
}

// SetUpdatedAt sets the "updated_at" field.
func (saudu *ScaAuthUserDeviceUpdate) SetUpdatedAt(t time.Time) *ScaAuthUserDeviceUpdate {
	saudu.mutation.SetUpdatedAt(t)
	return saudu
}

// SetDeleted sets the "deleted" field.
func (saudu *ScaAuthUserDeviceUpdate) SetDeleted(i int8) *ScaAuthUserDeviceUpdate {
	saudu.mutation.ResetDeleted()
	saudu.mutation.SetDeleted(i)
	return saudu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (saudu *ScaAuthUserDeviceUpdate) SetNillableDeleted(i *int8) *ScaAuthUserDeviceUpdate {
	if i != nil {
		saudu.SetDeleted(*i)
	}
	return saudu
}

// AddDeleted adds i to the "deleted" field.
func (saudu *ScaAuthUserDeviceUpdate) AddDeleted(i int8) *ScaAuthUserDeviceUpdate {
	saudu.mutation.AddDeleted(i)
	return saudu
}

// ClearDeleted clears the value of the "deleted" field.
func (saudu *ScaAuthUserDeviceUpdate) ClearDeleted() *ScaAuthUserDeviceUpdate {
	saudu.mutation.ClearDeleted()
	return saudu
}

// SetUserID sets the "user_id" field.
func (saudu *ScaAuthUserDeviceUpdate) SetUserID(s string) *ScaAuthUserDeviceUpdate {
	saudu.mutation.SetUserID(s)
	return saudu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (saudu *ScaAuthUserDeviceUpdate) SetNillableUserID(s *string) *ScaAuthUserDeviceUpdate {
	if s != nil {
		saudu.SetUserID(*s)
	}
	return saudu
}

// SetIP sets the "ip" field.
func (saudu *ScaAuthUserDeviceUpdate) SetIP(s string) *ScaAuthUserDeviceUpdate {
	saudu.mutation.SetIP(s)
	return saudu
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (saudu *ScaAuthUserDeviceUpdate) SetNillableIP(s *string) *ScaAuthUserDeviceUpdate {
	if s != nil {
		saudu.SetIP(*s)
	}
	return saudu
}

// SetLocation sets the "location" field.
func (saudu *ScaAuthUserDeviceUpdate) SetLocation(s string) *ScaAuthUserDeviceUpdate {
	saudu.mutation.SetLocation(s)
	return saudu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (saudu *ScaAuthUserDeviceUpdate) SetNillableLocation(s *string) *ScaAuthUserDeviceUpdate {
	if s != nil {
		saudu.SetLocation(*s)
	}
	return saudu
}

// SetAgent sets the "agent" field.
func (saudu *ScaAuthUserDeviceUpdate) SetAgent(s string) *ScaAuthUserDeviceUpdate {
	saudu.mutation.SetAgent(s)
	return saudu
}

// SetNillableAgent sets the "agent" field if the given value is not nil.
func (saudu *ScaAuthUserDeviceUpdate) SetNillableAgent(s *string) *ScaAuthUserDeviceUpdate {
	if s != nil {
		saudu.SetAgent(*s)
	}
	return saudu
}

// SetBrowser sets the "browser" field.
func (saudu *ScaAuthUserDeviceUpdate) SetBrowser(s string) *ScaAuthUserDeviceUpdate {
	saudu.mutation.SetBrowser(s)
	return saudu
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (saudu *ScaAuthUserDeviceUpdate) SetNillableBrowser(s *string) *ScaAuthUserDeviceUpdate {
	if s != nil {
		saudu.SetBrowser(*s)
	}
	return saudu
}

// SetOperatingSystem sets the "operating_system" field.
func (saudu *ScaAuthUserDeviceUpdate) SetOperatingSystem(s string) *ScaAuthUserDeviceUpdate {
	saudu.mutation.SetOperatingSystem(s)
	return saudu
}

// SetNillableOperatingSystem sets the "operating_system" field if the given value is not nil.
func (saudu *ScaAuthUserDeviceUpdate) SetNillableOperatingSystem(s *string) *ScaAuthUserDeviceUpdate {
	if s != nil {
		saudu.SetOperatingSystem(*s)
	}
	return saudu
}

// SetBrowserVersion sets the "browser_version" field.
func (saudu *ScaAuthUserDeviceUpdate) SetBrowserVersion(s string) *ScaAuthUserDeviceUpdate {
	saudu.mutation.SetBrowserVersion(s)
	return saudu
}

// SetNillableBrowserVersion sets the "browser_version" field if the given value is not nil.
func (saudu *ScaAuthUserDeviceUpdate) SetNillableBrowserVersion(s *string) *ScaAuthUserDeviceUpdate {
	if s != nil {
		saudu.SetBrowserVersion(*s)
	}
	return saudu
}

// SetMobile sets the "mobile" field.
func (saudu *ScaAuthUserDeviceUpdate) SetMobile(b bool) *ScaAuthUserDeviceUpdate {
	saudu.mutation.SetMobile(b)
	return saudu
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (saudu *ScaAuthUserDeviceUpdate) SetNillableMobile(b *bool) *ScaAuthUserDeviceUpdate {
	if b != nil {
		saudu.SetMobile(*b)
	}
	return saudu
}

// SetBot sets the "bot" field.
func (saudu *ScaAuthUserDeviceUpdate) SetBot(b bool) *ScaAuthUserDeviceUpdate {
	saudu.mutation.SetBot(b)
	return saudu
}

// SetNillableBot sets the "bot" field if the given value is not nil.
func (saudu *ScaAuthUserDeviceUpdate) SetNillableBot(b *bool) *ScaAuthUserDeviceUpdate {
	if b != nil {
		saudu.SetBot(*b)
	}
	return saudu
}

// SetMozilla sets the "mozilla" field.
func (saudu *ScaAuthUserDeviceUpdate) SetMozilla(s string) *ScaAuthUserDeviceUpdate {
	saudu.mutation.SetMozilla(s)
	return saudu
}

// SetNillableMozilla sets the "mozilla" field if the given value is not nil.
func (saudu *ScaAuthUserDeviceUpdate) SetNillableMozilla(s *string) *ScaAuthUserDeviceUpdate {
	if s != nil {
		saudu.SetMozilla(*s)
	}
	return saudu
}

// SetPlatform sets the "platform" field.
func (saudu *ScaAuthUserDeviceUpdate) SetPlatform(s string) *ScaAuthUserDeviceUpdate {
	saudu.mutation.SetPlatform(s)
	return saudu
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (saudu *ScaAuthUserDeviceUpdate) SetNillablePlatform(s *string) *ScaAuthUserDeviceUpdate {
	if s != nil {
		saudu.SetPlatform(*s)
	}
	return saudu
}

// SetEngineName sets the "engine_name" field.
func (saudu *ScaAuthUserDeviceUpdate) SetEngineName(s string) *ScaAuthUserDeviceUpdate {
	saudu.mutation.SetEngineName(s)
	return saudu
}

// SetNillableEngineName sets the "engine_name" field if the given value is not nil.
func (saudu *ScaAuthUserDeviceUpdate) SetNillableEngineName(s *string) *ScaAuthUserDeviceUpdate {
	if s != nil {
		saudu.SetEngineName(*s)
	}
	return saudu
}

// SetEngineVersion sets the "engine_version" field.
func (saudu *ScaAuthUserDeviceUpdate) SetEngineVersion(s string) *ScaAuthUserDeviceUpdate {
	saudu.mutation.SetEngineVersion(s)
	return saudu
}

// SetNillableEngineVersion sets the "engine_version" field if the given value is not nil.
func (saudu *ScaAuthUserDeviceUpdate) SetNillableEngineVersion(s *string) *ScaAuthUserDeviceUpdate {
	if s != nil {
		saudu.SetEngineVersion(*s)
	}
	return saudu
}

// Mutation returns the ScaAuthUserDeviceMutation object of the builder.
func (saudu *ScaAuthUserDeviceUpdate) Mutation() *ScaAuthUserDeviceMutation {
	return saudu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (saudu *ScaAuthUserDeviceUpdate) Save(ctx context.Context) (int, error) {
	saudu.defaults()
	return withHooks(ctx, saudu.sqlSave, saudu.mutation, saudu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (saudu *ScaAuthUserDeviceUpdate) SaveX(ctx context.Context) int {
	affected, err := saudu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (saudu *ScaAuthUserDeviceUpdate) Exec(ctx context.Context) error {
	_, err := saudu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (saudu *ScaAuthUserDeviceUpdate) ExecX(ctx context.Context) {
	if err := saudu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (saudu *ScaAuthUserDeviceUpdate) defaults() {
	if _, ok := saudu.mutation.UpdatedAt(); !ok {
		v := scaauthuserdevice.UpdateDefaultUpdatedAt()
		saudu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (saudu *ScaAuthUserDeviceUpdate) check() error {
	if v, ok := saudu.mutation.Deleted(); ok {
		if err := scaauthuserdevice.DeletedValidator(v); err != nil {
			return &ValidationError{Name: "deleted", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.deleted": %w`, err)}
		}
	}
	if v, ok := saudu.mutation.UserID(); ok {
		if err := scaauthuserdevice.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.user_id": %w`, err)}
		}
	}
	if v, ok := saudu.mutation.IP(); ok {
		if err := scaauthuserdevice.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.ip": %w`, err)}
		}
	}
	if v, ok := saudu.mutation.Location(); ok {
		if err := scaauthuserdevice.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.location": %w`, err)}
		}
	}
	if v, ok := saudu.mutation.Agent(); ok {
		if err := scaauthuserdevice.AgentValidator(v); err != nil {
			return &ValidationError{Name: "agent", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.agent": %w`, err)}
		}
	}
	if v, ok := saudu.mutation.Browser(); ok {
		if err := scaauthuserdevice.BrowserValidator(v); err != nil {
			return &ValidationError{Name: "browser", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.browser": %w`, err)}
		}
	}
	if v, ok := saudu.mutation.OperatingSystem(); ok {
		if err := scaauthuserdevice.OperatingSystemValidator(v); err != nil {
			return &ValidationError{Name: "operating_system", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.operating_system": %w`, err)}
		}
	}
	if v, ok := saudu.mutation.BrowserVersion(); ok {
		if err := scaauthuserdevice.BrowserVersionValidator(v); err != nil {
			return &ValidationError{Name: "browser_version", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.browser_version": %w`, err)}
		}
	}
	if v, ok := saudu.mutation.Mozilla(); ok {
		if err := scaauthuserdevice.MozillaValidator(v); err != nil {
			return &ValidationError{Name: "mozilla", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.mozilla": %w`, err)}
		}
	}
	if v, ok := saudu.mutation.Platform(); ok {
		if err := scaauthuserdevice.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.platform": %w`, err)}
		}
	}
	if v, ok := saudu.mutation.EngineName(); ok {
		if err := scaauthuserdevice.EngineNameValidator(v); err != nil {
			return &ValidationError{Name: "engine_name", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.engine_name": %w`, err)}
		}
	}
	if v, ok := saudu.mutation.EngineVersion(); ok {
		if err := scaauthuserdevice.EngineVersionValidator(v); err != nil {
			return &ValidationError{Name: "engine_version", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.engine_version": %w`, err)}
		}
	}
	return nil
}

func (saudu *ScaAuthUserDeviceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := saudu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(scaauthuserdevice.Table, scaauthuserdevice.Columns, sqlgraph.NewFieldSpec(scaauthuserdevice.FieldID, field.TypeInt64))
	if ps := saudu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := saudu.mutation.UpdatedAt(); ok {
		_spec.SetField(scaauthuserdevice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := saudu.mutation.Deleted(); ok {
		_spec.SetField(scaauthuserdevice.FieldDeleted, field.TypeInt8, value)
	}
	if value, ok := saudu.mutation.AddedDeleted(); ok {
		_spec.AddField(scaauthuserdevice.FieldDeleted, field.TypeInt8, value)
	}
	if saudu.mutation.DeletedCleared() {
		_spec.ClearField(scaauthuserdevice.FieldDeleted, field.TypeInt8)
	}
	if value, ok := saudu.mutation.UserID(); ok {
		_spec.SetField(scaauthuserdevice.FieldUserID, field.TypeString, value)
	}
	if value, ok := saudu.mutation.IP(); ok {
		_spec.SetField(scaauthuserdevice.FieldIP, field.TypeString, value)
	}
	if value, ok := saudu.mutation.Location(); ok {
		_spec.SetField(scaauthuserdevice.FieldLocation, field.TypeString, value)
	}
	if value, ok := saudu.mutation.Agent(); ok {
		_spec.SetField(scaauthuserdevice.FieldAgent, field.TypeString, value)
	}
	if value, ok := saudu.mutation.Browser(); ok {
		_spec.SetField(scaauthuserdevice.FieldBrowser, field.TypeString, value)
	}
	if value, ok := saudu.mutation.OperatingSystem(); ok {
		_spec.SetField(scaauthuserdevice.FieldOperatingSystem, field.TypeString, value)
	}
	if value, ok := saudu.mutation.BrowserVersion(); ok {
		_spec.SetField(scaauthuserdevice.FieldBrowserVersion, field.TypeString, value)
	}
	if value, ok := saudu.mutation.Mobile(); ok {
		_spec.SetField(scaauthuserdevice.FieldMobile, field.TypeBool, value)
	}
	if value, ok := saudu.mutation.Bot(); ok {
		_spec.SetField(scaauthuserdevice.FieldBot, field.TypeBool, value)
	}
	if value, ok := saudu.mutation.Mozilla(); ok {
		_spec.SetField(scaauthuserdevice.FieldMozilla, field.TypeString, value)
	}
	if value, ok := saudu.mutation.Platform(); ok {
		_spec.SetField(scaauthuserdevice.FieldPlatform, field.TypeString, value)
	}
	if value, ok := saudu.mutation.EngineName(); ok {
		_spec.SetField(scaauthuserdevice.FieldEngineName, field.TypeString, value)
	}
	if value, ok := saudu.mutation.EngineVersion(); ok {
		_spec.SetField(scaauthuserdevice.FieldEngineVersion, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, saudu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scaauthuserdevice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	saudu.mutation.done = true
	return n, nil
}

// ScaAuthUserDeviceUpdateOne is the builder for updating a single ScaAuthUserDevice entity.
type ScaAuthUserDeviceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScaAuthUserDeviceMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetUpdatedAt(t time.Time) *ScaAuthUserDeviceUpdateOne {
	sauduo.mutation.SetUpdatedAt(t)
	return sauduo
}

// SetDeleted sets the "deleted" field.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetDeleted(i int8) *ScaAuthUserDeviceUpdateOne {
	sauduo.mutation.ResetDeleted()
	sauduo.mutation.SetDeleted(i)
	return sauduo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetNillableDeleted(i *int8) *ScaAuthUserDeviceUpdateOne {
	if i != nil {
		sauduo.SetDeleted(*i)
	}
	return sauduo
}

// AddDeleted adds i to the "deleted" field.
func (sauduo *ScaAuthUserDeviceUpdateOne) AddDeleted(i int8) *ScaAuthUserDeviceUpdateOne {
	sauduo.mutation.AddDeleted(i)
	return sauduo
}

// ClearDeleted clears the value of the "deleted" field.
func (sauduo *ScaAuthUserDeviceUpdateOne) ClearDeleted() *ScaAuthUserDeviceUpdateOne {
	sauduo.mutation.ClearDeleted()
	return sauduo
}

// SetUserID sets the "user_id" field.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetUserID(s string) *ScaAuthUserDeviceUpdateOne {
	sauduo.mutation.SetUserID(s)
	return sauduo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetNillableUserID(s *string) *ScaAuthUserDeviceUpdateOne {
	if s != nil {
		sauduo.SetUserID(*s)
	}
	return sauduo
}

// SetIP sets the "ip" field.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetIP(s string) *ScaAuthUserDeviceUpdateOne {
	sauduo.mutation.SetIP(s)
	return sauduo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetNillableIP(s *string) *ScaAuthUserDeviceUpdateOne {
	if s != nil {
		sauduo.SetIP(*s)
	}
	return sauduo
}

// SetLocation sets the "location" field.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetLocation(s string) *ScaAuthUserDeviceUpdateOne {
	sauduo.mutation.SetLocation(s)
	return sauduo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetNillableLocation(s *string) *ScaAuthUserDeviceUpdateOne {
	if s != nil {
		sauduo.SetLocation(*s)
	}
	return sauduo
}

// SetAgent sets the "agent" field.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetAgent(s string) *ScaAuthUserDeviceUpdateOne {
	sauduo.mutation.SetAgent(s)
	return sauduo
}

// SetNillableAgent sets the "agent" field if the given value is not nil.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetNillableAgent(s *string) *ScaAuthUserDeviceUpdateOne {
	if s != nil {
		sauduo.SetAgent(*s)
	}
	return sauduo
}

// SetBrowser sets the "browser" field.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetBrowser(s string) *ScaAuthUserDeviceUpdateOne {
	sauduo.mutation.SetBrowser(s)
	return sauduo
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetNillableBrowser(s *string) *ScaAuthUserDeviceUpdateOne {
	if s != nil {
		sauduo.SetBrowser(*s)
	}
	return sauduo
}

// SetOperatingSystem sets the "operating_system" field.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetOperatingSystem(s string) *ScaAuthUserDeviceUpdateOne {
	sauduo.mutation.SetOperatingSystem(s)
	return sauduo
}

// SetNillableOperatingSystem sets the "operating_system" field if the given value is not nil.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetNillableOperatingSystem(s *string) *ScaAuthUserDeviceUpdateOne {
	if s != nil {
		sauduo.SetOperatingSystem(*s)
	}
	return sauduo
}

// SetBrowserVersion sets the "browser_version" field.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetBrowserVersion(s string) *ScaAuthUserDeviceUpdateOne {
	sauduo.mutation.SetBrowserVersion(s)
	return sauduo
}

// SetNillableBrowserVersion sets the "browser_version" field if the given value is not nil.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetNillableBrowserVersion(s *string) *ScaAuthUserDeviceUpdateOne {
	if s != nil {
		sauduo.SetBrowserVersion(*s)
	}
	return sauduo
}

// SetMobile sets the "mobile" field.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetMobile(b bool) *ScaAuthUserDeviceUpdateOne {
	sauduo.mutation.SetMobile(b)
	return sauduo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetNillableMobile(b *bool) *ScaAuthUserDeviceUpdateOne {
	if b != nil {
		sauduo.SetMobile(*b)
	}
	return sauduo
}

// SetBot sets the "bot" field.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetBot(b bool) *ScaAuthUserDeviceUpdateOne {
	sauduo.mutation.SetBot(b)
	return sauduo
}

// SetNillableBot sets the "bot" field if the given value is not nil.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetNillableBot(b *bool) *ScaAuthUserDeviceUpdateOne {
	if b != nil {
		sauduo.SetBot(*b)
	}
	return sauduo
}

// SetMozilla sets the "mozilla" field.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetMozilla(s string) *ScaAuthUserDeviceUpdateOne {
	sauduo.mutation.SetMozilla(s)
	return sauduo
}

// SetNillableMozilla sets the "mozilla" field if the given value is not nil.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetNillableMozilla(s *string) *ScaAuthUserDeviceUpdateOne {
	if s != nil {
		sauduo.SetMozilla(*s)
	}
	return sauduo
}

// SetPlatform sets the "platform" field.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetPlatform(s string) *ScaAuthUserDeviceUpdateOne {
	sauduo.mutation.SetPlatform(s)
	return sauduo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetNillablePlatform(s *string) *ScaAuthUserDeviceUpdateOne {
	if s != nil {
		sauduo.SetPlatform(*s)
	}
	return sauduo
}

// SetEngineName sets the "engine_name" field.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetEngineName(s string) *ScaAuthUserDeviceUpdateOne {
	sauduo.mutation.SetEngineName(s)
	return sauduo
}

// SetNillableEngineName sets the "engine_name" field if the given value is not nil.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetNillableEngineName(s *string) *ScaAuthUserDeviceUpdateOne {
	if s != nil {
		sauduo.SetEngineName(*s)
	}
	return sauduo
}

// SetEngineVersion sets the "engine_version" field.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetEngineVersion(s string) *ScaAuthUserDeviceUpdateOne {
	sauduo.mutation.SetEngineVersion(s)
	return sauduo
}

// SetNillableEngineVersion sets the "engine_version" field if the given value is not nil.
func (sauduo *ScaAuthUserDeviceUpdateOne) SetNillableEngineVersion(s *string) *ScaAuthUserDeviceUpdateOne {
	if s != nil {
		sauduo.SetEngineVersion(*s)
	}
	return sauduo
}

// Mutation returns the ScaAuthUserDeviceMutation object of the builder.
func (sauduo *ScaAuthUserDeviceUpdateOne) Mutation() *ScaAuthUserDeviceMutation {
	return sauduo.mutation
}

// Where appends a list predicates to the ScaAuthUserDeviceUpdate builder.
func (sauduo *ScaAuthUserDeviceUpdateOne) Where(ps ...predicate.ScaAuthUserDevice) *ScaAuthUserDeviceUpdateOne {
	sauduo.mutation.Where(ps...)
	return sauduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sauduo *ScaAuthUserDeviceUpdateOne) Select(field string, fields ...string) *ScaAuthUserDeviceUpdateOne {
	sauduo.fields = append([]string{field}, fields...)
	return sauduo
}

// Save executes the query and returns the updated ScaAuthUserDevice entity.
func (sauduo *ScaAuthUserDeviceUpdateOne) Save(ctx context.Context) (*ScaAuthUserDevice, error) {
	sauduo.defaults()
	return withHooks(ctx, sauduo.sqlSave, sauduo.mutation, sauduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sauduo *ScaAuthUserDeviceUpdateOne) SaveX(ctx context.Context) *ScaAuthUserDevice {
	node, err := sauduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sauduo *ScaAuthUserDeviceUpdateOne) Exec(ctx context.Context) error {
	_, err := sauduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sauduo *ScaAuthUserDeviceUpdateOne) ExecX(ctx context.Context) {
	if err := sauduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sauduo *ScaAuthUserDeviceUpdateOne) defaults() {
	if _, ok := sauduo.mutation.UpdatedAt(); !ok {
		v := scaauthuserdevice.UpdateDefaultUpdatedAt()
		sauduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sauduo *ScaAuthUserDeviceUpdateOne) check() error {
	if v, ok := sauduo.mutation.Deleted(); ok {
		if err := scaauthuserdevice.DeletedValidator(v); err != nil {
			return &ValidationError{Name: "deleted", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.deleted": %w`, err)}
		}
	}
	if v, ok := sauduo.mutation.UserID(); ok {
		if err := scaauthuserdevice.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.user_id": %w`, err)}
		}
	}
	if v, ok := sauduo.mutation.IP(); ok {
		if err := scaauthuserdevice.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.ip": %w`, err)}
		}
	}
	if v, ok := sauduo.mutation.Location(); ok {
		if err := scaauthuserdevice.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.location": %w`, err)}
		}
	}
	if v, ok := sauduo.mutation.Agent(); ok {
		if err := scaauthuserdevice.AgentValidator(v); err != nil {
			return &ValidationError{Name: "agent", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.agent": %w`, err)}
		}
	}
	if v, ok := sauduo.mutation.Browser(); ok {
		if err := scaauthuserdevice.BrowserValidator(v); err != nil {
			return &ValidationError{Name: "browser", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.browser": %w`, err)}
		}
	}
	if v, ok := sauduo.mutation.OperatingSystem(); ok {
		if err := scaauthuserdevice.OperatingSystemValidator(v); err != nil {
			return &ValidationError{Name: "operating_system", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.operating_system": %w`, err)}
		}
	}
	if v, ok := sauduo.mutation.BrowserVersion(); ok {
		if err := scaauthuserdevice.BrowserVersionValidator(v); err != nil {
			return &ValidationError{Name: "browser_version", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.browser_version": %w`, err)}
		}
	}
	if v, ok := sauduo.mutation.Mozilla(); ok {
		if err := scaauthuserdevice.MozillaValidator(v); err != nil {
			return &ValidationError{Name: "mozilla", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.mozilla": %w`, err)}
		}
	}
	if v, ok := sauduo.mutation.Platform(); ok {
		if err := scaauthuserdevice.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.platform": %w`, err)}
		}
	}
	if v, ok := sauduo.mutation.EngineName(); ok {
		if err := scaauthuserdevice.EngineNameValidator(v); err != nil {
			return &ValidationError{Name: "engine_name", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.engine_name": %w`, err)}
		}
	}
	if v, ok := sauduo.mutation.EngineVersion(); ok {
		if err := scaauthuserdevice.EngineVersionValidator(v); err != nil {
			return &ValidationError{Name: "engine_version", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.engine_version": %w`, err)}
		}
	}
	return nil
}

func (sauduo *ScaAuthUserDeviceUpdateOne) sqlSave(ctx context.Context) (_node *ScaAuthUserDevice, err error) {
	if err := sauduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scaauthuserdevice.Table, scaauthuserdevice.Columns, sqlgraph.NewFieldSpec(scaauthuserdevice.FieldID, field.TypeInt64))
	id, ok := sauduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScaAuthUserDevice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sauduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scaauthuserdevice.FieldID)
		for _, f := range fields {
			if !scaauthuserdevice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scaauthuserdevice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sauduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sauduo.mutation.UpdatedAt(); ok {
		_spec.SetField(scaauthuserdevice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sauduo.mutation.Deleted(); ok {
		_spec.SetField(scaauthuserdevice.FieldDeleted, field.TypeInt8, value)
	}
	if value, ok := sauduo.mutation.AddedDeleted(); ok {
		_spec.AddField(scaauthuserdevice.FieldDeleted, field.TypeInt8, value)
	}
	if sauduo.mutation.DeletedCleared() {
		_spec.ClearField(scaauthuserdevice.FieldDeleted, field.TypeInt8)
	}
	if value, ok := sauduo.mutation.UserID(); ok {
		_spec.SetField(scaauthuserdevice.FieldUserID, field.TypeString, value)
	}
	if value, ok := sauduo.mutation.IP(); ok {
		_spec.SetField(scaauthuserdevice.FieldIP, field.TypeString, value)
	}
	if value, ok := sauduo.mutation.Location(); ok {
		_spec.SetField(scaauthuserdevice.FieldLocation, field.TypeString, value)
	}
	if value, ok := sauduo.mutation.Agent(); ok {
		_spec.SetField(scaauthuserdevice.FieldAgent, field.TypeString, value)
	}
	if value, ok := sauduo.mutation.Browser(); ok {
		_spec.SetField(scaauthuserdevice.FieldBrowser, field.TypeString, value)
	}
	if value, ok := sauduo.mutation.OperatingSystem(); ok {
		_spec.SetField(scaauthuserdevice.FieldOperatingSystem, field.TypeString, value)
	}
	if value, ok := sauduo.mutation.BrowserVersion(); ok {
		_spec.SetField(scaauthuserdevice.FieldBrowserVersion, field.TypeString, value)
	}
	if value, ok := sauduo.mutation.Mobile(); ok {
		_spec.SetField(scaauthuserdevice.FieldMobile, field.TypeBool, value)
	}
	if value, ok := sauduo.mutation.Bot(); ok {
		_spec.SetField(scaauthuserdevice.FieldBot, field.TypeBool, value)
	}
	if value, ok := sauduo.mutation.Mozilla(); ok {
		_spec.SetField(scaauthuserdevice.FieldMozilla, field.TypeString, value)
	}
	if value, ok := sauduo.mutation.Platform(); ok {
		_spec.SetField(scaauthuserdevice.FieldPlatform, field.TypeString, value)
	}
	if value, ok := sauduo.mutation.EngineName(); ok {
		_spec.SetField(scaauthuserdevice.FieldEngineName, field.TypeString, value)
	}
	if value, ok := sauduo.mutation.EngineVersion(); ok {
		_spec.SetField(scaauthuserdevice.FieldEngineVersion, field.TypeString, value)
	}
	_node = &ScaAuthUserDevice{config: sauduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sauduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scaauthuserdevice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sauduo.mutation.done = true
	return _node, nil
}
