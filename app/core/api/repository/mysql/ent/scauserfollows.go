// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scauserfollows"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 用户关注表
type ScaUserFollows struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 关注者
	FollowerID string `json:"follower_id,omitempty"`
	// 被关注者
	FolloweeID string `json:"followee_id,omitempty"`
	// 关注状态（0 未互关 1 互关）
	Status       uint8 `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScaUserFollows) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scauserfollows.FieldID, scauserfollows.FieldStatus:
			values[i] = new(sql.NullInt64)
		case scauserfollows.FieldFollowerID, scauserfollows.FieldFolloweeID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScaUserFollows fields.
func (suf *ScaUserFollows) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scauserfollows.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			suf.ID = int(value.Int64)
		case scauserfollows.FieldFollowerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field follower_id", values[i])
			} else if value.Valid {
				suf.FollowerID = value.String
			}
		case scauserfollows.FieldFolloweeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field followee_id", values[i])
			} else if value.Valid {
				suf.FolloweeID = value.String
			}
		case scauserfollows.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				suf.Status = uint8(value.Int64)
			}
		default:
			suf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScaUserFollows.
// This includes values selected through modifiers, order, etc.
func (suf *ScaUserFollows) Value(name string) (ent.Value, error) {
	return suf.selectValues.Get(name)
}

// Update returns a builder for updating this ScaUserFollows.
// Note that you need to call ScaUserFollows.Unwrap() before calling this method if this ScaUserFollows
// was returned from a transaction, and the transaction was committed or rolled back.
func (suf *ScaUserFollows) Update() *ScaUserFollowsUpdateOne {
	return NewScaUserFollowsClient(suf.config).UpdateOne(suf)
}

// Unwrap unwraps the ScaUserFollows entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (suf *ScaUserFollows) Unwrap() *ScaUserFollows {
	_tx, ok := suf.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScaUserFollows is not a transactional entity")
	}
	suf.config.driver = _tx.drv
	return suf
}

// String implements the fmt.Stringer.
func (suf *ScaUserFollows) String() string {
	var builder strings.Builder
	builder.WriteString("ScaUserFollows(")
	builder.WriteString(fmt.Sprintf("id=%v, ", suf.ID))
	builder.WriteString("follower_id=")
	builder.WriteString(suf.FollowerID)
	builder.WriteString(", ")
	builder.WriteString("followee_id=")
	builder.WriteString(suf.FolloweeID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", suf.Status))
	builder.WriteByte(')')
	return builder.String()
}

// ScaUserFollowsSlice is a parsable slice of ScaUserFollows.
type ScaUserFollowsSlice []*ScaUserFollows
