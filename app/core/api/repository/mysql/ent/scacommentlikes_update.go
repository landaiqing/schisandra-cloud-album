// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/predicate"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scacommentlikes"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScaCommentLikesUpdate is the builder for updating ScaCommentLikes entities.
type ScaCommentLikesUpdate struct {
	config
	hooks    []Hook
	mutation *ScaCommentLikesMutation
}

// Where appends a list predicates to the ScaCommentLikesUpdate builder.
func (sclu *ScaCommentLikesUpdate) Where(ps ...predicate.ScaCommentLikes) *ScaCommentLikesUpdate {
	sclu.mutation.Where(ps...)
	return sclu
}

// SetTopicID sets the "topic_id" field.
func (sclu *ScaCommentLikesUpdate) SetTopicID(s string) *ScaCommentLikesUpdate {
	sclu.mutation.SetTopicID(s)
	return sclu
}

// SetNillableTopicID sets the "topic_id" field if the given value is not nil.
func (sclu *ScaCommentLikesUpdate) SetNillableTopicID(s *string) *ScaCommentLikesUpdate {
	if s != nil {
		sclu.SetTopicID(*s)
	}
	return sclu
}

// SetUserID sets the "user_id" field.
func (sclu *ScaCommentLikesUpdate) SetUserID(s string) *ScaCommentLikesUpdate {
	sclu.mutation.SetUserID(s)
	return sclu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sclu *ScaCommentLikesUpdate) SetNillableUserID(s *string) *ScaCommentLikesUpdate {
	if s != nil {
		sclu.SetUserID(*s)
	}
	return sclu
}

// SetCommentID sets the "comment_id" field.
func (sclu *ScaCommentLikesUpdate) SetCommentID(i int64) *ScaCommentLikesUpdate {
	sclu.mutation.ResetCommentID()
	sclu.mutation.SetCommentID(i)
	return sclu
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (sclu *ScaCommentLikesUpdate) SetNillableCommentID(i *int64) *ScaCommentLikesUpdate {
	if i != nil {
		sclu.SetCommentID(*i)
	}
	return sclu
}

// AddCommentID adds i to the "comment_id" field.
func (sclu *ScaCommentLikesUpdate) AddCommentID(i int64) *ScaCommentLikesUpdate {
	sclu.mutation.AddCommentID(i)
	return sclu
}

// SetLikeTime sets the "like_time" field.
func (sclu *ScaCommentLikesUpdate) SetLikeTime(t time.Time) *ScaCommentLikesUpdate {
	sclu.mutation.SetLikeTime(t)
	return sclu
}

// SetNillableLikeTime sets the "like_time" field if the given value is not nil.
func (sclu *ScaCommentLikesUpdate) SetNillableLikeTime(t *time.Time) *ScaCommentLikesUpdate {
	if t != nil {
		sclu.SetLikeTime(*t)
	}
	return sclu
}

// Mutation returns the ScaCommentLikesMutation object of the builder.
func (sclu *ScaCommentLikesUpdate) Mutation() *ScaCommentLikesMutation {
	return sclu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sclu *ScaCommentLikesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sclu.sqlSave, sclu.mutation, sclu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sclu *ScaCommentLikesUpdate) SaveX(ctx context.Context) int {
	affected, err := sclu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sclu *ScaCommentLikesUpdate) Exec(ctx context.Context) error {
	_, err := sclu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sclu *ScaCommentLikesUpdate) ExecX(ctx context.Context) {
	if err := sclu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sclu *ScaCommentLikesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(scacommentlikes.Table, scacommentlikes.Columns, sqlgraph.NewFieldSpec(scacommentlikes.FieldID, field.TypeInt64))
	if ps := sclu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sclu.mutation.TopicID(); ok {
		_spec.SetField(scacommentlikes.FieldTopicID, field.TypeString, value)
	}
	if value, ok := sclu.mutation.UserID(); ok {
		_spec.SetField(scacommentlikes.FieldUserID, field.TypeString, value)
	}
	if value, ok := sclu.mutation.CommentID(); ok {
		_spec.SetField(scacommentlikes.FieldCommentID, field.TypeInt64, value)
	}
	if value, ok := sclu.mutation.AddedCommentID(); ok {
		_spec.AddField(scacommentlikes.FieldCommentID, field.TypeInt64, value)
	}
	if value, ok := sclu.mutation.LikeTime(); ok {
		_spec.SetField(scacommentlikes.FieldLikeTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sclu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scacommentlikes.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sclu.mutation.done = true
	return n, nil
}

// ScaCommentLikesUpdateOne is the builder for updating a single ScaCommentLikes entity.
type ScaCommentLikesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScaCommentLikesMutation
}

// SetTopicID sets the "topic_id" field.
func (scluo *ScaCommentLikesUpdateOne) SetTopicID(s string) *ScaCommentLikesUpdateOne {
	scluo.mutation.SetTopicID(s)
	return scluo
}

// SetNillableTopicID sets the "topic_id" field if the given value is not nil.
func (scluo *ScaCommentLikesUpdateOne) SetNillableTopicID(s *string) *ScaCommentLikesUpdateOne {
	if s != nil {
		scluo.SetTopicID(*s)
	}
	return scluo
}

// SetUserID sets the "user_id" field.
func (scluo *ScaCommentLikesUpdateOne) SetUserID(s string) *ScaCommentLikesUpdateOne {
	scluo.mutation.SetUserID(s)
	return scluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (scluo *ScaCommentLikesUpdateOne) SetNillableUserID(s *string) *ScaCommentLikesUpdateOne {
	if s != nil {
		scluo.SetUserID(*s)
	}
	return scluo
}

// SetCommentID sets the "comment_id" field.
func (scluo *ScaCommentLikesUpdateOne) SetCommentID(i int64) *ScaCommentLikesUpdateOne {
	scluo.mutation.ResetCommentID()
	scluo.mutation.SetCommentID(i)
	return scluo
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (scluo *ScaCommentLikesUpdateOne) SetNillableCommentID(i *int64) *ScaCommentLikesUpdateOne {
	if i != nil {
		scluo.SetCommentID(*i)
	}
	return scluo
}

// AddCommentID adds i to the "comment_id" field.
func (scluo *ScaCommentLikesUpdateOne) AddCommentID(i int64) *ScaCommentLikesUpdateOne {
	scluo.mutation.AddCommentID(i)
	return scluo
}

// SetLikeTime sets the "like_time" field.
func (scluo *ScaCommentLikesUpdateOne) SetLikeTime(t time.Time) *ScaCommentLikesUpdateOne {
	scluo.mutation.SetLikeTime(t)
	return scluo
}

// SetNillableLikeTime sets the "like_time" field if the given value is not nil.
func (scluo *ScaCommentLikesUpdateOne) SetNillableLikeTime(t *time.Time) *ScaCommentLikesUpdateOne {
	if t != nil {
		scluo.SetLikeTime(*t)
	}
	return scluo
}

// Mutation returns the ScaCommentLikesMutation object of the builder.
func (scluo *ScaCommentLikesUpdateOne) Mutation() *ScaCommentLikesMutation {
	return scluo.mutation
}

// Where appends a list predicates to the ScaCommentLikesUpdate builder.
func (scluo *ScaCommentLikesUpdateOne) Where(ps ...predicate.ScaCommentLikes) *ScaCommentLikesUpdateOne {
	scluo.mutation.Where(ps...)
	return scluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scluo *ScaCommentLikesUpdateOne) Select(field string, fields ...string) *ScaCommentLikesUpdateOne {
	scluo.fields = append([]string{field}, fields...)
	return scluo
}

// Save executes the query and returns the updated ScaCommentLikes entity.
func (scluo *ScaCommentLikesUpdateOne) Save(ctx context.Context) (*ScaCommentLikes, error) {
	return withHooks(ctx, scluo.sqlSave, scluo.mutation, scluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scluo *ScaCommentLikesUpdateOne) SaveX(ctx context.Context) *ScaCommentLikes {
	node, err := scluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scluo *ScaCommentLikesUpdateOne) Exec(ctx context.Context) error {
	_, err := scluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scluo *ScaCommentLikesUpdateOne) ExecX(ctx context.Context) {
	if err := scluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (scluo *ScaCommentLikesUpdateOne) sqlSave(ctx context.Context) (_node *ScaCommentLikes, err error) {
	_spec := sqlgraph.NewUpdateSpec(scacommentlikes.Table, scacommentlikes.Columns, sqlgraph.NewFieldSpec(scacommentlikes.FieldID, field.TypeInt64))
	id, ok := scluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScaCommentLikes.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scacommentlikes.FieldID)
		for _, f := range fields {
			if !scacommentlikes.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scacommentlikes.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scluo.mutation.TopicID(); ok {
		_spec.SetField(scacommentlikes.FieldTopicID, field.TypeString, value)
	}
	if value, ok := scluo.mutation.UserID(); ok {
		_spec.SetField(scacommentlikes.FieldUserID, field.TypeString, value)
	}
	if value, ok := scluo.mutation.CommentID(); ok {
		_spec.SetField(scacommentlikes.FieldCommentID, field.TypeInt64, value)
	}
	if value, ok := scluo.mutation.AddedCommentID(); ok {
		_spec.AddField(scacommentlikes.FieldCommentID, field.TypeInt64, value)
	}
	if value, ok := scluo.mutation.LikeTime(); ok {
		_spec.SetField(scacommentlikes.FieldLikeTime, field.TypeTime, value)
	}
	_node = &ScaCommentLikes{config: scluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scacommentlikes.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scluo.mutation.done = true
	return _node, nil
}
