// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/predicate"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scauserlevel"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScaUserLevelUpdate is the builder for updating ScaUserLevel entities.
type ScaUserLevelUpdate struct {
	config
	hooks    []Hook
	mutation *ScaUserLevelMutation
}

// Where appends a list predicates to the ScaUserLevelUpdate builder.
func (sulu *ScaUserLevelUpdate) Where(ps ...predicate.ScaUserLevel) *ScaUserLevelUpdate {
	sulu.mutation.Where(ps...)
	return sulu
}

// SetUserID sets the "user_id" field.
func (sulu *ScaUserLevelUpdate) SetUserID(s string) *ScaUserLevelUpdate {
	sulu.mutation.SetUserID(s)
	return sulu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (sulu *ScaUserLevelUpdate) SetNillableUserID(s *string) *ScaUserLevelUpdate {
	if s != nil {
		sulu.SetUserID(*s)
	}
	return sulu
}

// SetLevelType sets the "level_type" field.
func (sulu *ScaUserLevelUpdate) SetLevelType(u uint8) *ScaUserLevelUpdate {
	sulu.mutation.ResetLevelType()
	sulu.mutation.SetLevelType(u)
	return sulu
}

// SetNillableLevelType sets the "level_type" field if the given value is not nil.
func (sulu *ScaUserLevelUpdate) SetNillableLevelType(u *uint8) *ScaUserLevelUpdate {
	if u != nil {
		sulu.SetLevelType(*u)
	}
	return sulu
}

// AddLevelType adds u to the "level_type" field.
func (sulu *ScaUserLevelUpdate) AddLevelType(u int8) *ScaUserLevelUpdate {
	sulu.mutation.AddLevelType(u)
	return sulu
}

// SetLevel sets the "level" field.
func (sulu *ScaUserLevelUpdate) SetLevel(i int) *ScaUserLevelUpdate {
	sulu.mutation.ResetLevel()
	sulu.mutation.SetLevel(i)
	return sulu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (sulu *ScaUserLevelUpdate) SetNillableLevel(i *int) *ScaUserLevelUpdate {
	if i != nil {
		sulu.SetLevel(*i)
	}
	return sulu
}

// AddLevel adds i to the "level" field.
func (sulu *ScaUserLevelUpdate) AddLevel(i int) *ScaUserLevelUpdate {
	sulu.mutation.AddLevel(i)
	return sulu
}

// SetLevelName sets the "level_name" field.
func (sulu *ScaUserLevelUpdate) SetLevelName(s string) *ScaUserLevelUpdate {
	sulu.mutation.SetLevelName(s)
	return sulu
}

// SetNillableLevelName sets the "level_name" field if the given value is not nil.
func (sulu *ScaUserLevelUpdate) SetNillableLevelName(s *string) *ScaUserLevelUpdate {
	if s != nil {
		sulu.SetLevelName(*s)
	}
	return sulu
}

// SetExpStart sets the "exp_start" field.
func (sulu *ScaUserLevelUpdate) SetExpStart(i int64) *ScaUserLevelUpdate {
	sulu.mutation.ResetExpStart()
	sulu.mutation.SetExpStart(i)
	return sulu
}

// SetNillableExpStart sets the "exp_start" field if the given value is not nil.
func (sulu *ScaUserLevelUpdate) SetNillableExpStart(i *int64) *ScaUserLevelUpdate {
	if i != nil {
		sulu.SetExpStart(*i)
	}
	return sulu
}

// AddExpStart adds i to the "exp_start" field.
func (sulu *ScaUserLevelUpdate) AddExpStart(i int64) *ScaUserLevelUpdate {
	sulu.mutation.AddExpStart(i)
	return sulu
}

// SetExpEnd sets the "exp_end" field.
func (sulu *ScaUserLevelUpdate) SetExpEnd(i int64) *ScaUserLevelUpdate {
	sulu.mutation.ResetExpEnd()
	sulu.mutation.SetExpEnd(i)
	return sulu
}

// SetNillableExpEnd sets the "exp_end" field if the given value is not nil.
func (sulu *ScaUserLevelUpdate) SetNillableExpEnd(i *int64) *ScaUserLevelUpdate {
	if i != nil {
		sulu.SetExpEnd(*i)
	}
	return sulu
}

// AddExpEnd adds i to the "exp_end" field.
func (sulu *ScaUserLevelUpdate) AddExpEnd(i int64) *ScaUserLevelUpdate {
	sulu.mutation.AddExpEnd(i)
	return sulu
}

// SetLevelDescription sets the "level_description" field.
func (sulu *ScaUserLevelUpdate) SetLevelDescription(s string) *ScaUserLevelUpdate {
	sulu.mutation.SetLevelDescription(s)
	return sulu
}

// SetNillableLevelDescription sets the "level_description" field if the given value is not nil.
func (sulu *ScaUserLevelUpdate) SetNillableLevelDescription(s *string) *ScaUserLevelUpdate {
	if s != nil {
		sulu.SetLevelDescription(*s)
	}
	return sulu
}

// ClearLevelDescription clears the value of the "level_description" field.
func (sulu *ScaUserLevelUpdate) ClearLevelDescription() *ScaUserLevelUpdate {
	sulu.mutation.ClearLevelDescription()
	return sulu
}

// Mutation returns the ScaUserLevelMutation object of the builder.
func (sulu *ScaUserLevelUpdate) Mutation() *ScaUserLevelMutation {
	return sulu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sulu *ScaUserLevelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sulu.sqlSave, sulu.mutation, sulu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sulu *ScaUserLevelUpdate) SaveX(ctx context.Context) int {
	affected, err := sulu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sulu *ScaUserLevelUpdate) Exec(ctx context.Context) error {
	_, err := sulu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sulu *ScaUserLevelUpdate) ExecX(ctx context.Context) {
	if err := sulu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sulu *ScaUserLevelUpdate) check() error {
	if v, ok := sulu.mutation.LevelName(); ok {
		if err := scauserlevel.LevelNameValidator(v); err != nil {
			return &ValidationError{Name: "level_name", err: fmt.Errorf(`ent: validator failed for field "ScaUserLevel.level_name": %w`, err)}
		}
	}
	return nil
}

func (sulu *ScaUserLevelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sulu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(scauserlevel.Table, scauserlevel.Columns, sqlgraph.NewFieldSpec(scauserlevel.FieldID, field.TypeInt64))
	if ps := sulu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sulu.mutation.UserID(); ok {
		_spec.SetField(scauserlevel.FieldUserID, field.TypeString, value)
	}
	if value, ok := sulu.mutation.LevelType(); ok {
		_spec.SetField(scauserlevel.FieldLevelType, field.TypeUint8, value)
	}
	if value, ok := sulu.mutation.AddedLevelType(); ok {
		_spec.AddField(scauserlevel.FieldLevelType, field.TypeUint8, value)
	}
	if value, ok := sulu.mutation.Level(); ok {
		_spec.SetField(scauserlevel.FieldLevel, field.TypeInt, value)
	}
	if value, ok := sulu.mutation.AddedLevel(); ok {
		_spec.AddField(scauserlevel.FieldLevel, field.TypeInt, value)
	}
	if value, ok := sulu.mutation.LevelName(); ok {
		_spec.SetField(scauserlevel.FieldLevelName, field.TypeString, value)
	}
	if value, ok := sulu.mutation.ExpStart(); ok {
		_spec.SetField(scauserlevel.FieldExpStart, field.TypeInt64, value)
	}
	if value, ok := sulu.mutation.AddedExpStart(); ok {
		_spec.AddField(scauserlevel.FieldExpStart, field.TypeInt64, value)
	}
	if value, ok := sulu.mutation.ExpEnd(); ok {
		_spec.SetField(scauserlevel.FieldExpEnd, field.TypeInt64, value)
	}
	if value, ok := sulu.mutation.AddedExpEnd(); ok {
		_spec.AddField(scauserlevel.FieldExpEnd, field.TypeInt64, value)
	}
	if value, ok := sulu.mutation.LevelDescription(); ok {
		_spec.SetField(scauserlevel.FieldLevelDescription, field.TypeString, value)
	}
	if sulu.mutation.LevelDescriptionCleared() {
		_spec.ClearField(scauserlevel.FieldLevelDescription, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sulu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scauserlevel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sulu.mutation.done = true
	return n, nil
}

// ScaUserLevelUpdateOne is the builder for updating a single ScaUserLevel entity.
type ScaUserLevelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScaUserLevelMutation
}

// SetUserID sets the "user_id" field.
func (suluo *ScaUserLevelUpdateOne) SetUserID(s string) *ScaUserLevelUpdateOne {
	suluo.mutation.SetUserID(s)
	return suluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suluo *ScaUserLevelUpdateOne) SetNillableUserID(s *string) *ScaUserLevelUpdateOne {
	if s != nil {
		suluo.SetUserID(*s)
	}
	return suluo
}

// SetLevelType sets the "level_type" field.
func (suluo *ScaUserLevelUpdateOne) SetLevelType(u uint8) *ScaUserLevelUpdateOne {
	suluo.mutation.ResetLevelType()
	suluo.mutation.SetLevelType(u)
	return suluo
}

// SetNillableLevelType sets the "level_type" field if the given value is not nil.
func (suluo *ScaUserLevelUpdateOne) SetNillableLevelType(u *uint8) *ScaUserLevelUpdateOne {
	if u != nil {
		suluo.SetLevelType(*u)
	}
	return suluo
}

// AddLevelType adds u to the "level_type" field.
func (suluo *ScaUserLevelUpdateOne) AddLevelType(u int8) *ScaUserLevelUpdateOne {
	suluo.mutation.AddLevelType(u)
	return suluo
}

// SetLevel sets the "level" field.
func (suluo *ScaUserLevelUpdateOne) SetLevel(i int) *ScaUserLevelUpdateOne {
	suluo.mutation.ResetLevel()
	suluo.mutation.SetLevel(i)
	return suluo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (suluo *ScaUserLevelUpdateOne) SetNillableLevel(i *int) *ScaUserLevelUpdateOne {
	if i != nil {
		suluo.SetLevel(*i)
	}
	return suluo
}

// AddLevel adds i to the "level" field.
func (suluo *ScaUserLevelUpdateOne) AddLevel(i int) *ScaUserLevelUpdateOne {
	suluo.mutation.AddLevel(i)
	return suluo
}

// SetLevelName sets the "level_name" field.
func (suluo *ScaUserLevelUpdateOne) SetLevelName(s string) *ScaUserLevelUpdateOne {
	suluo.mutation.SetLevelName(s)
	return suluo
}

// SetNillableLevelName sets the "level_name" field if the given value is not nil.
func (suluo *ScaUserLevelUpdateOne) SetNillableLevelName(s *string) *ScaUserLevelUpdateOne {
	if s != nil {
		suluo.SetLevelName(*s)
	}
	return suluo
}

// SetExpStart sets the "exp_start" field.
func (suluo *ScaUserLevelUpdateOne) SetExpStart(i int64) *ScaUserLevelUpdateOne {
	suluo.mutation.ResetExpStart()
	suluo.mutation.SetExpStart(i)
	return suluo
}

// SetNillableExpStart sets the "exp_start" field if the given value is not nil.
func (suluo *ScaUserLevelUpdateOne) SetNillableExpStart(i *int64) *ScaUserLevelUpdateOne {
	if i != nil {
		suluo.SetExpStart(*i)
	}
	return suluo
}

// AddExpStart adds i to the "exp_start" field.
func (suluo *ScaUserLevelUpdateOne) AddExpStart(i int64) *ScaUserLevelUpdateOne {
	suluo.mutation.AddExpStart(i)
	return suluo
}

// SetExpEnd sets the "exp_end" field.
func (suluo *ScaUserLevelUpdateOne) SetExpEnd(i int64) *ScaUserLevelUpdateOne {
	suluo.mutation.ResetExpEnd()
	suluo.mutation.SetExpEnd(i)
	return suluo
}

// SetNillableExpEnd sets the "exp_end" field if the given value is not nil.
func (suluo *ScaUserLevelUpdateOne) SetNillableExpEnd(i *int64) *ScaUserLevelUpdateOne {
	if i != nil {
		suluo.SetExpEnd(*i)
	}
	return suluo
}

// AddExpEnd adds i to the "exp_end" field.
func (suluo *ScaUserLevelUpdateOne) AddExpEnd(i int64) *ScaUserLevelUpdateOne {
	suluo.mutation.AddExpEnd(i)
	return suluo
}

// SetLevelDescription sets the "level_description" field.
func (suluo *ScaUserLevelUpdateOne) SetLevelDescription(s string) *ScaUserLevelUpdateOne {
	suluo.mutation.SetLevelDescription(s)
	return suluo
}

// SetNillableLevelDescription sets the "level_description" field if the given value is not nil.
func (suluo *ScaUserLevelUpdateOne) SetNillableLevelDescription(s *string) *ScaUserLevelUpdateOne {
	if s != nil {
		suluo.SetLevelDescription(*s)
	}
	return suluo
}

// ClearLevelDescription clears the value of the "level_description" field.
func (suluo *ScaUserLevelUpdateOne) ClearLevelDescription() *ScaUserLevelUpdateOne {
	suluo.mutation.ClearLevelDescription()
	return suluo
}

// Mutation returns the ScaUserLevelMutation object of the builder.
func (suluo *ScaUserLevelUpdateOne) Mutation() *ScaUserLevelMutation {
	return suluo.mutation
}

// Where appends a list predicates to the ScaUserLevelUpdate builder.
func (suluo *ScaUserLevelUpdateOne) Where(ps ...predicate.ScaUserLevel) *ScaUserLevelUpdateOne {
	suluo.mutation.Where(ps...)
	return suluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suluo *ScaUserLevelUpdateOne) Select(field string, fields ...string) *ScaUserLevelUpdateOne {
	suluo.fields = append([]string{field}, fields...)
	return suluo
}

// Save executes the query and returns the updated ScaUserLevel entity.
func (suluo *ScaUserLevelUpdateOne) Save(ctx context.Context) (*ScaUserLevel, error) {
	return withHooks(ctx, suluo.sqlSave, suluo.mutation, suluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suluo *ScaUserLevelUpdateOne) SaveX(ctx context.Context) *ScaUserLevel {
	node, err := suluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suluo *ScaUserLevelUpdateOne) Exec(ctx context.Context) error {
	_, err := suluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suluo *ScaUserLevelUpdateOne) ExecX(ctx context.Context) {
	if err := suluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suluo *ScaUserLevelUpdateOne) check() error {
	if v, ok := suluo.mutation.LevelName(); ok {
		if err := scauserlevel.LevelNameValidator(v); err != nil {
			return &ValidationError{Name: "level_name", err: fmt.Errorf(`ent: validator failed for field "ScaUserLevel.level_name": %w`, err)}
		}
	}
	return nil
}

func (suluo *ScaUserLevelUpdateOne) sqlSave(ctx context.Context) (_node *ScaUserLevel, err error) {
	if err := suluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scauserlevel.Table, scauserlevel.Columns, sqlgraph.NewFieldSpec(scauserlevel.FieldID, field.TypeInt64))
	id, ok := suluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScaUserLevel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scauserlevel.FieldID)
		for _, f := range fields {
			if !scauserlevel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scauserlevel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suluo.mutation.UserID(); ok {
		_spec.SetField(scauserlevel.FieldUserID, field.TypeString, value)
	}
	if value, ok := suluo.mutation.LevelType(); ok {
		_spec.SetField(scauserlevel.FieldLevelType, field.TypeUint8, value)
	}
	if value, ok := suluo.mutation.AddedLevelType(); ok {
		_spec.AddField(scauserlevel.FieldLevelType, field.TypeUint8, value)
	}
	if value, ok := suluo.mutation.Level(); ok {
		_spec.SetField(scauserlevel.FieldLevel, field.TypeInt, value)
	}
	if value, ok := suluo.mutation.AddedLevel(); ok {
		_spec.AddField(scauserlevel.FieldLevel, field.TypeInt, value)
	}
	if value, ok := suluo.mutation.LevelName(); ok {
		_spec.SetField(scauserlevel.FieldLevelName, field.TypeString, value)
	}
	if value, ok := suluo.mutation.ExpStart(); ok {
		_spec.SetField(scauserlevel.FieldExpStart, field.TypeInt64, value)
	}
	if value, ok := suluo.mutation.AddedExpStart(); ok {
		_spec.AddField(scauserlevel.FieldExpStart, field.TypeInt64, value)
	}
	if value, ok := suluo.mutation.ExpEnd(); ok {
		_spec.SetField(scauserlevel.FieldExpEnd, field.TypeInt64, value)
	}
	if value, ok := suluo.mutation.AddedExpEnd(); ok {
		_spec.AddField(scauserlevel.FieldExpEnd, field.TypeInt64, value)
	}
	if value, ok := suluo.mutation.LevelDescription(); ok {
		_spec.SetField(scauserlevel.FieldLevelDescription, field.TypeString, value)
	}
	if suluo.mutation.LevelDescriptionCleared() {
		_spec.ClearField(scauserlevel.FieldLevelDescription, field.TypeString)
	}
	_node = &ScaUserLevel{config: suluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scauserlevel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suluo.mutation.done = true
	return _node, nil
}
