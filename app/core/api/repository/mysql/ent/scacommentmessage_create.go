// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scacommentmessage"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScaCommentMessageCreate is the builder for creating a ScaCommentMessage entity.
type ScaCommentMessageCreate struct {
	config
	mutation *ScaCommentMessageMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (scmc *ScaCommentMessageCreate) SetCreatedAt(t time.Time) *ScaCommentMessageCreate {
	scmc.mutation.SetCreatedAt(t)
	return scmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scmc *ScaCommentMessageCreate) SetNillableCreatedAt(t *time.Time) *ScaCommentMessageCreate {
	if t != nil {
		scmc.SetCreatedAt(*t)
	}
	return scmc
}

// SetUpdatedAt sets the "updated_at" field.
func (scmc *ScaCommentMessageCreate) SetUpdatedAt(t time.Time) *ScaCommentMessageCreate {
	scmc.mutation.SetUpdatedAt(t)
	return scmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (scmc *ScaCommentMessageCreate) SetNillableUpdatedAt(t *time.Time) *ScaCommentMessageCreate {
	if t != nil {
		scmc.SetUpdatedAt(*t)
	}
	return scmc
}

// SetDeleted sets the "deleted" field.
func (scmc *ScaCommentMessageCreate) SetDeleted(i int8) *ScaCommentMessageCreate {
	scmc.mutation.SetDeleted(i)
	return scmc
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (scmc *ScaCommentMessageCreate) SetNillableDeleted(i *int8) *ScaCommentMessageCreate {
	if i != nil {
		scmc.SetDeleted(*i)
	}
	return scmc
}

// SetTopicID sets the "topic_id" field.
func (scmc *ScaCommentMessageCreate) SetTopicID(s string) *ScaCommentMessageCreate {
	scmc.mutation.SetTopicID(s)
	return scmc
}

// SetFromID sets the "from_id" field.
func (scmc *ScaCommentMessageCreate) SetFromID(s string) *ScaCommentMessageCreate {
	scmc.mutation.SetFromID(s)
	return scmc
}

// SetToID sets the "to_id" field.
func (scmc *ScaCommentMessageCreate) SetToID(s string) *ScaCommentMessageCreate {
	scmc.mutation.SetToID(s)
	return scmc
}

// SetContent sets the "content" field.
func (scmc *ScaCommentMessageCreate) SetContent(s string) *ScaCommentMessageCreate {
	scmc.mutation.SetContent(s)
	return scmc
}

// SetIsRead sets the "is_read" field.
func (scmc *ScaCommentMessageCreate) SetIsRead(i int) *ScaCommentMessageCreate {
	scmc.mutation.SetIsRead(i)
	return scmc
}

// SetNillableIsRead sets the "is_read" field if the given value is not nil.
func (scmc *ScaCommentMessageCreate) SetNillableIsRead(i *int) *ScaCommentMessageCreate {
	if i != nil {
		scmc.SetIsRead(*i)
	}
	return scmc
}

// SetID sets the "id" field.
func (scmc *ScaCommentMessageCreate) SetID(i int64) *ScaCommentMessageCreate {
	scmc.mutation.SetID(i)
	return scmc
}

// Mutation returns the ScaCommentMessageMutation object of the builder.
func (scmc *ScaCommentMessageCreate) Mutation() *ScaCommentMessageMutation {
	return scmc.mutation
}

// Save creates the ScaCommentMessage in the database.
func (scmc *ScaCommentMessageCreate) Save(ctx context.Context) (*ScaCommentMessage, error) {
	scmc.defaults()
	return withHooks(ctx, scmc.sqlSave, scmc.mutation, scmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scmc *ScaCommentMessageCreate) SaveX(ctx context.Context) *ScaCommentMessage {
	v, err := scmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scmc *ScaCommentMessageCreate) Exec(ctx context.Context) error {
	_, err := scmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scmc *ScaCommentMessageCreate) ExecX(ctx context.Context) {
	if err := scmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scmc *ScaCommentMessageCreate) defaults() {
	if _, ok := scmc.mutation.CreatedAt(); !ok {
		v := scacommentmessage.DefaultCreatedAt()
		scmc.mutation.SetCreatedAt(v)
	}
	if _, ok := scmc.mutation.Deleted(); !ok {
		v := scacommentmessage.DefaultDeleted
		scmc.mutation.SetDeleted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scmc *ScaCommentMessageCreate) check() error {
	if _, ok := scmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ScaCommentMessage.created_at"`)}
	}
	if _, ok := scmc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "ScaCommentMessage.deleted"`)}
	}
	if v, ok := scmc.mutation.Deleted(); ok {
		if err := scacommentmessage.DeletedValidator(v); err != nil {
			return &ValidationError{Name: "deleted", err: fmt.Errorf(`ent: validator failed for field "ScaCommentMessage.deleted": %w`, err)}
		}
	}
	if _, ok := scmc.mutation.TopicID(); !ok {
		return &ValidationError{Name: "topic_id", err: errors.New(`ent: missing required field "ScaCommentMessage.topic_id"`)}
	}
	if _, ok := scmc.mutation.FromID(); !ok {
		return &ValidationError{Name: "from_id", err: errors.New(`ent: missing required field "ScaCommentMessage.from_id"`)}
	}
	if _, ok := scmc.mutation.ToID(); !ok {
		return &ValidationError{Name: "to_id", err: errors.New(`ent: missing required field "ScaCommentMessage.to_id"`)}
	}
	if _, ok := scmc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "ScaCommentMessage.content"`)}
	}
	return nil
}

func (scmc *ScaCommentMessageCreate) sqlSave(ctx context.Context) (*ScaCommentMessage, error) {
	if err := scmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := scmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	scmc.mutation.id = &_node.ID
	scmc.mutation.done = true
	return _node, nil
}

func (scmc *ScaCommentMessageCreate) createSpec() (*ScaCommentMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &ScaCommentMessage{config: scmc.config}
		_spec = sqlgraph.NewCreateSpec(scacommentmessage.Table, sqlgraph.NewFieldSpec(scacommentmessage.FieldID, field.TypeInt64))
	)
	if id, ok := scmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := scmc.mutation.CreatedAt(); ok {
		_spec.SetField(scacommentmessage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := scmc.mutation.UpdatedAt(); ok {
		_spec.SetField(scacommentmessage.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := scmc.mutation.Deleted(); ok {
		_spec.SetField(scacommentmessage.FieldDeleted, field.TypeInt8, value)
		_node.Deleted = value
	}
	if value, ok := scmc.mutation.TopicID(); ok {
		_spec.SetField(scacommentmessage.FieldTopicID, field.TypeString, value)
		_node.TopicID = value
	}
	if value, ok := scmc.mutation.FromID(); ok {
		_spec.SetField(scacommentmessage.FieldFromID, field.TypeString, value)
		_node.FromID = value
	}
	if value, ok := scmc.mutation.ToID(); ok {
		_spec.SetField(scacommentmessage.FieldToID, field.TypeString, value)
		_node.ToID = value
	}
	if value, ok := scmc.mutation.Content(); ok {
		_spec.SetField(scacommentmessage.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := scmc.mutation.IsRead(); ok {
		_spec.SetField(scacommentmessage.FieldIsRead, field.TypeInt, value)
		_node.IsRead = value
	}
	return _node, _spec
}

// ScaCommentMessageCreateBulk is the builder for creating many ScaCommentMessage entities in bulk.
type ScaCommentMessageCreateBulk struct {
	config
	err      error
	builders []*ScaCommentMessageCreate
}

// Save creates the ScaCommentMessage entities in the database.
func (scmcb *ScaCommentMessageCreateBulk) Save(ctx context.Context) ([]*ScaCommentMessage, error) {
	if scmcb.err != nil {
		return nil, scmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scmcb.builders))
	nodes := make([]*ScaCommentMessage, len(scmcb.builders))
	mutators := make([]Mutator, len(scmcb.builders))
	for i := range scmcb.builders {
		func(i int, root context.Context) {
			builder := scmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScaCommentMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scmcb *ScaCommentMessageCreateBulk) SaveX(ctx context.Context) []*ScaCommentMessage {
	v, err := scmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scmcb *ScaCommentMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := scmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scmcb *ScaCommentMessageCreateBulk) ExecX(ctx context.Context) {
	if err := scmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
