// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scauserlevel"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScaUserLevelCreate is the builder for creating a ScaUserLevel entity.
type ScaUserLevelCreate struct {
	config
	mutation *ScaUserLevelMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (sulc *ScaUserLevelCreate) SetUserID(s string) *ScaUserLevelCreate {
	sulc.mutation.SetUserID(s)
	return sulc
}

// SetLevelType sets the "level_type" field.
func (sulc *ScaUserLevelCreate) SetLevelType(u uint8) *ScaUserLevelCreate {
	sulc.mutation.SetLevelType(u)
	return sulc
}

// SetLevel sets the "level" field.
func (sulc *ScaUserLevelCreate) SetLevel(i int) *ScaUserLevelCreate {
	sulc.mutation.SetLevel(i)
	return sulc
}

// SetLevelName sets the "level_name" field.
func (sulc *ScaUserLevelCreate) SetLevelName(s string) *ScaUserLevelCreate {
	sulc.mutation.SetLevelName(s)
	return sulc
}

// SetExpStart sets the "exp_start" field.
func (sulc *ScaUserLevelCreate) SetExpStart(i int64) *ScaUserLevelCreate {
	sulc.mutation.SetExpStart(i)
	return sulc
}

// SetExpEnd sets the "exp_end" field.
func (sulc *ScaUserLevelCreate) SetExpEnd(i int64) *ScaUserLevelCreate {
	sulc.mutation.SetExpEnd(i)
	return sulc
}

// SetLevelDescription sets the "level_description" field.
func (sulc *ScaUserLevelCreate) SetLevelDescription(s string) *ScaUserLevelCreate {
	sulc.mutation.SetLevelDescription(s)
	return sulc
}

// SetNillableLevelDescription sets the "level_description" field if the given value is not nil.
func (sulc *ScaUserLevelCreate) SetNillableLevelDescription(s *string) *ScaUserLevelCreate {
	if s != nil {
		sulc.SetLevelDescription(*s)
	}
	return sulc
}

// SetID sets the "id" field.
func (sulc *ScaUserLevelCreate) SetID(i int64) *ScaUserLevelCreate {
	sulc.mutation.SetID(i)
	return sulc
}

// Mutation returns the ScaUserLevelMutation object of the builder.
func (sulc *ScaUserLevelCreate) Mutation() *ScaUserLevelMutation {
	return sulc.mutation
}

// Save creates the ScaUserLevel in the database.
func (sulc *ScaUserLevelCreate) Save(ctx context.Context) (*ScaUserLevel, error) {
	return withHooks(ctx, sulc.sqlSave, sulc.mutation, sulc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sulc *ScaUserLevelCreate) SaveX(ctx context.Context) *ScaUserLevel {
	v, err := sulc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sulc *ScaUserLevelCreate) Exec(ctx context.Context) error {
	_, err := sulc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sulc *ScaUserLevelCreate) ExecX(ctx context.Context) {
	if err := sulc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sulc *ScaUserLevelCreate) check() error {
	if _, ok := sulc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ScaUserLevel.user_id"`)}
	}
	if _, ok := sulc.mutation.LevelType(); !ok {
		return &ValidationError{Name: "level_type", err: errors.New(`ent: missing required field "ScaUserLevel.level_type"`)}
	}
	if _, ok := sulc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "ScaUserLevel.level"`)}
	}
	if _, ok := sulc.mutation.LevelName(); !ok {
		return &ValidationError{Name: "level_name", err: errors.New(`ent: missing required field "ScaUserLevel.level_name"`)}
	}
	if v, ok := sulc.mutation.LevelName(); ok {
		if err := scauserlevel.LevelNameValidator(v); err != nil {
			return &ValidationError{Name: "level_name", err: fmt.Errorf(`ent: validator failed for field "ScaUserLevel.level_name": %w`, err)}
		}
	}
	if _, ok := sulc.mutation.ExpStart(); !ok {
		return &ValidationError{Name: "exp_start", err: errors.New(`ent: missing required field "ScaUserLevel.exp_start"`)}
	}
	if _, ok := sulc.mutation.ExpEnd(); !ok {
		return &ValidationError{Name: "exp_end", err: errors.New(`ent: missing required field "ScaUserLevel.exp_end"`)}
	}
	return nil
}

func (sulc *ScaUserLevelCreate) sqlSave(ctx context.Context) (*ScaUserLevel, error) {
	if err := sulc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sulc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sulc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sulc.mutation.id = &_node.ID
	sulc.mutation.done = true
	return _node, nil
}

func (sulc *ScaUserLevelCreate) createSpec() (*ScaUserLevel, *sqlgraph.CreateSpec) {
	var (
		_node = &ScaUserLevel{config: sulc.config}
		_spec = sqlgraph.NewCreateSpec(scauserlevel.Table, sqlgraph.NewFieldSpec(scauserlevel.FieldID, field.TypeInt64))
	)
	if id, ok := sulc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sulc.mutation.UserID(); ok {
		_spec.SetField(scauserlevel.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := sulc.mutation.LevelType(); ok {
		_spec.SetField(scauserlevel.FieldLevelType, field.TypeUint8, value)
		_node.LevelType = value
	}
	if value, ok := sulc.mutation.Level(); ok {
		_spec.SetField(scauserlevel.FieldLevel, field.TypeInt, value)
		_node.Level = value
	}
	if value, ok := sulc.mutation.LevelName(); ok {
		_spec.SetField(scauserlevel.FieldLevelName, field.TypeString, value)
		_node.LevelName = value
	}
	if value, ok := sulc.mutation.ExpStart(); ok {
		_spec.SetField(scauserlevel.FieldExpStart, field.TypeInt64, value)
		_node.ExpStart = value
	}
	if value, ok := sulc.mutation.ExpEnd(); ok {
		_spec.SetField(scauserlevel.FieldExpEnd, field.TypeInt64, value)
		_node.ExpEnd = value
	}
	if value, ok := sulc.mutation.LevelDescription(); ok {
		_spec.SetField(scauserlevel.FieldLevelDescription, field.TypeString, value)
		_node.LevelDescription = value
	}
	return _node, _spec
}

// ScaUserLevelCreateBulk is the builder for creating many ScaUserLevel entities in bulk.
type ScaUserLevelCreateBulk struct {
	config
	err      error
	builders []*ScaUserLevelCreate
}

// Save creates the ScaUserLevel entities in the database.
func (sulcb *ScaUserLevelCreateBulk) Save(ctx context.Context) ([]*ScaUserLevel, error) {
	if sulcb.err != nil {
		return nil, sulcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sulcb.builders))
	nodes := make([]*ScaUserLevel, len(sulcb.builders))
	mutators := make([]Mutator, len(sulcb.builders))
	for i := range sulcb.builders {
		func(i int, root context.Context) {
			builder := sulcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScaUserLevelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sulcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sulcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sulcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sulcb *ScaUserLevelCreateBulk) SaveX(ctx context.Context) []*ScaUserLevel {
	v, err := sulcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sulcb *ScaUserLevelCreateBulk) Exec(ctx context.Context) error {
	_, err := sulcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sulcb *ScaUserLevelCreateBulk) ExecX(ctx context.Context) {
	if err := sulcb.Exec(ctx); err != nil {
		panic(err)
	}
}
