// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scaauthuser"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scaauthuserdevice"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 用户设备表
type ScaAuthUserDevice struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID int64 `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 是否删除 0 未删除 1 已删除
	Deleted int8 `json:"deleted,omitempty"`
	// 用户ID
	UserID string `json:"user_id,omitempty"`
	// 登录IP
	IP string `json:"ip,omitempty"`
	// 地址
	Location string `json:"location,omitempty"`
	// 设备信息
	Agent string `json:"agent,omitempty"`
	// 浏览器
	Browser string `json:"browser,omitempty"`
	// 操作系统
	OperatingSystem string `json:"operating_system,omitempty"`
	// 浏览器版本
	BrowserVersion string `json:"browser_version,omitempty"`
	// 是否为手机 0否1是
	Mobile bool `json:"mobile,omitempty"`
	// 是否为bot 0否1是
	Bot bool `json:"bot,omitempty"`
	// 火狐版本
	Mozilla string `json:"mozilla,omitempty"`
	// 平台
	Platform string `json:"platform,omitempty"`
	// 引擎名称
	EngineName string `json:"engine_name,omitempty"`
	// 引擎版本
	EngineVersion string `json:"engine_version,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScaAuthUserDeviceQuery when eager-loading is set.
	Edges                              ScaAuthUserDeviceEdges `json:"edges"`
	sca_auth_user_sca_auth_user_device *int64
	selectValues                       sql.SelectValues
}

// ScaAuthUserDeviceEdges holds the relations/edges for other nodes in the graph.
type ScaAuthUserDeviceEdges struct {
	// ScaAuthUser holds the value of the sca_auth_user edge.
	ScaAuthUser *ScaAuthUser `json:"sca_auth_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ScaAuthUserOrErr returns the ScaAuthUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScaAuthUserDeviceEdges) ScaAuthUserOrErr() (*ScaAuthUser, error) {
	if e.ScaAuthUser != nil {
		return e.ScaAuthUser, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: scaauthuser.Label}
	}
	return nil, &NotLoadedError{edge: "sca_auth_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScaAuthUserDevice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scaauthuserdevice.FieldMobile, scaauthuserdevice.FieldBot:
			values[i] = new(sql.NullBool)
		case scaauthuserdevice.FieldID, scaauthuserdevice.FieldDeleted:
			values[i] = new(sql.NullInt64)
		case scaauthuserdevice.FieldUserID, scaauthuserdevice.FieldIP, scaauthuserdevice.FieldLocation, scaauthuserdevice.FieldAgent, scaauthuserdevice.FieldBrowser, scaauthuserdevice.FieldOperatingSystem, scaauthuserdevice.FieldBrowserVersion, scaauthuserdevice.FieldMozilla, scaauthuserdevice.FieldPlatform, scaauthuserdevice.FieldEngineName, scaauthuserdevice.FieldEngineVersion:
			values[i] = new(sql.NullString)
		case scaauthuserdevice.FieldCreatedAt, scaauthuserdevice.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case scaauthuserdevice.ForeignKeys[0]: // sca_auth_user_sca_auth_user_device
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScaAuthUserDevice fields.
func (saud *ScaAuthUserDevice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scaauthuserdevice.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			saud.ID = int64(value.Int64)
		case scaauthuserdevice.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				saud.CreatedAt = value.Time
			}
		case scaauthuserdevice.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				saud.UpdatedAt = value.Time
			}
		case scaauthuserdevice.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				saud.Deleted = int8(value.Int64)
			}
		case scaauthuserdevice.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				saud.UserID = value.String
			}
		case scaauthuserdevice.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				saud.IP = value.String
			}
		case scaauthuserdevice.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				saud.Location = value.String
			}
		case scaauthuserdevice.FieldAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agent", values[i])
			} else if value.Valid {
				saud.Agent = value.String
			}
		case scaauthuserdevice.FieldBrowser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field browser", values[i])
			} else if value.Valid {
				saud.Browser = value.String
			}
		case scaauthuserdevice.FieldOperatingSystem:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operating_system", values[i])
			} else if value.Valid {
				saud.OperatingSystem = value.String
			}
		case scaauthuserdevice.FieldBrowserVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field browser_version", values[i])
			} else if value.Valid {
				saud.BrowserVersion = value.String
			}
		case scaauthuserdevice.FieldMobile:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				saud.Mobile = value.Bool
			}
		case scaauthuserdevice.FieldBot:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field bot", values[i])
			} else if value.Valid {
				saud.Bot = value.Bool
			}
		case scaauthuserdevice.FieldMozilla:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mozilla", values[i])
			} else if value.Valid {
				saud.Mozilla = value.String
			}
		case scaauthuserdevice.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				saud.Platform = value.String
			}
		case scaauthuserdevice.FieldEngineName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field engine_name", values[i])
			} else if value.Valid {
				saud.EngineName = value.String
			}
		case scaauthuserdevice.FieldEngineVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field engine_version", values[i])
			} else if value.Valid {
				saud.EngineVersion = value.String
			}
		case scaauthuserdevice.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field sca_auth_user_sca_auth_user_device", value)
			} else if value.Valid {
				saud.sca_auth_user_sca_auth_user_device = new(int64)
				*saud.sca_auth_user_sca_auth_user_device = int64(value.Int64)
			}
		default:
			saud.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScaAuthUserDevice.
// This includes values selected through modifiers, order, etc.
func (saud *ScaAuthUserDevice) Value(name string) (ent.Value, error) {
	return saud.selectValues.Get(name)
}

// QueryScaAuthUser queries the "sca_auth_user" edge of the ScaAuthUserDevice entity.
func (saud *ScaAuthUserDevice) QueryScaAuthUser() *ScaAuthUserQuery {
	return NewScaAuthUserDeviceClient(saud.config).QueryScaAuthUser(saud)
}

// Update returns a builder for updating this ScaAuthUserDevice.
// Note that you need to call ScaAuthUserDevice.Unwrap() before calling this method if this ScaAuthUserDevice
// was returned from a transaction, and the transaction was committed or rolled back.
func (saud *ScaAuthUserDevice) Update() *ScaAuthUserDeviceUpdateOne {
	return NewScaAuthUserDeviceClient(saud.config).UpdateOne(saud)
}

// Unwrap unwraps the ScaAuthUserDevice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (saud *ScaAuthUserDevice) Unwrap() *ScaAuthUserDevice {
	_tx, ok := saud.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScaAuthUserDevice is not a transactional entity")
	}
	saud.config.driver = _tx.drv
	return saud
}

// String implements the fmt.Stringer.
func (saud *ScaAuthUserDevice) String() string {
	var builder strings.Builder
	builder.WriteString("ScaAuthUserDevice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", saud.ID))
	builder.WriteString("created_at=")
	builder.WriteString(saud.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(saud.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", saud.Deleted))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(saud.UserID)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(saud.IP)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(saud.Location)
	builder.WriteString(", ")
	builder.WriteString("agent=")
	builder.WriteString(saud.Agent)
	builder.WriteString(", ")
	builder.WriteString("browser=")
	builder.WriteString(saud.Browser)
	builder.WriteString(", ")
	builder.WriteString("operating_system=")
	builder.WriteString(saud.OperatingSystem)
	builder.WriteString(", ")
	builder.WriteString("browser_version=")
	builder.WriteString(saud.BrowserVersion)
	builder.WriteString(", ")
	builder.WriteString("mobile=")
	builder.WriteString(fmt.Sprintf("%v", saud.Mobile))
	builder.WriteString(", ")
	builder.WriteString("bot=")
	builder.WriteString(fmt.Sprintf("%v", saud.Bot))
	builder.WriteString(", ")
	builder.WriteString("mozilla=")
	builder.WriteString(saud.Mozilla)
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(saud.Platform)
	builder.WriteString(", ")
	builder.WriteString("engine_name=")
	builder.WriteString(saud.EngineName)
	builder.WriteString(", ")
	builder.WriteString("engine_version=")
	builder.WriteString(saud.EngineVersion)
	builder.WriteByte(')')
	return builder.String()
}

// ScaAuthUserDevices is a parsable slice of ScaAuthUserDevice.
type ScaAuthUserDevices []*ScaAuthUserDevice
