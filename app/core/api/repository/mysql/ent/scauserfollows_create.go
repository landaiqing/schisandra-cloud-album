// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scauserfollows"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScaUserFollowsCreate is the builder for creating a ScaUserFollows entity.
type ScaUserFollowsCreate struct {
	config
	mutation *ScaUserFollowsMutation
	hooks    []Hook
}

// SetFollowerID sets the "follower_id" field.
func (sufc *ScaUserFollowsCreate) SetFollowerID(s string) *ScaUserFollowsCreate {
	sufc.mutation.SetFollowerID(s)
	return sufc
}

// SetFolloweeID sets the "followee_id" field.
func (sufc *ScaUserFollowsCreate) SetFolloweeID(s string) *ScaUserFollowsCreate {
	sufc.mutation.SetFolloweeID(s)
	return sufc
}

// SetStatus sets the "status" field.
func (sufc *ScaUserFollowsCreate) SetStatus(u uint8) *ScaUserFollowsCreate {
	sufc.mutation.SetStatus(u)
	return sufc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sufc *ScaUserFollowsCreate) SetNillableStatus(u *uint8) *ScaUserFollowsCreate {
	if u != nil {
		sufc.SetStatus(*u)
	}
	return sufc
}

// Mutation returns the ScaUserFollowsMutation object of the builder.
func (sufc *ScaUserFollowsCreate) Mutation() *ScaUserFollowsMutation {
	return sufc.mutation
}

// Save creates the ScaUserFollows in the database.
func (sufc *ScaUserFollowsCreate) Save(ctx context.Context) (*ScaUserFollows, error) {
	sufc.defaults()
	return withHooks(ctx, sufc.sqlSave, sufc.mutation, sufc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sufc *ScaUserFollowsCreate) SaveX(ctx context.Context) *ScaUserFollows {
	v, err := sufc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sufc *ScaUserFollowsCreate) Exec(ctx context.Context) error {
	_, err := sufc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sufc *ScaUserFollowsCreate) ExecX(ctx context.Context) {
	if err := sufc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sufc *ScaUserFollowsCreate) defaults() {
	if _, ok := sufc.mutation.Status(); !ok {
		v := scauserfollows.DefaultStatus
		sufc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sufc *ScaUserFollowsCreate) check() error {
	if _, ok := sufc.mutation.FollowerID(); !ok {
		return &ValidationError{Name: "follower_id", err: errors.New(`ent: missing required field "ScaUserFollows.follower_id"`)}
	}
	if _, ok := sufc.mutation.FolloweeID(); !ok {
		return &ValidationError{Name: "followee_id", err: errors.New(`ent: missing required field "ScaUserFollows.followee_id"`)}
	}
	if _, ok := sufc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ScaUserFollows.status"`)}
	}
	return nil
}

func (sufc *ScaUserFollowsCreate) sqlSave(ctx context.Context) (*ScaUserFollows, error) {
	if err := sufc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sufc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sufc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sufc.mutation.id = &_node.ID
	sufc.mutation.done = true
	return _node, nil
}

func (sufc *ScaUserFollowsCreate) createSpec() (*ScaUserFollows, *sqlgraph.CreateSpec) {
	var (
		_node = &ScaUserFollows{config: sufc.config}
		_spec = sqlgraph.NewCreateSpec(scauserfollows.Table, sqlgraph.NewFieldSpec(scauserfollows.FieldID, field.TypeInt))
	)
	if value, ok := sufc.mutation.FollowerID(); ok {
		_spec.SetField(scauserfollows.FieldFollowerID, field.TypeString, value)
		_node.FollowerID = value
	}
	if value, ok := sufc.mutation.FolloweeID(); ok {
		_spec.SetField(scauserfollows.FieldFolloweeID, field.TypeString, value)
		_node.FolloweeID = value
	}
	if value, ok := sufc.mutation.Status(); ok {
		_spec.SetField(scauserfollows.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	return _node, _spec
}

// ScaUserFollowsCreateBulk is the builder for creating many ScaUserFollows entities in bulk.
type ScaUserFollowsCreateBulk struct {
	config
	err      error
	builders []*ScaUserFollowsCreate
}

// Save creates the ScaUserFollows entities in the database.
func (sufcb *ScaUserFollowsCreateBulk) Save(ctx context.Context) ([]*ScaUserFollows, error) {
	if sufcb.err != nil {
		return nil, sufcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sufcb.builders))
	nodes := make([]*ScaUserFollows, len(sufcb.builders))
	mutators := make([]Mutator, len(sufcb.builders))
	for i := range sufcb.builders {
		func(i int, root context.Context) {
			builder := sufcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScaUserFollowsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sufcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sufcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sufcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sufcb *ScaUserFollowsCreateBulk) SaveX(ctx context.Context) []*ScaUserFollows {
	v, err := sufcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sufcb *ScaUserFollowsCreateBulk) Exec(ctx context.Context) error {
	_, err := sufcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sufcb *ScaUserFollowsCreateBulk) ExecX(ctx context.Context) {
	if err := sufcb.Exec(ctx); err != nil {
		panic(err)
	}
}
