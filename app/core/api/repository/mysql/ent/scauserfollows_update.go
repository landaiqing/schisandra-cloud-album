// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/predicate"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scauserfollows"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScaUserFollowsUpdate is the builder for updating ScaUserFollows entities.
type ScaUserFollowsUpdate struct {
	config
	hooks    []Hook
	mutation *ScaUserFollowsMutation
}

// Where appends a list predicates to the ScaUserFollowsUpdate builder.
func (sufu *ScaUserFollowsUpdate) Where(ps ...predicate.ScaUserFollows) *ScaUserFollowsUpdate {
	sufu.mutation.Where(ps...)
	return sufu
}

// SetFollowerID sets the "follower_id" field.
func (sufu *ScaUserFollowsUpdate) SetFollowerID(s string) *ScaUserFollowsUpdate {
	sufu.mutation.SetFollowerID(s)
	return sufu
}

// SetNillableFollowerID sets the "follower_id" field if the given value is not nil.
func (sufu *ScaUserFollowsUpdate) SetNillableFollowerID(s *string) *ScaUserFollowsUpdate {
	if s != nil {
		sufu.SetFollowerID(*s)
	}
	return sufu
}

// SetFolloweeID sets the "followee_id" field.
func (sufu *ScaUserFollowsUpdate) SetFolloweeID(s string) *ScaUserFollowsUpdate {
	sufu.mutation.SetFolloweeID(s)
	return sufu
}

// SetNillableFolloweeID sets the "followee_id" field if the given value is not nil.
func (sufu *ScaUserFollowsUpdate) SetNillableFolloweeID(s *string) *ScaUserFollowsUpdate {
	if s != nil {
		sufu.SetFolloweeID(*s)
	}
	return sufu
}

// SetStatus sets the "status" field.
func (sufu *ScaUserFollowsUpdate) SetStatus(u uint8) *ScaUserFollowsUpdate {
	sufu.mutation.ResetStatus()
	sufu.mutation.SetStatus(u)
	return sufu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sufu *ScaUserFollowsUpdate) SetNillableStatus(u *uint8) *ScaUserFollowsUpdate {
	if u != nil {
		sufu.SetStatus(*u)
	}
	return sufu
}

// AddStatus adds u to the "status" field.
func (sufu *ScaUserFollowsUpdate) AddStatus(u int8) *ScaUserFollowsUpdate {
	sufu.mutation.AddStatus(u)
	return sufu
}

// Mutation returns the ScaUserFollowsMutation object of the builder.
func (sufu *ScaUserFollowsUpdate) Mutation() *ScaUserFollowsMutation {
	return sufu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sufu *ScaUserFollowsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sufu.sqlSave, sufu.mutation, sufu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sufu *ScaUserFollowsUpdate) SaveX(ctx context.Context) int {
	affected, err := sufu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sufu *ScaUserFollowsUpdate) Exec(ctx context.Context) error {
	_, err := sufu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sufu *ScaUserFollowsUpdate) ExecX(ctx context.Context) {
	if err := sufu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sufu *ScaUserFollowsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(scauserfollows.Table, scauserfollows.Columns, sqlgraph.NewFieldSpec(scauserfollows.FieldID, field.TypeInt))
	if ps := sufu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sufu.mutation.FollowerID(); ok {
		_spec.SetField(scauserfollows.FieldFollowerID, field.TypeString, value)
	}
	if value, ok := sufu.mutation.FolloweeID(); ok {
		_spec.SetField(scauserfollows.FieldFolloweeID, field.TypeString, value)
	}
	if value, ok := sufu.mutation.Status(); ok {
		_spec.SetField(scauserfollows.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := sufu.mutation.AddedStatus(); ok {
		_spec.AddField(scauserfollows.FieldStatus, field.TypeUint8, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sufu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scauserfollows.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sufu.mutation.done = true
	return n, nil
}

// ScaUserFollowsUpdateOne is the builder for updating a single ScaUserFollows entity.
type ScaUserFollowsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScaUserFollowsMutation
}

// SetFollowerID sets the "follower_id" field.
func (sufuo *ScaUserFollowsUpdateOne) SetFollowerID(s string) *ScaUserFollowsUpdateOne {
	sufuo.mutation.SetFollowerID(s)
	return sufuo
}

// SetNillableFollowerID sets the "follower_id" field if the given value is not nil.
func (sufuo *ScaUserFollowsUpdateOne) SetNillableFollowerID(s *string) *ScaUserFollowsUpdateOne {
	if s != nil {
		sufuo.SetFollowerID(*s)
	}
	return sufuo
}

// SetFolloweeID sets the "followee_id" field.
func (sufuo *ScaUserFollowsUpdateOne) SetFolloweeID(s string) *ScaUserFollowsUpdateOne {
	sufuo.mutation.SetFolloweeID(s)
	return sufuo
}

// SetNillableFolloweeID sets the "followee_id" field if the given value is not nil.
func (sufuo *ScaUserFollowsUpdateOne) SetNillableFolloweeID(s *string) *ScaUserFollowsUpdateOne {
	if s != nil {
		sufuo.SetFolloweeID(*s)
	}
	return sufuo
}

// SetStatus sets the "status" field.
func (sufuo *ScaUserFollowsUpdateOne) SetStatus(u uint8) *ScaUserFollowsUpdateOne {
	sufuo.mutation.ResetStatus()
	sufuo.mutation.SetStatus(u)
	return sufuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sufuo *ScaUserFollowsUpdateOne) SetNillableStatus(u *uint8) *ScaUserFollowsUpdateOne {
	if u != nil {
		sufuo.SetStatus(*u)
	}
	return sufuo
}

// AddStatus adds u to the "status" field.
func (sufuo *ScaUserFollowsUpdateOne) AddStatus(u int8) *ScaUserFollowsUpdateOne {
	sufuo.mutation.AddStatus(u)
	return sufuo
}

// Mutation returns the ScaUserFollowsMutation object of the builder.
func (sufuo *ScaUserFollowsUpdateOne) Mutation() *ScaUserFollowsMutation {
	return sufuo.mutation
}

// Where appends a list predicates to the ScaUserFollowsUpdate builder.
func (sufuo *ScaUserFollowsUpdateOne) Where(ps ...predicate.ScaUserFollows) *ScaUserFollowsUpdateOne {
	sufuo.mutation.Where(ps...)
	return sufuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sufuo *ScaUserFollowsUpdateOne) Select(field string, fields ...string) *ScaUserFollowsUpdateOne {
	sufuo.fields = append([]string{field}, fields...)
	return sufuo
}

// Save executes the query and returns the updated ScaUserFollows entity.
func (sufuo *ScaUserFollowsUpdateOne) Save(ctx context.Context) (*ScaUserFollows, error) {
	return withHooks(ctx, sufuo.sqlSave, sufuo.mutation, sufuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sufuo *ScaUserFollowsUpdateOne) SaveX(ctx context.Context) *ScaUserFollows {
	node, err := sufuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sufuo *ScaUserFollowsUpdateOne) Exec(ctx context.Context) error {
	_, err := sufuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sufuo *ScaUserFollowsUpdateOne) ExecX(ctx context.Context) {
	if err := sufuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sufuo *ScaUserFollowsUpdateOne) sqlSave(ctx context.Context) (_node *ScaUserFollows, err error) {
	_spec := sqlgraph.NewUpdateSpec(scauserfollows.Table, scauserfollows.Columns, sqlgraph.NewFieldSpec(scauserfollows.FieldID, field.TypeInt))
	id, ok := sufuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScaUserFollows.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sufuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scauserfollows.FieldID)
		for _, f := range fields {
			if !scauserfollows.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scauserfollows.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sufuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sufuo.mutation.FollowerID(); ok {
		_spec.SetField(scauserfollows.FieldFollowerID, field.TypeString, value)
	}
	if value, ok := sufuo.mutation.FolloweeID(); ok {
		_spec.SetField(scauserfollows.FieldFolloweeID, field.TypeString, value)
	}
	if value, ok := sufuo.mutation.Status(); ok {
		_spec.SetField(scauserfollows.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := sufuo.mutation.AddedStatus(); ok {
		_spec.AddField(scauserfollows.FieldStatus, field.TypeUint8, value)
	}
	_node = &ScaUserFollows{config: sufuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sufuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scauserfollows.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sufuo.mutation.done = true
	return _node, nil
}
