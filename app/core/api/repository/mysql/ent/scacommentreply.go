// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scacommentreply"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 评论回复表
type ScaCommentReply struct {
	config `json:"-"`
	// ID of the ent.
	// 主键id
	ID int64 `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 是否删除 0 未删除 1 已删除
	Deleted int8 `json:"deleted,omitempty"`
	// 评论用户id
	UserID string `json:"user_id,omitempty"`
	// 评论话题id
	TopicID string `json:"topic_id,omitempty"`
	// 话题类型
	TopicType int `json:"topic_type,omitempty"`
	// 评论内容
	Content string `json:"content,omitempty"`
	// 评论类型 0评论 1 回复
	CommentType int `json:"comment_type,omitempty"`
	// 回复子评论ID
	ReplyTo int64 `json:"reply_to,omitempty"`
	// 回复父评论Id
	ReplyID int64 `json:"reply_id,omitempty"`
	// 回复人id
	ReplyUser string `json:"reply_user,omitempty"`
	// 评论回复是否作者  0否 1是
	Author int `json:"author,omitempty"`
	// 点赞数
	Likes int64 `json:"likes,omitempty"`
	// 回复数量
	ReplyCount int64 `json:"reply_count,omitempty"`
	// 浏览器
	Browser string `json:"browser,omitempty"`
	// 操作系统
	OperatingSystem string `json:"operating_system,omitempty"`
	// IP地址
	CommentIP string `json:"comment_ip,omitempty"`
	// 地址
	Location string `json:"location,omitempty"`
	// 设备信息
	Agent        string `json:"agent,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScaCommentReply) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scacommentreply.FieldID, scacommentreply.FieldDeleted, scacommentreply.FieldTopicType, scacommentreply.FieldCommentType, scacommentreply.FieldReplyTo, scacommentreply.FieldReplyID, scacommentreply.FieldAuthor, scacommentreply.FieldLikes, scacommentreply.FieldReplyCount:
			values[i] = new(sql.NullInt64)
		case scacommentreply.FieldUserID, scacommentreply.FieldTopicID, scacommentreply.FieldContent, scacommentreply.FieldReplyUser, scacommentreply.FieldBrowser, scacommentreply.FieldOperatingSystem, scacommentreply.FieldCommentIP, scacommentreply.FieldLocation, scacommentreply.FieldAgent:
			values[i] = new(sql.NullString)
		case scacommentreply.FieldCreatedAt, scacommentreply.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScaCommentReply fields.
func (scr *ScaCommentReply) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scacommentreply.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			scr.ID = int64(value.Int64)
		case scacommentreply.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				scr.CreatedAt = value.Time
			}
		case scacommentreply.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				scr.UpdatedAt = value.Time
			}
		case scacommentreply.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				scr.Deleted = int8(value.Int64)
			}
		case scacommentreply.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				scr.UserID = value.String
			}
		case scacommentreply.FieldTopicID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic_id", values[i])
			} else if value.Valid {
				scr.TopicID = value.String
			}
		case scacommentreply.FieldTopicType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field topic_type", values[i])
			} else if value.Valid {
				scr.TopicType = int(value.Int64)
			}
		case scacommentreply.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				scr.Content = value.String
			}
		case scacommentreply.FieldCommentType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field comment_type", values[i])
			} else if value.Valid {
				scr.CommentType = int(value.Int64)
			}
		case scacommentreply.FieldReplyTo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reply_to", values[i])
			} else if value.Valid {
				scr.ReplyTo = value.Int64
			}
		case scacommentreply.FieldReplyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reply_id", values[i])
			} else if value.Valid {
				scr.ReplyID = value.Int64
			}
		case scacommentreply.FieldReplyUser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reply_user", values[i])
			} else if value.Valid {
				scr.ReplyUser = value.String
			}
		case scacommentreply.FieldAuthor:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				scr.Author = int(value.Int64)
			}
		case scacommentreply.FieldLikes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field likes", values[i])
			} else if value.Valid {
				scr.Likes = value.Int64
			}
		case scacommentreply.FieldReplyCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reply_count", values[i])
			} else if value.Valid {
				scr.ReplyCount = value.Int64
			}
		case scacommentreply.FieldBrowser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field browser", values[i])
			} else if value.Valid {
				scr.Browser = value.String
			}
		case scacommentreply.FieldOperatingSystem:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operating_system", values[i])
			} else if value.Valid {
				scr.OperatingSystem = value.String
			}
		case scacommentreply.FieldCommentIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment_ip", values[i])
			} else if value.Valid {
				scr.CommentIP = value.String
			}
		case scacommentreply.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				scr.Location = value.String
			}
		case scacommentreply.FieldAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agent", values[i])
			} else if value.Valid {
				scr.Agent = value.String
			}
		default:
			scr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScaCommentReply.
// This includes values selected through modifiers, order, etc.
func (scr *ScaCommentReply) Value(name string) (ent.Value, error) {
	return scr.selectValues.Get(name)
}

// Update returns a builder for updating this ScaCommentReply.
// Note that you need to call ScaCommentReply.Unwrap() before calling this method if this ScaCommentReply
// was returned from a transaction, and the transaction was committed or rolled back.
func (scr *ScaCommentReply) Update() *ScaCommentReplyUpdateOne {
	return NewScaCommentReplyClient(scr.config).UpdateOne(scr)
}

// Unwrap unwraps the ScaCommentReply entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (scr *ScaCommentReply) Unwrap() *ScaCommentReply {
	_tx, ok := scr.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScaCommentReply is not a transactional entity")
	}
	scr.config.driver = _tx.drv
	return scr
}

// String implements the fmt.Stringer.
func (scr *ScaCommentReply) String() string {
	var builder strings.Builder
	builder.WriteString("ScaCommentReply(")
	builder.WriteString(fmt.Sprintf("id=%v, ", scr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(scr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(scr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", scr.Deleted))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(scr.UserID)
	builder.WriteString(", ")
	builder.WriteString("topic_id=")
	builder.WriteString(scr.TopicID)
	builder.WriteString(", ")
	builder.WriteString("topic_type=")
	builder.WriteString(fmt.Sprintf("%v", scr.TopicType))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(scr.Content)
	builder.WriteString(", ")
	builder.WriteString("comment_type=")
	builder.WriteString(fmt.Sprintf("%v", scr.CommentType))
	builder.WriteString(", ")
	builder.WriteString("reply_to=")
	builder.WriteString(fmt.Sprintf("%v", scr.ReplyTo))
	builder.WriteString(", ")
	builder.WriteString("reply_id=")
	builder.WriteString(fmt.Sprintf("%v", scr.ReplyID))
	builder.WriteString(", ")
	builder.WriteString("reply_user=")
	builder.WriteString(scr.ReplyUser)
	builder.WriteString(", ")
	builder.WriteString("author=")
	builder.WriteString(fmt.Sprintf("%v", scr.Author))
	builder.WriteString(", ")
	builder.WriteString("likes=")
	builder.WriteString(fmt.Sprintf("%v", scr.Likes))
	builder.WriteString(", ")
	builder.WriteString("reply_count=")
	builder.WriteString(fmt.Sprintf("%v", scr.ReplyCount))
	builder.WriteString(", ")
	builder.WriteString("browser=")
	builder.WriteString(scr.Browser)
	builder.WriteString(", ")
	builder.WriteString("operating_system=")
	builder.WriteString(scr.OperatingSystem)
	builder.WriteString(", ")
	builder.WriteString("comment_ip=")
	builder.WriteString(scr.CommentIP)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(scr.Location)
	builder.WriteString(", ")
	builder.WriteString("agent=")
	builder.WriteString(scr.Agent)
	builder.WriteByte(')')
	return builder.String()
}

// ScaCommentReplies is a parsable slice of ScaCommentReply.
type ScaCommentReplies []*ScaCommentReply
