// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scacommentmessage"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 评论消息表
type ScaCommentMessage struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int64 `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 是否删除 0 未删除 1 已删除
	Deleted int8 `json:"deleted,omitempty"`
	// 话题Id
	TopicID string `json:"topic_id,omitempty"`
	// 来自人
	FromID string `json:"from_id,omitempty"`
	// 送达人
	ToID string `json:"to_id,omitempty"`
	// 消息内容
	Content string `json:"content,omitempty"`
	// 是否已读
	IsRead       int `json:"is_read,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScaCommentMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scacommentmessage.FieldID, scacommentmessage.FieldDeleted, scacommentmessage.FieldIsRead:
			values[i] = new(sql.NullInt64)
		case scacommentmessage.FieldTopicID, scacommentmessage.FieldFromID, scacommentmessage.FieldToID, scacommentmessage.FieldContent:
			values[i] = new(sql.NullString)
		case scacommentmessage.FieldCreatedAt, scacommentmessage.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScaCommentMessage fields.
func (scm *ScaCommentMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scacommentmessage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			scm.ID = int64(value.Int64)
		case scacommentmessage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				scm.CreatedAt = value.Time
			}
		case scacommentmessage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				scm.UpdatedAt = value.Time
			}
		case scacommentmessage.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				scm.Deleted = int8(value.Int64)
			}
		case scacommentmessage.FieldTopicID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic_id", values[i])
			} else if value.Valid {
				scm.TopicID = value.String
			}
		case scacommentmessage.FieldFromID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from_id", values[i])
			} else if value.Valid {
				scm.FromID = value.String
			}
		case scacommentmessage.FieldToID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to_id", values[i])
			} else if value.Valid {
				scm.ToID = value.String
			}
		case scacommentmessage.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				scm.Content = value.String
			}
		case scacommentmessage.FieldIsRead:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_read", values[i])
			} else if value.Valid {
				scm.IsRead = int(value.Int64)
			}
		default:
			scm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScaCommentMessage.
// This includes values selected through modifiers, order, etc.
func (scm *ScaCommentMessage) Value(name string) (ent.Value, error) {
	return scm.selectValues.Get(name)
}

// Update returns a builder for updating this ScaCommentMessage.
// Note that you need to call ScaCommentMessage.Unwrap() before calling this method if this ScaCommentMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (scm *ScaCommentMessage) Update() *ScaCommentMessageUpdateOne {
	return NewScaCommentMessageClient(scm.config).UpdateOne(scm)
}

// Unwrap unwraps the ScaCommentMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (scm *ScaCommentMessage) Unwrap() *ScaCommentMessage {
	_tx, ok := scm.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScaCommentMessage is not a transactional entity")
	}
	scm.config.driver = _tx.drv
	return scm
}

// String implements the fmt.Stringer.
func (scm *ScaCommentMessage) String() string {
	var builder strings.Builder
	builder.WriteString("ScaCommentMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", scm.ID))
	builder.WriteString("created_at=")
	builder.WriteString(scm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(scm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", scm.Deleted))
	builder.WriteString(", ")
	builder.WriteString("topic_id=")
	builder.WriteString(scm.TopicID)
	builder.WriteString(", ")
	builder.WriteString("from_id=")
	builder.WriteString(scm.FromID)
	builder.WriteString(", ")
	builder.WriteString("to_id=")
	builder.WriteString(scm.ToID)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(scm.Content)
	builder.WriteString(", ")
	builder.WriteString("is_read=")
	builder.WriteString(fmt.Sprintf("%v", scm.IsRead))
	builder.WriteByte(')')
	return builder.String()
}

// ScaCommentMessages is a parsable slice of ScaCommentMessage.
type ScaCommentMessages []*ScaCommentMessage
