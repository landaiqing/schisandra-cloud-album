// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/predicate"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scacommentreply"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScaCommentReplyUpdate is the builder for updating ScaCommentReply entities.
type ScaCommentReplyUpdate struct {
	config
	hooks    []Hook
	mutation *ScaCommentReplyMutation
}

// Where appends a list predicates to the ScaCommentReplyUpdate builder.
func (scru *ScaCommentReplyUpdate) Where(ps ...predicate.ScaCommentReply) *ScaCommentReplyUpdate {
	scru.mutation.Where(ps...)
	return scru
}

// SetUpdatedAt sets the "updated_at" field.
func (scru *ScaCommentReplyUpdate) SetUpdatedAt(t time.Time) *ScaCommentReplyUpdate {
	scru.mutation.SetUpdatedAt(t)
	return scru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (scru *ScaCommentReplyUpdate) ClearUpdatedAt() *ScaCommentReplyUpdate {
	scru.mutation.ClearUpdatedAt()
	return scru
}

// SetDeleted sets the "deleted" field.
func (scru *ScaCommentReplyUpdate) SetDeleted(i int8) *ScaCommentReplyUpdate {
	scru.mutation.ResetDeleted()
	scru.mutation.SetDeleted(i)
	return scru
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (scru *ScaCommentReplyUpdate) SetNillableDeleted(i *int8) *ScaCommentReplyUpdate {
	if i != nil {
		scru.SetDeleted(*i)
	}
	return scru
}

// AddDeleted adds i to the "deleted" field.
func (scru *ScaCommentReplyUpdate) AddDeleted(i int8) *ScaCommentReplyUpdate {
	scru.mutation.AddDeleted(i)
	return scru
}

// SetUserID sets the "user_id" field.
func (scru *ScaCommentReplyUpdate) SetUserID(s string) *ScaCommentReplyUpdate {
	scru.mutation.SetUserID(s)
	return scru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (scru *ScaCommentReplyUpdate) SetNillableUserID(s *string) *ScaCommentReplyUpdate {
	if s != nil {
		scru.SetUserID(*s)
	}
	return scru
}

// SetTopicID sets the "topic_id" field.
func (scru *ScaCommentReplyUpdate) SetTopicID(s string) *ScaCommentReplyUpdate {
	scru.mutation.SetTopicID(s)
	return scru
}

// SetNillableTopicID sets the "topic_id" field if the given value is not nil.
func (scru *ScaCommentReplyUpdate) SetNillableTopicID(s *string) *ScaCommentReplyUpdate {
	if s != nil {
		scru.SetTopicID(*s)
	}
	return scru
}

// SetTopicType sets the "topic_type" field.
func (scru *ScaCommentReplyUpdate) SetTopicType(i int) *ScaCommentReplyUpdate {
	scru.mutation.ResetTopicType()
	scru.mutation.SetTopicType(i)
	return scru
}

// SetNillableTopicType sets the "topic_type" field if the given value is not nil.
func (scru *ScaCommentReplyUpdate) SetNillableTopicType(i *int) *ScaCommentReplyUpdate {
	if i != nil {
		scru.SetTopicType(*i)
	}
	return scru
}

// AddTopicType adds i to the "topic_type" field.
func (scru *ScaCommentReplyUpdate) AddTopicType(i int) *ScaCommentReplyUpdate {
	scru.mutation.AddTopicType(i)
	return scru
}

// SetContent sets the "content" field.
func (scru *ScaCommentReplyUpdate) SetContent(s string) *ScaCommentReplyUpdate {
	scru.mutation.SetContent(s)
	return scru
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (scru *ScaCommentReplyUpdate) SetNillableContent(s *string) *ScaCommentReplyUpdate {
	if s != nil {
		scru.SetContent(*s)
	}
	return scru
}

// SetCommentType sets the "comment_type" field.
func (scru *ScaCommentReplyUpdate) SetCommentType(i int) *ScaCommentReplyUpdate {
	scru.mutation.ResetCommentType()
	scru.mutation.SetCommentType(i)
	return scru
}

// SetNillableCommentType sets the "comment_type" field if the given value is not nil.
func (scru *ScaCommentReplyUpdate) SetNillableCommentType(i *int) *ScaCommentReplyUpdate {
	if i != nil {
		scru.SetCommentType(*i)
	}
	return scru
}

// AddCommentType adds i to the "comment_type" field.
func (scru *ScaCommentReplyUpdate) AddCommentType(i int) *ScaCommentReplyUpdate {
	scru.mutation.AddCommentType(i)
	return scru
}

// SetReplyTo sets the "reply_to" field.
func (scru *ScaCommentReplyUpdate) SetReplyTo(i int64) *ScaCommentReplyUpdate {
	scru.mutation.ResetReplyTo()
	scru.mutation.SetReplyTo(i)
	return scru
}

// SetNillableReplyTo sets the "reply_to" field if the given value is not nil.
func (scru *ScaCommentReplyUpdate) SetNillableReplyTo(i *int64) *ScaCommentReplyUpdate {
	if i != nil {
		scru.SetReplyTo(*i)
	}
	return scru
}

// AddReplyTo adds i to the "reply_to" field.
func (scru *ScaCommentReplyUpdate) AddReplyTo(i int64) *ScaCommentReplyUpdate {
	scru.mutation.AddReplyTo(i)
	return scru
}

// ClearReplyTo clears the value of the "reply_to" field.
func (scru *ScaCommentReplyUpdate) ClearReplyTo() *ScaCommentReplyUpdate {
	scru.mutation.ClearReplyTo()
	return scru
}

// SetReplyID sets the "reply_id" field.
func (scru *ScaCommentReplyUpdate) SetReplyID(i int64) *ScaCommentReplyUpdate {
	scru.mutation.ResetReplyID()
	scru.mutation.SetReplyID(i)
	return scru
}

// SetNillableReplyID sets the "reply_id" field if the given value is not nil.
func (scru *ScaCommentReplyUpdate) SetNillableReplyID(i *int64) *ScaCommentReplyUpdate {
	if i != nil {
		scru.SetReplyID(*i)
	}
	return scru
}

// AddReplyID adds i to the "reply_id" field.
func (scru *ScaCommentReplyUpdate) AddReplyID(i int64) *ScaCommentReplyUpdate {
	scru.mutation.AddReplyID(i)
	return scru
}

// ClearReplyID clears the value of the "reply_id" field.
func (scru *ScaCommentReplyUpdate) ClearReplyID() *ScaCommentReplyUpdate {
	scru.mutation.ClearReplyID()
	return scru
}

// SetReplyUser sets the "reply_user" field.
func (scru *ScaCommentReplyUpdate) SetReplyUser(s string) *ScaCommentReplyUpdate {
	scru.mutation.SetReplyUser(s)
	return scru
}

// SetNillableReplyUser sets the "reply_user" field if the given value is not nil.
func (scru *ScaCommentReplyUpdate) SetNillableReplyUser(s *string) *ScaCommentReplyUpdate {
	if s != nil {
		scru.SetReplyUser(*s)
	}
	return scru
}

// ClearReplyUser clears the value of the "reply_user" field.
func (scru *ScaCommentReplyUpdate) ClearReplyUser() *ScaCommentReplyUpdate {
	scru.mutation.ClearReplyUser()
	return scru
}

// SetAuthor sets the "author" field.
func (scru *ScaCommentReplyUpdate) SetAuthor(i int) *ScaCommentReplyUpdate {
	scru.mutation.ResetAuthor()
	scru.mutation.SetAuthor(i)
	return scru
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (scru *ScaCommentReplyUpdate) SetNillableAuthor(i *int) *ScaCommentReplyUpdate {
	if i != nil {
		scru.SetAuthor(*i)
	}
	return scru
}

// AddAuthor adds i to the "author" field.
func (scru *ScaCommentReplyUpdate) AddAuthor(i int) *ScaCommentReplyUpdate {
	scru.mutation.AddAuthor(i)
	return scru
}

// SetLikes sets the "likes" field.
func (scru *ScaCommentReplyUpdate) SetLikes(i int64) *ScaCommentReplyUpdate {
	scru.mutation.ResetLikes()
	scru.mutation.SetLikes(i)
	return scru
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (scru *ScaCommentReplyUpdate) SetNillableLikes(i *int64) *ScaCommentReplyUpdate {
	if i != nil {
		scru.SetLikes(*i)
	}
	return scru
}

// AddLikes adds i to the "likes" field.
func (scru *ScaCommentReplyUpdate) AddLikes(i int64) *ScaCommentReplyUpdate {
	scru.mutation.AddLikes(i)
	return scru
}

// ClearLikes clears the value of the "likes" field.
func (scru *ScaCommentReplyUpdate) ClearLikes() *ScaCommentReplyUpdate {
	scru.mutation.ClearLikes()
	return scru
}

// SetReplyCount sets the "reply_count" field.
func (scru *ScaCommentReplyUpdate) SetReplyCount(i int64) *ScaCommentReplyUpdate {
	scru.mutation.ResetReplyCount()
	scru.mutation.SetReplyCount(i)
	return scru
}

// SetNillableReplyCount sets the "reply_count" field if the given value is not nil.
func (scru *ScaCommentReplyUpdate) SetNillableReplyCount(i *int64) *ScaCommentReplyUpdate {
	if i != nil {
		scru.SetReplyCount(*i)
	}
	return scru
}

// AddReplyCount adds i to the "reply_count" field.
func (scru *ScaCommentReplyUpdate) AddReplyCount(i int64) *ScaCommentReplyUpdate {
	scru.mutation.AddReplyCount(i)
	return scru
}

// ClearReplyCount clears the value of the "reply_count" field.
func (scru *ScaCommentReplyUpdate) ClearReplyCount() *ScaCommentReplyUpdate {
	scru.mutation.ClearReplyCount()
	return scru
}

// SetBrowser sets the "browser" field.
func (scru *ScaCommentReplyUpdate) SetBrowser(s string) *ScaCommentReplyUpdate {
	scru.mutation.SetBrowser(s)
	return scru
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (scru *ScaCommentReplyUpdate) SetNillableBrowser(s *string) *ScaCommentReplyUpdate {
	if s != nil {
		scru.SetBrowser(*s)
	}
	return scru
}

// SetOperatingSystem sets the "operating_system" field.
func (scru *ScaCommentReplyUpdate) SetOperatingSystem(s string) *ScaCommentReplyUpdate {
	scru.mutation.SetOperatingSystem(s)
	return scru
}

// SetNillableOperatingSystem sets the "operating_system" field if the given value is not nil.
func (scru *ScaCommentReplyUpdate) SetNillableOperatingSystem(s *string) *ScaCommentReplyUpdate {
	if s != nil {
		scru.SetOperatingSystem(*s)
	}
	return scru
}

// SetCommentIP sets the "comment_ip" field.
func (scru *ScaCommentReplyUpdate) SetCommentIP(s string) *ScaCommentReplyUpdate {
	scru.mutation.SetCommentIP(s)
	return scru
}

// SetNillableCommentIP sets the "comment_ip" field if the given value is not nil.
func (scru *ScaCommentReplyUpdate) SetNillableCommentIP(s *string) *ScaCommentReplyUpdate {
	if s != nil {
		scru.SetCommentIP(*s)
	}
	return scru
}

// SetLocation sets the "location" field.
func (scru *ScaCommentReplyUpdate) SetLocation(s string) *ScaCommentReplyUpdate {
	scru.mutation.SetLocation(s)
	return scru
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (scru *ScaCommentReplyUpdate) SetNillableLocation(s *string) *ScaCommentReplyUpdate {
	if s != nil {
		scru.SetLocation(*s)
	}
	return scru
}

// SetAgent sets the "agent" field.
func (scru *ScaCommentReplyUpdate) SetAgent(s string) *ScaCommentReplyUpdate {
	scru.mutation.SetAgent(s)
	return scru
}

// SetNillableAgent sets the "agent" field if the given value is not nil.
func (scru *ScaCommentReplyUpdate) SetNillableAgent(s *string) *ScaCommentReplyUpdate {
	if s != nil {
		scru.SetAgent(*s)
	}
	return scru
}

// Mutation returns the ScaCommentReplyMutation object of the builder.
func (scru *ScaCommentReplyUpdate) Mutation() *ScaCommentReplyMutation {
	return scru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scru *ScaCommentReplyUpdate) Save(ctx context.Context) (int, error) {
	scru.defaults()
	return withHooks(ctx, scru.sqlSave, scru.mutation, scru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scru *ScaCommentReplyUpdate) SaveX(ctx context.Context) int {
	affected, err := scru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scru *ScaCommentReplyUpdate) Exec(ctx context.Context) error {
	_, err := scru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scru *ScaCommentReplyUpdate) ExecX(ctx context.Context) {
	if err := scru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scru *ScaCommentReplyUpdate) defaults() {
	if _, ok := scru.mutation.UpdatedAt(); !ok && !scru.mutation.UpdatedAtCleared() {
		v := scacommentreply.UpdateDefaultUpdatedAt()
		scru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scru *ScaCommentReplyUpdate) check() error {
	if v, ok := scru.mutation.Deleted(); ok {
		if err := scacommentreply.DeletedValidator(v); err != nil {
			return &ValidationError{Name: "deleted", err: fmt.Errorf(`ent: validator failed for field "ScaCommentReply.deleted": %w`, err)}
		}
	}
	if v, ok := scru.mutation.Agent(); ok {
		if err := scacommentreply.AgentValidator(v); err != nil {
			return &ValidationError{Name: "agent", err: fmt.Errorf(`ent: validator failed for field "ScaCommentReply.agent": %w`, err)}
		}
	}
	return nil
}

func (scru *ScaCommentReplyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(scacommentreply.Table, scacommentreply.Columns, sqlgraph.NewFieldSpec(scacommentreply.FieldID, field.TypeInt64))
	if ps := scru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scru.mutation.UpdatedAt(); ok {
		_spec.SetField(scacommentreply.FieldUpdatedAt, field.TypeTime, value)
	}
	if scru.mutation.UpdatedAtCleared() {
		_spec.ClearField(scacommentreply.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := scru.mutation.Deleted(); ok {
		_spec.SetField(scacommentreply.FieldDeleted, field.TypeInt8, value)
	}
	if value, ok := scru.mutation.AddedDeleted(); ok {
		_spec.AddField(scacommentreply.FieldDeleted, field.TypeInt8, value)
	}
	if value, ok := scru.mutation.UserID(); ok {
		_spec.SetField(scacommentreply.FieldUserID, field.TypeString, value)
	}
	if value, ok := scru.mutation.TopicID(); ok {
		_spec.SetField(scacommentreply.FieldTopicID, field.TypeString, value)
	}
	if value, ok := scru.mutation.TopicType(); ok {
		_spec.SetField(scacommentreply.FieldTopicType, field.TypeInt, value)
	}
	if value, ok := scru.mutation.AddedTopicType(); ok {
		_spec.AddField(scacommentreply.FieldTopicType, field.TypeInt, value)
	}
	if value, ok := scru.mutation.Content(); ok {
		_spec.SetField(scacommentreply.FieldContent, field.TypeString, value)
	}
	if value, ok := scru.mutation.CommentType(); ok {
		_spec.SetField(scacommentreply.FieldCommentType, field.TypeInt, value)
	}
	if value, ok := scru.mutation.AddedCommentType(); ok {
		_spec.AddField(scacommentreply.FieldCommentType, field.TypeInt, value)
	}
	if value, ok := scru.mutation.ReplyTo(); ok {
		_spec.SetField(scacommentreply.FieldReplyTo, field.TypeInt64, value)
	}
	if value, ok := scru.mutation.AddedReplyTo(); ok {
		_spec.AddField(scacommentreply.FieldReplyTo, field.TypeInt64, value)
	}
	if scru.mutation.ReplyToCleared() {
		_spec.ClearField(scacommentreply.FieldReplyTo, field.TypeInt64)
	}
	if value, ok := scru.mutation.ReplyID(); ok {
		_spec.SetField(scacommentreply.FieldReplyID, field.TypeInt64, value)
	}
	if value, ok := scru.mutation.AddedReplyID(); ok {
		_spec.AddField(scacommentreply.FieldReplyID, field.TypeInt64, value)
	}
	if scru.mutation.ReplyIDCleared() {
		_spec.ClearField(scacommentreply.FieldReplyID, field.TypeInt64)
	}
	if value, ok := scru.mutation.ReplyUser(); ok {
		_spec.SetField(scacommentreply.FieldReplyUser, field.TypeString, value)
	}
	if scru.mutation.ReplyUserCleared() {
		_spec.ClearField(scacommentreply.FieldReplyUser, field.TypeString)
	}
	if value, ok := scru.mutation.Author(); ok {
		_spec.SetField(scacommentreply.FieldAuthor, field.TypeInt, value)
	}
	if value, ok := scru.mutation.AddedAuthor(); ok {
		_spec.AddField(scacommentreply.FieldAuthor, field.TypeInt, value)
	}
	if value, ok := scru.mutation.Likes(); ok {
		_spec.SetField(scacommentreply.FieldLikes, field.TypeInt64, value)
	}
	if value, ok := scru.mutation.AddedLikes(); ok {
		_spec.AddField(scacommentreply.FieldLikes, field.TypeInt64, value)
	}
	if scru.mutation.LikesCleared() {
		_spec.ClearField(scacommentreply.FieldLikes, field.TypeInt64)
	}
	if value, ok := scru.mutation.ReplyCount(); ok {
		_spec.SetField(scacommentreply.FieldReplyCount, field.TypeInt64, value)
	}
	if value, ok := scru.mutation.AddedReplyCount(); ok {
		_spec.AddField(scacommentreply.FieldReplyCount, field.TypeInt64, value)
	}
	if scru.mutation.ReplyCountCleared() {
		_spec.ClearField(scacommentreply.FieldReplyCount, field.TypeInt64)
	}
	if value, ok := scru.mutation.Browser(); ok {
		_spec.SetField(scacommentreply.FieldBrowser, field.TypeString, value)
	}
	if value, ok := scru.mutation.OperatingSystem(); ok {
		_spec.SetField(scacommentreply.FieldOperatingSystem, field.TypeString, value)
	}
	if value, ok := scru.mutation.CommentIP(); ok {
		_spec.SetField(scacommentreply.FieldCommentIP, field.TypeString, value)
	}
	if value, ok := scru.mutation.Location(); ok {
		_spec.SetField(scacommentreply.FieldLocation, field.TypeString, value)
	}
	if value, ok := scru.mutation.Agent(); ok {
		_spec.SetField(scacommentreply.FieldAgent, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scacommentreply.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scru.mutation.done = true
	return n, nil
}

// ScaCommentReplyUpdateOne is the builder for updating a single ScaCommentReply entity.
type ScaCommentReplyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScaCommentReplyMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (scruo *ScaCommentReplyUpdateOne) SetUpdatedAt(t time.Time) *ScaCommentReplyUpdateOne {
	scruo.mutation.SetUpdatedAt(t)
	return scruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (scruo *ScaCommentReplyUpdateOne) ClearUpdatedAt() *ScaCommentReplyUpdateOne {
	scruo.mutation.ClearUpdatedAt()
	return scruo
}

// SetDeleted sets the "deleted" field.
func (scruo *ScaCommentReplyUpdateOne) SetDeleted(i int8) *ScaCommentReplyUpdateOne {
	scruo.mutation.ResetDeleted()
	scruo.mutation.SetDeleted(i)
	return scruo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (scruo *ScaCommentReplyUpdateOne) SetNillableDeleted(i *int8) *ScaCommentReplyUpdateOne {
	if i != nil {
		scruo.SetDeleted(*i)
	}
	return scruo
}

// AddDeleted adds i to the "deleted" field.
func (scruo *ScaCommentReplyUpdateOne) AddDeleted(i int8) *ScaCommentReplyUpdateOne {
	scruo.mutation.AddDeleted(i)
	return scruo
}

// SetUserID sets the "user_id" field.
func (scruo *ScaCommentReplyUpdateOne) SetUserID(s string) *ScaCommentReplyUpdateOne {
	scruo.mutation.SetUserID(s)
	return scruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (scruo *ScaCommentReplyUpdateOne) SetNillableUserID(s *string) *ScaCommentReplyUpdateOne {
	if s != nil {
		scruo.SetUserID(*s)
	}
	return scruo
}

// SetTopicID sets the "topic_id" field.
func (scruo *ScaCommentReplyUpdateOne) SetTopicID(s string) *ScaCommentReplyUpdateOne {
	scruo.mutation.SetTopicID(s)
	return scruo
}

// SetNillableTopicID sets the "topic_id" field if the given value is not nil.
func (scruo *ScaCommentReplyUpdateOne) SetNillableTopicID(s *string) *ScaCommentReplyUpdateOne {
	if s != nil {
		scruo.SetTopicID(*s)
	}
	return scruo
}

// SetTopicType sets the "topic_type" field.
func (scruo *ScaCommentReplyUpdateOne) SetTopicType(i int) *ScaCommentReplyUpdateOne {
	scruo.mutation.ResetTopicType()
	scruo.mutation.SetTopicType(i)
	return scruo
}

// SetNillableTopicType sets the "topic_type" field if the given value is not nil.
func (scruo *ScaCommentReplyUpdateOne) SetNillableTopicType(i *int) *ScaCommentReplyUpdateOne {
	if i != nil {
		scruo.SetTopicType(*i)
	}
	return scruo
}

// AddTopicType adds i to the "topic_type" field.
func (scruo *ScaCommentReplyUpdateOne) AddTopicType(i int) *ScaCommentReplyUpdateOne {
	scruo.mutation.AddTopicType(i)
	return scruo
}

// SetContent sets the "content" field.
func (scruo *ScaCommentReplyUpdateOne) SetContent(s string) *ScaCommentReplyUpdateOne {
	scruo.mutation.SetContent(s)
	return scruo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (scruo *ScaCommentReplyUpdateOne) SetNillableContent(s *string) *ScaCommentReplyUpdateOne {
	if s != nil {
		scruo.SetContent(*s)
	}
	return scruo
}

// SetCommentType sets the "comment_type" field.
func (scruo *ScaCommentReplyUpdateOne) SetCommentType(i int) *ScaCommentReplyUpdateOne {
	scruo.mutation.ResetCommentType()
	scruo.mutation.SetCommentType(i)
	return scruo
}

// SetNillableCommentType sets the "comment_type" field if the given value is not nil.
func (scruo *ScaCommentReplyUpdateOne) SetNillableCommentType(i *int) *ScaCommentReplyUpdateOne {
	if i != nil {
		scruo.SetCommentType(*i)
	}
	return scruo
}

// AddCommentType adds i to the "comment_type" field.
func (scruo *ScaCommentReplyUpdateOne) AddCommentType(i int) *ScaCommentReplyUpdateOne {
	scruo.mutation.AddCommentType(i)
	return scruo
}

// SetReplyTo sets the "reply_to" field.
func (scruo *ScaCommentReplyUpdateOne) SetReplyTo(i int64) *ScaCommentReplyUpdateOne {
	scruo.mutation.ResetReplyTo()
	scruo.mutation.SetReplyTo(i)
	return scruo
}

// SetNillableReplyTo sets the "reply_to" field if the given value is not nil.
func (scruo *ScaCommentReplyUpdateOne) SetNillableReplyTo(i *int64) *ScaCommentReplyUpdateOne {
	if i != nil {
		scruo.SetReplyTo(*i)
	}
	return scruo
}

// AddReplyTo adds i to the "reply_to" field.
func (scruo *ScaCommentReplyUpdateOne) AddReplyTo(i int64) *ScaCommentReplyUpdateOne {
	scruo.mutation.AddReplyTo(i)
	return scruo
}

// ClearReplyTo clears the value of the "reply_to" field.
func (scruo *ScaCommentReplyUpdateOne) ClearReplyTo() *ScaCommentReplyUpdateOne {
	scruo.mutation.ClearReplyTo()
	return scruo
}

// SetReplyID sets the "reply_id" field.
func (scruo *ScaCommentReplyUpdateOne) SetReplyID(i int64) *ScaCommentReplyUpdateOne {
	scruo.mutation.ResetReplyID()
	scruo.mutation.SetReplyID(i)
	return scruo
}

// SetNillableReplyID sets the "reply_id" field if the given value is not nil.
func (scruo *ScaCommentReplyUpdateOne) SetNillableReplyID(i *int64) *ScaCommentReplyUpdateOne {
	if i != nil {
		scruo.SetReplyID(*i)
	}
	return scruo
}

// AddReplyID adds i to the "reply_id" field.
func (scruo *ScaCommentReplyUpdateOne) AddReplyID(i int64) *ScaCommentReplyUpdateOne {
	scruo.mutation.AddReplyID(i)
	return scruo
}

// ClearReplyID clears the value of the "reply_id" field.
func (scruo *ScaCommentReplyUpdateOne) ClearReplyID() *ScaCommentReplyUpdateOne {
	scruo.mutation.ClearReplyID()
	return scruo
}

// SetReplyUser sets the "reply_user" field.
func (scruo *ScaCommentReplyUpdateOne) SetReplyUser(s string) *ScaCommentReplyUpdateOne {
	scruo.mutation.SetReplyUser(s)
	return scruo
}

// SetNillableReplyUser sets the "reply_user" field if the given value is not nil.
func (scruo *ScaCommentReplyUpdateOne) SetNillableReplyUser(s *string) *ScaCommentReplyUpdateOne {
	if s != nil {
		scruo.SetReplyUser(*s)
	}
	return scruo
}

// ClearReplyUser clears the value of the "reply_user" field.
func (scruo *ScaCommentReplyUpdateOne) ClearReplyUser() *ScaCommentReplyUpdateOne {
	scruo.mutation.ClearReplyUser()
	return scruo
}

// SetAuthor sets the "author" field.
func (scruo *ScaCommentReplyUpdateOne) SetAuthor(i int) *ScaCommentReplyUpdateOne {
	scruo.mutation.ResetAuthor()
	scruo.mutation.SetAuthor(i)
	return scruo
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (scruo *ScaCommentReplyUpdateOne) SetNillableAuthor(i *int) *ScaCommentReplyUpdateOne {
	if i != nil {
		scruo.SetAuthor(*i)
	}
	return scruo
}

// AddAuthor adds i to the "author" field.
func (scruo *ScaCommentReplyUpdateOne) AddAuthor(i int) *ScaCommentReplyUpdateOne {
	scruo.mutation.AddAuthor(i)
	return scruo
}

// SetLikes sets the "likes" field.
func (scruo *ScaCommentReplyUpdateOne) SetLikes(i int64) *ScaCommentReplyUpdateOne {
	scruo.mutation.ResetLikes()
	scruo.mutation.SetLikes(i)
	return scruo
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (scruo *ScaCommentReplyUpdateOne) SetNillableLikes(i *int64) *ScaCommentReplyUpdateOne {
	if i != nil {
		scruo.SetLikes(*i)
	}
	return scruo
}

// AddLikes adds i to the "likes" field.
func (scruo *ScaCommentReplyUpdateOne) AddLikes(i int64) *ScaCommentReplyUpdateOne {
	scruo.mutation.AddLikes(i)
	return scruo
}

// ClearLikes clears the value of the "likes" field.
func (scruo *ScaCommentReplyUpdateOne) ClearLikes() *ScaCommentReplyUpdateOne {
	scruo.mutation.ClearLikes()
	return scruo
}

// SetReplyCount sets the "reply_count" field.
func (scruo *ScaCommentReplyUpdateOne) SetReplyCount(i int64) *ScaCommentReplyUpdateOne {
	scruo.mutation.ResetReplyCount()
	scruo.mutation.SetReplyCount(i)
	return scruo
}

// SetNillableReplyCount sets the "reply_count" field if the given value is not nil.
func (scruo *ScaCommentReplyUpdateOne) SetNillableReplyCount(i *int64) *ScaCommentReplyUpdateOne {
	if i != nil {
		scruo.SetReplyCount(*i)
	}
	return scruo
}

// AddReplyCount adds i to the "reply_count" field.
func (scruo *ScaCommentReplyUpdateOne) AddReplyCount(i int64) *ScaCommentReplyUpdateOne {
	scruo.mutation.AddReplyCount(i)
	return scruo
}

// ClearReplyCount clears the value of the "reply_count" field.
func (scruo *ScaCommentReplyUpdateOne) ClearReplyCount() *ScaCommentReplyUpdateOne {
	scruo.mutation.ClearReplyCount()
	return scruo
}

// SetBrowser sets the "browser" field.
func (scruo *ScaCommentReplyUpdateOne) SetBrowser(s string) *ScaCommentReplyUpdateOne {
	scruo.mutation.SetBrowser(s)
	return scruo
}

// SetNillableBrowser sets the "browser" field if the given value is not nil.
func (scruo *ScaCommentReplyUpdateOne) SetNillableBrowser(s *string) *ScaCommentReplyUpdateOne {
	if s != nil {
		scruo.SetBrowser(*s)
	}
	return scruo
}

// SetOperatingSystem sets the "operating_system" field.
func (scruo *ScaCommentReplyUpdateOne) SetOperatingSystem(s string) *ScaCommentReplyUpdateOne {
	scruo.mutation.SetOperatingSystem(s)
	return scruo
}

// SetNillableOperatingSystem sets the "operating_system" field if the given value is not nil.
func (scruo *ScaCommentReplyUpdateOne) SetNillableOperatingSystem(s *string) *ScaCommentReplyUpdateOne {
	if s != nil {
		scruo.SetOperatingSystem(*s)
	}
	return scruo
}

// SetCommentIP sets the "comment_ip" field.
func (scruo *ScaCommentReplyUpdateOne) SetCommentIP(s string) *ScaCommentReplyUpdateOne {
	scruo.mutation.SetCommentIP(s)
	return scruo
}

// SetNillableCommentIP sets the "comment_ip" field if the given value is not nil.
func (scruo *ScaCommentReplyUpdateOne) SetNillableCommentIP(s *string) *ScaCommentReplyUpdateOne {
	if s != nil {
		scruo.SetCommentIP(*s)
	}
	return scruo
}

// SetLocation sets the "location" field.
func (scruo *ScaCommentReplyUpdateOne) SetLocation(s string) *ScaCommentReplyUpdateOne {
	scruo.mutation.SetLocation(s)
	return scruo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (scruo *ScaCommentReplyUpdateOne) SetNillableLocation(s *string) *ScaCommentReplyUpdateOne {
	if s != nil {
		scruo.SetLocation(*s)
	}
	return scruo
}

// SetAgent sets the "agent" field.
func (scruo *ScaCommentReplyUpdateOne) SetAgent(s string) *ScaCommentReplyUpdateOne {
	scruo.mutation.SetAgent(s)
	return scruo
}

// SetNillableAgent sets the "agent" field if the given value is not nil.
func (scruo *ScaCommentReplyUpdateOne) SetNillableAgent(s *string) *ScaCommentReplyUpdateOne {
	if s != nil {
		scruo.SetAgent(*s)
	}
	return scruo
}

// Mutation returns the ScaCommentReplyMutation object of the builder.
func (scruo *ScaCommentReplyUpdateOne) Mutation() *ScaCommentReplyMutation {
	return scruo.mutation
}

// Where appends a list predicates to the ScaCommentReplyUpdate builder.
func (scruo *ScaCommentReplyUpdateOne) Where(ps ...predicate.ScaCommentReply) *ScaCommentReplyUpdateOne {
	scruo.mutation.Where(ps...)
	return scruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scruo *ScaCommentReplyUpdateOne) Select(field string, fields ...string) *ScaCommentReplyUpdateOne {
	scruo.fields = append([]string{field}, fields...)
	return scruo
}

// Save executes the query and returns the updated ScaCommentReply entity.
func (scruo *ScaCommentReplyUpdateOne) Save(ctx context.Context) (*ScaCommentReply, error) {
	scruo.defaults()
	return withHooks(ctx, scruo.sqlSave, scruo.mutation, scruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scruo *ScaCommentReplyUpdateOne) SaveX(ctx context.Context) *ScaCommentReply {
	node, err := scruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scruo *ScaCommentReplyUpdateOne) Exec(ctx context.Context) error {
	_, err := scruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scruo *ScaCommentReplyUpdateOne) ExecX(ctx context.Context) {
	if err := scruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scruo *ScaCommentReplyUpdateOne) defaults() {
	if _, ok := scruo.mutation.UpdatedAt(); !ok && !scruo.mutation.UpdatedAtCleared() {
		v := scacommentreply.UpdateDefaultUpdatedAt()
		scruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scruo *ScaCommentReplyUpdateOne) check() error {
	if v, ok := scruo.mutation.Deleted(); ok {
		if err := scacommentreply.DeletedValidator(v); err != nil {
			return &ValidationError{Name: "deleted", err: fmt.Errorf(`ent: validator failed for field "ScaCommentReply.deleted": %w`, err)}
		}
	}
	if v, ok := scruo.mutation.Agent(); ok {
		if err := scacommentreply.AgentValidator(v); err != nil {
			return &ValidationError{Name: "agent", err: fmt.Errorf(`ent: validator failed for field "ScaCommentReply.agent": %w`, err)}
		}
	}
	return nil
}

func (scruo *ScaCommentReplyUpdateOne) sqlSave(ctx context.Context) (_node *ScaCommentReply, err error) {
	if err := scruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scacommentreply.Table, scacommentreply.Columns, sqlgraph.NewFieldSpec(scacommentreply.FieldID, field.TypeInt64))
	id, ok := scruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScaCommentReply.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scacommentreply.FieldID)
		for _, f := range fields {
			if !scacommentreply.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scacommentreply.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scruo.mutation.UpdatedAt(); ok {
		_spec.SetField(scacommentreply.FieldUpdatedAt, field.TypeTime, value)
	}
	if scruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(scacommentreply.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := scruo.mutation.Deleted(); ok {
		_spec.SetField(scacommentreply.FieldDeleted, field.TypeInt8, value)
	}
	if value, ok := scruo.mutation.AddedDeleted(); ok {
		_spec.AddField(scacommentreply.FieldDeleted, field.TypeInt8, value)
	}
	if value, ok := scruo.mutation.UserID(); ok {
		_spec.SetField(scacommentreply.FieldUserID, field.TypeString, value)
	}
	if value, ok := scruo.mutation.TopicID(); ok {
		_spec.SetField(scacommentreply.FieldTopicID, field.TypeString, value)
	}
	if value, ok := scruo.mutation.TopicType(); ok {
		_spec.SetField(scacommentreply.FieldTopicType, field.TypeInt, value)
	}
	if value, ok := scruo.mutation.AddedTopicType(); ok {
		_spec.AddField(scacommentreply.FieldTopicType, field.TypeInt, value)
	}
	if value, ok := scruo.mutation.Content(); ok {
		_spec.SetField(scacommentreply.FieldContent, field.TypeString, value)
	}
	if value, ok := scruo.mutation.CommentType(); ok {
		_spec.SetField(scacommentreply.FieldCommentType, field.TypeInt, value)
	}
	if value, ok := scruo.mutation.AddedCommentType(); ok {
		_spec.AddField(scacommentreply.FieldCommentType, field.TypeInt, value)
	}
	if value, ok := scruo.mutation.ReplyTo(); ok {
		_spec.SetField(scacommentreply.FieldReplyTo, field.TypeInt64, value)
	}
	if value, ok := scruo.mutation.AddedReplyTo(); ok {
		_spec.AddField(scacommentreply.FieldReplyTo, field.TypeInt64, value)
	}
	if scruo.mutation.ReplyToCleared() {
		_spec.ClearField(scacommentreply.FieldReplyTo, field.TypeInt64)
	}
	if value, ok := scruo.mutation.ReplyID(); ok {
		_spec.SetField(scacommentreply.FieldReplyID, field.TypeInt64, value)
	}
	if value, ok := scruo.mutation.AddedReplyID(); ok {
		_spec.AddField(scacommentreply.FieldReplyID, field.TypeInt64, value)
	}
	if scruo.mutation.ReplyIDCleared() {
		_spec.ClearField(scacommentreply.FieldReplyID, field.TypeInt64)
	}
	if value, ok := scruo.mutation.ReplyUser(); ok {
		_spec.SetField(scacommentreply.FieldReplyUser, field.TypeString, value)
	}
	if scruo.mutation.ReplyUserCleared() {
		_spec.ClearField(scacommentreply.FieldReplyUser, field.TypeString)
	}
	if value, ok := scruo.mutation.Author(); ok {
		_spec.SetField(scacommentreply.FieldAuthor, field.TypeInt, value)
	}
	if value, ok := scruo.mutation.AddedAuthor(); ok {
		_spec.AddField(scacommentreply.FieldAuthor, field.TypeInt, value)
	}
	if value, ok := scruo.mutation.Likes(); ok {
		_spec.SetField(scacommentreply.FieldLikes, field.TypeInt64, value)
	}
	if value, ok := scruo.mutation.AddedLikes(); ok {
		_spec.AddField(scacommentreply.FieldLikes, field.TypeInt64, value)
	}
	if scruo.mutation.LikesCleared() {
		_spec.ClearField(scacommentreply.FieldLikes, field.TypeInt64)
	}
	if value, ok := scruo.mutation.ReplyCount(); ok {
		_spec.SetField(scacommentreply.FieldReplyCount, field.TypeInt64, value)
	}
	if value, ok := scruo.mutation.AddedReplyCount(); ok {
		_spec.AddField(scacommentreply.FieldReplyCount, field.TypeInt64, value)
	}
	if scruo.mutation.ReplyCountCleared() {
		_spec.ClearField(scacommentreply.FieldReplyCount, field.TypeInt64)
	}
	if value, ok := scruo.mutation.Browser(); ok {
		_spec.SetField(scacommentreply.FieldBrowser, field.TypeString, value)
	}
	if value, ok := scruo.mutation.OperatingSystem(); ok {
		_spec.SetField(scacommentreply.FieldOperatingSystem, field.TypeString, value)
	}
	if value, ok := scruo.mutation.CommentIP(); ok {
		_spec.SetField(scacommentreply.FieldCommentIP, field.TypeString, value)
	}
	if value, ok := scruo.mutation.Location(); ok {
		_spec.SetField(scacommentreply.FieldLocation, field.TypeString, value)
	}
	if value, ok := scruo.mutation.Agent(); ok {
		_spec.SetField(scacommentreply.FieldAgent, field.TypeString, value)
	}
	_node = &ScaCommentReply{config: scruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scacommentreply.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scruo.mutation.done = true
	return _node, nil
}
