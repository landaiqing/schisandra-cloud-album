// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scaauthusersocial"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// 用户第三方登录信息
type ScaAuthUserSocial struct {
	config `json:"-"`
	// ID of the ent.
	// 主键ID
	ID int64 `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 是否删除 0 未删除 1 已删除
	Deleted int8 `json:"deleted,omitempty"`
	// 用户ID
	UserID string `json:"user_id,omitempty"`
	// 第三方用户的 open id
	OpenID string `json:"open_id,omitempty"`
	// 第三方用户来源
	Source string `json:"source,omitempty"`
	// 状态 0正常 1 封禁
	Status       int `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScaAuthUserSocial) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scaauthusersocial.FieldID, scaauthusersocial.FieldDeleted, scaauthusersocial.FieldStatus:
			values[i] = new(sql.NullInt64)
		case scaauthusersocial.FieldUserID, scaauthusersocial.FieldOpenID, scaauthusersocial.FieldSource:
			values[i] = new(sql.NullString)
		case scaauthusersocial.FieldCreatedAt, scaauthusersocial.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScaAuthUserSocial fields.
func (saus *ScaAuthUserSocial) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scaauthusersocial.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			saus.ID = int64(value.Int64)
		case scaauthusersocial.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				saus.CreatedAt = value.Time
			}
		case scaauthusersocial.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				saus.UpdatedAt = value.Time
			}
		case scaauthusersocial.FieldDeleted:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted", values[i])
			} else if value.Valid {
				saus.Deleted = int8(value.Int64)
			}
		case scaauthusersocial.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				saus.UserID = value.String
			}
		case scaauthusersocial.FieldOpenID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field open_id", values[i])
			} else if value.Valid {
				saus.OpenID = value.String
			}
		case scaauthusersocial.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				saus.Source = value.String
			}
		case scaauthusersocial.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				saus.Status = int(value.Int64)
			}
		default:
			saus.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScaAuthUserSocial.
// This includes values selected through modifiers, order, etc.
func (saus *ScaAuthUserSocial) Value(name string) (ent.Value, error) {
	return saus.selectValues.Get(name)
}

// Update returns a builder for updating this ScaAuthUserSocial.
// Note that you need to call ScaAuthUserSocial.Unwrap() before calling this method if this ScaAuthUserSocial
// was returned from a transaction, and the transaction was committed or rolled back.
func (saus *ScaAuthUserSocial) Update() *ScaAuthUserSocialUpdateOne {
	return NewScaAuthUserSocialClient(saus.config).UpdateOne(saus)
}

// Unwrap unwraps the ScaAuthUserSocial entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (saus *ScaAuthUserSocial) Unwrap() *ScaAuthUserSocial {
	_tx, ok := saus.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScaAuthUserSocial is not a transactional entity")
	}
	saus.config.driver = _tx.drv
	return saus
}

// String implements the fmt.Stringer.
func (saus *ScaAuthUserSocial) String() string {
	var builder strings.Builder
	builder.WriteString("ScaAuthUserSocial(")
	builder.WriteString(fmt.Sprintf("id=%v, ", saus.ID))
	builder.WriteString("created_at=")
	builder.WriteString(saus.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(saus.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted=")
	builder.WriteString(fmt.Sprintf("%v", saus.Deleted))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(saus.UserID)
	builder.WriteString(", ")
	builder.WriteString("open_id=")
	builder.WriteString(saus.OpenID)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(saus.Source)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", saus.Status))
	builder.WriteByte(')')
	return builder.String()
}

// ScaAuthUserSocials is a parsable slice of ScaAuthUserSocial.
type ScaAuthUserSocials []*ScaAuthUserSocial
