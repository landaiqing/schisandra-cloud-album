// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/predicate"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scaauthuser"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scaauthuserdevice"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScaAuthUserDeviceQuery is the builder for querying ScaAuthUserDevice entities.
type ScaAuthUserDeviceQuery struct {
	config
	ctx             *QueryContext
	order           []scaauthuserdevice.OrderOption
	inters          []Interceptor
	predicates      []predicate.ScaAuthUserDevice
	withScaAuthUser *ScaAuthUserQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ScaAuthUserDeviceQuery builder.
func (saudq *ScaAuthUserDeviceQuery) Where(ps ...predicate.ScaAuthUserDevice) *ScaAuthUserDeviceQuery {
	saudq.predicates = append(saudq.predicates, ps...)
	return saudq
}

// Limit the number of records to be returned by this query.
func (saudq *ScaAuthUserDeviceQuery) Limit(limit int) *ScaAuthUserDeviceQuery {
	saudq.ctx.Limit = &limit
	return saudq
}

// Offset to start from.
func (saudq *ScaAuthUserDeviceQuery) Offset(offset int) *ScaAuthUserDeviceQuery {
	saudq.ctx.Offset = &offset
	return saudq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (saudq *ScaAuthUserDeviceQuery) Unique(unique bool) *ScaAuthUserDeviceQuery {
	saudq.ctx.Unique = &unique
	return saudq
}

// Order specifies how the records should be ordered.
func (saudq *ScaAuthUserDeviceQuery) Order(o ...scaauthuserdevice.OrderOption) *ScaAuthUserDeviceQuery {
	saudq.order = append(saudq.order, o...)
	return saudq
}

// QueryScaAuthUser chains the current query on the "sca_auth_user" edge.
func (saudq *ScaAuthUserDeviceQuery) QueryScaAuthUser() *ScaAuthUserQuery {
	query := (&ScaAuthUserClient{config: saudq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := saudq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := saudq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(scaauthuserdevice.Table, scaauthuserdevice.FieldID, selector),
			sqlgraph.To(scaauthuser.Table, scaauthuser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, scaauthuserdevice.ScaAuthUserTable, scaauthuserdevice.ScaAuthUserColumn),
		)
		fromU = sqlgraph.SetNeighbors(saudq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ScaAuthUserDevice entity from the query.
// Returns a *NotFoundError when no ScaAuthUserDevice was found.
func (saudq *ScaAuthUserDeviceQuery) First(ctx context.Context) (*ScaAuthUserDevice, error) {
	nodes, err := saudq.Limit(1).All(setContextOp(ctx, saudq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{scaauthuserdevice.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (saudq *ScaAuthUserDeviceQuery) FirstX(ctx context.Context) *ScaAuthUserDevice {
	node, err := saudq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ScaAuthUserDevice ID from the query.
// Returns a *NotFoundError when no ScaAuthUserDevice ID was found.
func (saudq *ScaAuthUserDeviceQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = saudq.Limit(1).IDs(setContextOp(ctx, saudq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{scaauthuserdevice.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (saudq *ScaAuthUserDeviceQuery) FirstIDX(ctx context.Context) int64 {
	id, err := saudq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ScaAuthUserDevice entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ScaAuthUserDevice entity is found.
// Returns a *NotFoundError when no ScaAuthUserDevice entities are found.
func (saudq *ScaAuthUserDeviceQuery) Only(ctx context.Context) (*ScaAuthUserDevice, error) {
	nodes, err := saudq.Limit(2).All(setContextOp(ctx, saudq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{scaauthuserdevice.Label}
	default:
		return nil, &NotSingularError{scaauthuserdevice.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (saudq *ScaAuthUserDeviceQuery) OnlyX(ctx context.Context) *ScaAuthUserDevice {
	node, err := saudq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ScaAuthUserDevice ID in the query.
// Returns a *NotSingularError when more than one ScaAuthUserDevice ID is found.
// Returns a *NotFoundError when no entities are found.
func (saudq *ScaAuthUserDeviceQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64
	if ids, err = saudq.Limit(2).IDs(setContextOp(ctx, saudq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{scaauthuserdevice.Label}
	default:
		err = &NotSingularError{scaauthuserdevice.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (saudq *ScaAuthUserDeviceQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := saudq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ScaAuthUserDevices.
func (saudq *ScaAuthUserDeviceQuery) All(ctx context.Context) ([]*ScaAuthUserDevice, error) {
	ctx = setContextOp(ctx, saudq.ctx, ent.OpQueryAll)
	if err := saudq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ScaAuthUserDevice, *ScaAuthUserDeviceQuery]()
	return withInterceptors[[]*ScaAuthUserDevice](ctx, saudq, qr, saudq.inters)
}

// AllX is like All, but panics if an error occurs.
func (saudq *ScaAuthUserDeviceQuery) AllX(ctx context.Context) []*ScaAuthUserDevice {
	nodes, err := saudq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ScaAuthUserDevice IDs.
func (saudq *ScaAuthUserDeviceQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if saudq.ctx.Unique == nil && saudq.path != nil {
		saudq.Unique(true)
	}
	ctx = setContextOp(ctx, saudq.ctx, ent.OpQueryIDs)
	if err = saudq.Select(scaauthuserdevice.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (saudq *ScaAuthUserDeviceQuery) IDsX(ctx context.Context) []int64 {
	ids, err := saudq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (saudq *ScaAuthUserDeviceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, saudq.ctx, ent.OpQueryCount)
	if err := saudq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, saudq, querierCount[*ScaAuthUserDeviceQuery](), saudq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (saudq *ScaAuthUserDeviceQuery) CountX(ctx context.Context) int {
	count, err := saudq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (saudq *ScaAuthUserDeviceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, saudq.ctx, ent.OpQueryExist)
	switch _, err := saudq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (saudq *ScaAuthUserDeviceQuery) ExistX(ctx context.Context) bool {
	exist, err := saudq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ScaAuthUserDeviceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (saudq *ScaAuthUserDeviceQuery) Clone() *ScaAuthUserDeviceQuery {
	if saudq == nil {
		return nil
	}
	return &ScaAuthUserDeviceQuery{
		config:          saudq.config,
		ctx:             saudq.ctx.Clone(),
		order:           append([]scaauthuserdevice.OrderOption{}, saudq.order...),
		inters:          append([]Interceptor{}, saudq.inters...),
		predicates:      append([]predicate.ScaAuthUserDevice{}, saudq.predicates...),
		withScaAuthUser: saudq.withScaAuthUser.Clone(),
		// clone intermediate query.
		sql:  saudq.sql.Clone(),
		path: saudq.path,
	}
}

// WithScaAuthUser tells the query-builder to eager-load the nodes that are connected to
// the "sca_auth_user" edge. The optional arguments are used to configure the query builder of the edge.
func (saudq *ScaAuthUserDeviceQuery) WithScaAuthUser(opts ...func(*ScaAuthUserQuery)) *ScaAuthUserDeviceQuery {
	query := (&ScaAuthUserClient{config: saudq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	saudq.withScaAuthUser = query
	return saudq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ScaAuthUserDevice.Query().
//		GroupBy(scaauthuserdevice.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (saudq *ScaAuthUserDeviceQuery) GroupBy(field string, fields ...string) *ScaAuthUserDeviceGroupBy {
	saudq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ScaAuthUserDeviceGroupBy{build: saudq}
	grbuild.flds = &saudq.ctx.Fields
	grbuild.label = scaauthuserdevice.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ScaAuthUserDevice.Query().
//		Select(scaauthuserdevice.FieldCreatedAt).
//		Scan(ctx, &v)
func (saudq *ScaAuthUserDeviceQuery) Select(fields ...string) *ScaAuthUserDeviceSelect {
	saudq.ctx.Fields = append(saudq.ctx.Fields, fields...)
	sbuild := &ScaAuthUserDeviceSelect{ScaAuthUserDeviceQuery: saudq}
	sbuild.label = scaauthuserdevice.Label
	sbuild.flds, sbuild.scan = &saudq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ScaAuthUserDeviceSelect configured with the given aggregations.
func (saudq *ScaAuthUserDeviceQuery) Aggregate(fns ...AggregateFunc) *ScaAuthUserDeviceSelect {
	return saudq.Select().Aggregate(fns...)
}

func (saudq *ScaAuthUserDeviceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range saudq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, saudq); err != nil {
				return err
			}
		}
	}
	for _, f := range saudq.ctx.Fields {
		if !scaauthuserdevice.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if saudq.path != nil {
		prev, err := saudq.path(ctx)
		if err != nil {
			return err
		}
		saudq.sql = prev
	}
	return nil
}

func (saudq *ScaAuthUserDeviceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ScaAuthUserDevice, error) {
	var (
		nodes       = []*ScaAuthUserDevice{}
		withFKs     = saudq.withFKs
		_spec       = saudq.querySpec()
		loadedTypes = [1]bool{
			saudq.withScaAuthUser != nil,
		}
	)
	if saudq.withScaAuthUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, scaauthuserdevice.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ScaAuthUserDevice).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ScaAuthUserDevice{config: saudq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, saudq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := saudq.withScaAuthUser; query != nil {
		if err := saudq.loadScaAuthUser(ctx, query, nodes, nil,
			func(n *ScaAuthUserDevice, e *ScaAuthUser) { n.Edges.ScaAuthUser = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (saudq *ScaAuthUserDeviceQuery) loadScaAuthUser(ctx context.Context, query *ScaAuthUserQuery, nodes []*ScaAuthUserDevice, init func(*ScaAuthUserDevice), assign func(*ScaAuthUserDevice, *ScaAuthUser)) error {
	ids := make([]int64, 0, len(nodes))
	nodeids := make(map[int64][]*ScaAuthUserDevice)
	for i := range nodes {
		if nodes[i].sca_auth_user_sca_auth_user_device == nil {
			continue
		}
		fk := *nodes[i].sca_auth_user_sca_auth_user_device
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(scaauthuser.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "sca_auth_user_sca_auth_user_device" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (saudq *ScaAuthUserDeviceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := saudq.querySpec()
	_spec.Node.Columns = saudq.ctx.Fields
	if len(saudq.ctx.Fields) > 0 {
		_spec.Unique = saudq.ctx.Unique != nil && *saudq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, saudq.driver, _spec)
}

func (saudq *ScaAuthUserDeviceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(scaauthuserdevice.Table, scaauthuserdevice.Columns, sqlgraph.NewFieldSpec(scaauthuserdevice.FieldID, field.TypeInt64))
	_spec.From = saudq.sql
	if unique := saudq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if saudq.path != nil {
		_spec.Unique = true
	}
	if fields := saudq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scaauthuserdevice.FieldID)
		for i := range fields {
			if fields[i] != scaauthuserdevice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := saudq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := saudq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := saudq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := saudq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (saudq *ScaAuthUserDeviceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(saudq.driver.Dialect())
	t1 := builder.Table(scaauthuserdevice.Table)
	columns := saudq.ctx.Fields
	if len(columns) == 0 {
		columns = scaauthuserdevice.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if saudq.sql != nil {
		selector = saudq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if saudq.ctx.Unique != nil && *saudq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range saudq.predicates {
		p(selector)
	}
	for _, p := range saudq.order {
		p(selector)
	}
	if offset := saudq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := saudq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ScaAuthUserDeviceGroupBy is the group-by builder for ScaAuthUserDevice entities.
type ScaAuthUserDeviceGroupBy struct {
	selector
	build *ScaAuthUserDeviceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (saudgb *ScaAuthUserDeviceGroupBy) Aggregate(fns ...AggregateFunc) *ScaAuthUserDeviceGroupBy {
	saudgb.fns = append(saudgb.fns, fns...)
	return saudgb
}

// Scan applies the selector query and scans the result into the given value.
func (saudgb *ScaAuthUserDeviceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, saudgb.build.ctx, ent.OpQueryGroupBy)
	if err := saudgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ScaAuthUserDeviceQuery, *ScaAuthUserDeviceGroupBy](ctx, saudgb.build, saudgb, saudgb.build.inters, v)
}

func (saudgb *ScaAuthUserDeviceGroupBy) sqlScan(ctx context.Context, root *ScaAuthUserDeviceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(saudgb.fns))
	for _, fn := range saudgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*saudgb.flds)+len(saudgb.fns))
		for _, f := range *saudgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*saudgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := saudgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ScaAuthUserDeviceSelect is the builder for selecting fields of ScaAuthUserDevice entities.
type ScaAuthUserDeviceSelect struct {
	*ScaAuthUserDeviceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sauds *ScaAuthUserDeviceSelect) Aggregate(fns ...AggregateFunc) *ScaAuthUserDeviceSelect {
	sauds.fns = append(sauds.fns, fns...)
	return sauds
}

// Scan applies the selector query and scans the result into the given value.
func (sauds *ScaAuthUserDeviceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sauds.ctx, ent.OpQuerySelect)
	if err := sauds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ScaAuthUserDeviceQuery, *ScaAuthUserDeviceSelect](ctx, sauds.ScaAuthUserDeviceQuery, sauds, sauds.inters, v)
}

func (sauds *ScaAuthUserDeviceSelect) sqlScan(ctx context.Context, root *ScaAuthUserDeviceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sauds.fns))
	for _, fn := range sauds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sauds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sauds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
