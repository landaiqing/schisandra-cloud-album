// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/predicate"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scacommentlikes"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScaCommentLikesDelete is the builder for deleting a ScaCommentLikes entity.
type ScaCommentLikesDelete struct {
	config
	hooks    []Hook
	mutation *ScaCommentLikesMutation
}

// Where appends a list predicates to the ScaCommentLikesDelete builder.
func (scld *ScaCommentLikesDelete) Where(ps ...predicate.ScaCommentLikes) *ScaCommentLikesDelete {
	scld.mutation.Where(ps...)
	return scld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (scld *ScaCommentLikesDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, scld.sqlExec, scld.mutation, scld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (scld *ScaCommentLikesDelete) ExecX(ctx context.Context) int {
	n, err := scld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (scld *ScaCommentLikesDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(scacommentlikes.Table, sqlgraph.NewFieldSpec(scacommentlikes.FieldID, field.TypeInt64))
	if ps := scld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, scld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	scld.mutation.done = true
	return affected, err
}

// ScaCommentLikesDeleteOne is the builder for deleting a single ScaCommentLikes entity.
type ScaCommentLikesDeleteOne struct {
	scld *ScaCommentLikesDelete
}

// Where appends a list predicates to the ScaCommentLikesDelete builder.
func (scldo *ScaCommentLikesDeleteOne) Where(ps ...predicate.ScaCommentLikes) *ScaCommentLikesDeleteOne {
	scldo.scld.mutation.Where(ps...)
	return scldo
}

// Exec executes the deletion query.
func (scldo *ScaCommentLikesDeleteOne) Exec(ctx context.Context) error {
	n, err := scldo.scld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{scacommentlikes.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (scldo *ScaCommentLikesDeleteOne) ExecX(ctx context.Context) {
	if err := scldo.Exec(ctx); err != nil {
		panic(err)
	}
}
