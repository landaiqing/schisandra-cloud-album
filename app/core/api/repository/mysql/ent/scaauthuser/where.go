// Code generated by ent, DO NOT EDIT.

package scaauthuser

import (
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldDeleted, v))
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldUID, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldUsername, v))
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldNickname, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldEmail, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldPhone, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldPassword, v))
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldGender, v))
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldAvatar, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldStatus, v))
}

// Introduce applies equality check predicate on the "introduce" field. It's identical to IntroduceEQ.
func Introduce(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldIntroduce, v))
}

// Blog applies equality check predicate on the "blog" field. It's identical to BlogEQ.
func Blog(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldBlog, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldLocation, v))
}

// Company applies equality check predicate on the "company" field. It's identical to CompanyEQ.
func Company(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldCompany, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldDeleted, v))
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNEQ(FieldDeleted, v))
}

// DeletedIn applies the In predicate on the "deleted" field.
func DeletedIn(vs ...int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIn(FieldDeleted, vs...))
}

// DeletedNotIn applies the NotIn predicate on the "deleted" field.
func DeletedNotIn(vs ...int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotIn(FieldDeleted, vs...))
}

// DeletedGT applies the GT predicate on the "deleted" field.
func DeletedGT(v int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGT(FieldDeleted, v))
}

// DeletedGTE applies the GTE predicate on the "deleted" field.
func DeletedGTE(v int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGTE(FieldDeleted, v))
}

// DeletedLT applies the LT predicate on the "deleted" field.
func DeletedLT(v int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLT(FieldDeleted, v))
}

// DeletedLTE applies the LTE predicate on the "deleted" field.
func DeletedLTE(v int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLTE(FieldDeleted, v))
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldUID, v))
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNEQ(FieldUID, v))
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIn(FieldUID, vs...))
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotIn(FieldUID, vs...))
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGT(FieldUID, v))
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGTE(FieldUID, v))
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLT(FieldUID, v))
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLTE(FieldUID, v))
}

// UIDContains applies the Contains predicate on the "uid" field.
func UIDContains(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldContains(FieldUID, v))
}

// UIDHasPrefix applies the HasPrefix predicate on the "uid" field.
func UIDHasPrefix(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldHasPrefix(FieldUID, v))
}

// UIDHasSuffix applies the HasSuffix predicate on the "uid" field.
func UIDHasSuffix(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldHasSuffix(FieldUID, v))
}

// UIDEqualFold applies the EqualFold predicate on the "uid" field.
func UIDEqualFold(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEqualFold(FieldUID, v))
}

// UIDContainsFold applies the ContainsFold predicate on the "uid" field.
func UIDContainsFold(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldContainsFold(FieldUID, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameIsNil applies the IsNil predicate on the "username" field.
func UsernameIsNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIsNull(FieldUsername))
}

// UsernameNotNil applies the NotNil predicate on the "username" field.
func UsernameNotNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotNull(FieldUsername))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldContainsFold(FieldUsername, v))
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldNickname, v))
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNEQ(FieldNickname, v))
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIn(FieldNickname, vs...))
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotIn(FieldNickname, vs...))
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGT(FieldNickname, v))
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGTE(FieldNickname, v))
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLT(FieldNickname, v))
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLTE(FieldNickname, v))
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldContains(FieldNickname, v))
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldHasPrefix(FieldNickname, v))
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldHasSuffix(FieldNickname, v))
}

// NicknameIsNil applies the IsNil predicate on the "nickname" field.
func NicknameIsNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIsNull(FieldNickname))
}

// NicknameNotNil applies the NotNil predicate on the "nickname" field.
func NicknameNotNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotNull(FieldNickname))
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEqualFold(FieldNickname, v))
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldContainsFold(FieldNickname, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldContainsFold(FieldEmail, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIsNull(FieldPhone))
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotNull(FieldPhone))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldContainsFold(FieldPhone, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordIsNil applies the IsNil predicate on the "password" field.
func PasswordIsNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIsNull(FieldPassword))
}

// PasswordNotNil applies the NotNil predicate on the "password" field.
func PasswordNotNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotNull(FieldPassword))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldContainsFold(FieldPassword, v))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotIn(FieldGender, vs...))
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGT(FieldGender, v))
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGTE(FieldGender, v))
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLT(FieldGender, v))
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLTE(FieldGender, v))
}

// GenderIsNil applies the IsNil predicate on the "gender" field.
func GenderIsNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIsNull(FieldGender))
}

// GenderNotNil applies the NotNil predicate on the "gender" field.
func GenderNotNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotNull(FieldGender))
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldAvatar, v))
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNEQ(FieldAvatar, v))
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIn(FieldAvatar, vs...))
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotIn(FieldAvatar, vs...))
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGT(FieldAvatar, v))
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGTE(FieldAvatar, v))
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLT(FieldAvatar, v))
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLTE(FieldAvatar, v))
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldContains(FieldAvatar, v))
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldHasPrefix(FieldAvatar, v))
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldHasSuffix(FieldAvatar, v))
}

// AvatarIsNil applies the IsNil predicate on the "avatar" field.
func AvatarIsNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIsNull(FieldAvatar))
}

// AvatarNotNil applies the NotNil predicate on the "avatar" field.
func AvatarNotNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotNull(FieldAvatar))
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEqualFold(FieldAvatar, v))
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldContainsFold(FieldAvatar, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotNull(FieldStatus))
}

// IntroduceEQ applies the EQ predicate on the "introduce" field.
func IntroduceEQ(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldIntroduce, v))
}

// IntroduceNEQ applies the NEQ predicate on the "introduce" field.
func IntroduceNEQ(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNEQ(FieldIntroduce, v))
}

// IntroduceIn applies the In predicate on the "introduce" field.
func IntroduceIn(vs ...string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIn(FieldIntroduce, vs...))
}

// IntroduceNotIn applies the NotIn predicate on the "introduce" field.
func IntroduceNotIn(vs ...string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotIn(FieldIntroduce, vs...))
}

// IntroduceGT applies the GT predicate on the "introduce" field.
func IntroduceGT(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGT(FieldIntroduce, v))
}

// IntroduceGTE applies the GTE predicate on the "introduce" field.
func IntroduceGTE(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGTE(FieldIntroduce, v))
}

// IntroduceLT applies the LT predicate on the "introduce" field.
func IntroduceLT(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLT(FieldIntroduce, v))
}

// IntroduceLTE applies the LTE predicate on the "introduce" field.
func IntroduceLTE(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLTE(FieldIntroduce, v))
}

// IntroduceContains applies the Contains predicate on the "introduce" field.
func IntroduceContains(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldContains(FieldIntroduce, v))
}

// IntroduceHasPrefix applies the HasPrefix predicate on the "introduce" field.
func IntroduceHasPrefix(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldHasPrefix(FieldIntroduce, v))
}

// IntroduceHasSuffix applies the HasSuffix predicate on the "introduce" field.
func IntroduceHasSuffix(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldHasSuffix(FieldIntroduce, v))
}

// IntroduceIsNil applies the IsNil predicate on the "introduce" field.
func IntroduceIsNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIsNull(FieldIntroduce))
}

// IntroduceNotNil applies the NotNil predicate on the "introduce" field.
func IntroduceNotNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotNull(FieldIntroduce))
}

// IntroduceEqualFold applies the EqualFold predicate on the "introduce" field.
func IntroduceEqualFold(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEqualFold(FieldIntroduce, v))
}

// IntroduceContainsFold applies the ContainsFold predicate on the "introduce" field.
func IntroduceContainsFold(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldContainsFold(FieldIntroduce, v))
}

// BlogEQ applies the EQ predicate on the "blog" field.
func BlogEQ(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldBlog, v))
}

// BlogNEQ applies the NEQ predicate on the "blog" field.
func BlogNEQ(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNEQ(FieldBlog, v))
}

// BlogIn applies the In predicate on the "blog" field.
func BlogIn(vs ...string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIn(FieldBlog, vs...))
}

// BlogNotIn applies the NotIn predicate on the "blog" field.
func BlogNotIn(vs ...string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotIn(FieldBlog, vs...))
}

// BlogGT applies the GT predicate on the "blog" field.
func BlogGT(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGT(FieldBlog, v))
}

// BlogGTE applies the GTE predicate on the "blog" field.
func BlogGTE(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGTE(FieldBlog, v))
}

// BlogLT applies the LT predicate on the "blog" field.
func BlogLT(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLT(FieldBlog, v))
}

// BlogLTE applies the LTE predicate on the "blog" field.
func BlogLTE(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLTE(FieldBlog, v))
}

// BlogContains applies the Contains predicate on the "blog" field.
func BlogContains(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldContains(FieldBlog, v))
}

// BlogHasPrefix applies the HasPrefix predicate on the "blog" field.
func BlogHasPrefix(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldHasPrefix(FieldBlog, v))
}

// BlogHasSuffix applies the HasSuffix predicate on the "blog" field.
func BlogHasSuffix(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldHasSuffix(FieldBlog, v))
}

// BlogIsNil applies the IsNil predicate on the "blog" field.
func BlogIsNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIsNull(FieldBlog))
}

// BlogNotNil applies the NotNil predicate on the "blog" field.
func BlogNotNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotNull(FieldBlog))
}

// BlogEqualFold applies the EqualFold predicate on the "blog" field.
func BlogEqualFold(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEqualFold(FieldBlog, v))
}

// BlogContainsFold applies the ContainsFold predicate on the "blog" field.
func BlogContainsFold(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldContainsFold(FieldBlog, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldContainsFold(FieldLocation, v))
}

// CompanyEQ applies the EQ predicate on the "company" field.
func CompanyEQ(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEQ(FieldCompany, v))
}

// CompanyNEQ applies the NEQ predicate on the "company" field.
func CompanyNEQ(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNEQ(FieldCompany, v))
}

// CompanyIn applies the In predicate on the "company" field.
func CompanyIn(vs ...string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIn(FieldCompany, vs...))
}

// CompanyNotIn applies the NotIn predicate on the "company" field.
func CompanyNotIn(vs ...string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotIn(FieldCompany, vs...))
}

// CompanyGT applies the GT predicate on the "company" field.
func CompanyGT(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGT(FieldCompany, v))
}

// CompanyGTE applies the GTE predicate on the "company" field.
func CompanyGTE(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldGTE(FieldCompany, v))
}

// CompanyLT applies the LT predicate on the "company" field.
func CompanyLT(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLT(FieldCompany, v))
}

// CompanyLTE applies the LTE predicate on the "company" field.
func CompanyLTE(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldLTE(FieldCompany, v))
}

// CompanyContains applies the Contains predicate on the "company" field.
func CompanyContains(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldContains(FieldCompany, v))
}

// CompanyHasPrefix applies the HasPrefix predicate on the "company" field.
func CompanyHasPrefix(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldHasPrefix(FieldCompany, v))
}

// CompanyHasSuffix applies the HasSuffix predicate on the "company" field.
func CompanyHasSuffix(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldHasSuffix(FieldCompany, v))
}

// CompanyIsNil applies the IsNil predicate on the "company" field.
func CompanyIsNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldIsNull(FieldCompany))
}

// CompanyNotNil applies the NotNil predicate on the "company" field.
func CompanyNotNil() predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldNotNull(FieldCompany))
}

// CompanyEqualFold applies the EqualFold predicate on the "company" field.
func CompanyEqualFold(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldEqualFold(FieldCompany, v))
}

// CompanyContainsFold applies the ContainsFold predicate on the "company" field.
func CompanyContainsFold(v string) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.FieldContainsFold(FieldCompany, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScaAuthUser) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScaAuthUser) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScaAuthUser) predicate.ScaAuthUser {
	return predicate.ScaAuthUser(sql.NotPredicates(p))
}
