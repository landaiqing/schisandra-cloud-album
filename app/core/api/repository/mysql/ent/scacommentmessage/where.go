// Code generated by ent, DO NOT EDIT.

package scacommentmessage

import (
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldEQ(FieldUpdatedAt, v))
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v int8) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldEQ(FieldDeleted, v))
}

// TopicID applies equality check predicate on the "topic_id" field. It's identical to TopicIDEQ.
func TopicID(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldEQ(FieldTopicID, v))
}

// FromID applies equality check predicate on the "from_id" field. It's identical to FromIDEQ.
func FromID(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldEQ(FieldFromID, v))
}

// ToID applies equality check predicate on the "to_id" field. It's identical to ToIDEQ.
func ToID(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldEQ(FieldToID, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldEQ(FieldContent, v))
}

// IsRead applies equality check predicate on the "is_read" field. It's identical to IsReadEQ.
func IsRead(v int) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldEQ(FieldIsRead, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v int8) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldEQ(FieldDeleted, v))
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v int8) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldNEQ(FieldDeleted, v))
}

// DeletedIn applies the In predicate on the "deleted" field.
func DeletedIn(vs ...int8) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldIn(FieldDeleted, vs...))
}

// DeletedNotIn applies the NotIn predicate on the "deleted" field.
func DeletedNotIn(vs ...int8) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldNotIn(FieldDeleted, vs...))
}

// DeletedGT applies the GT predicate on the "deleted" field.
func DeletedGT(v int8) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldGT(FieldDeleted, v))
}

// DeletedGTE applies the GTE predicate on the "deleted" field.
func DeletedGTE(v int8) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldGTE(FieldDeleted, v))
}

// DeletedLT applies the LT predicate on the "deleted" field.
func DeletedLT(v int8) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldLT(FieldDeleted, v))
}

// DeletedLTE applies the LTE predicate on the "deleted" field.
func DeletedLTE(v int8) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldLTE(FieldDeleted, v))
}

// TopicIDEQ applies the EQ predicate on the "topic_id" field.
func TopicIDEQ(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldEQ(FieldTopicID, v))
}

// TopicIDNEQ applies the NEQ predicate on the "topic_id" field.
func TopicIDNEQ(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldNEQ(FieldTopicID, v))
}

// TopicIDIn applies the In predicate on the "topic_id" field.
func TopicIDIn(vs ...string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldIn(FieldTopicID, vs...))
}

// TopicIDNotIn applies the NotIn predicate on the "topic_id" field.
func TopicIDNotIn(vs ...string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldNotIn(FieldTopicID, vs...))
}

// TopicIDGT applies the GT predicate on the "topic_id" field.
func TopicIDGT(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldGT(FieldTopicID, v))
}

// TopicIDGTE applies the GTE predicate on the "topic_id" field.
func TopicIDGTE(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldGTE(FieldTopicID, v))
}

// TopicIDLT applies the LT predicate on the "topic_id" field.
func TopicIDLT(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldLT(FieldTopicID, v))
}

// TopicIDLTE applies the LTE predicate on the "topic_id" field.
func TopicIDLTE(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldLTE(FieldTopicID, v))
}

// TopicIDContains applies the Contains predicate on the "topic_id" field.
func TopicIDContains(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldContains(FieldTopicID, v))
}

// TopicIDHasPrefix applies the HasPrefix predicate on the "topic_id" field.
func TopicIDHasPrefix(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldHasPrefix(FieldTopicID, v))
}

// TopicIDHasSuffix applies the HasSuffix predicate on the "topic_id" field.
func TopicIDHasSuffix(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldHasSuffix(FieldTopicID, v))
}

// TopicIDEqualFold applies the EqualFold predicate on the "topic_id" field.
func TopicIDEqualFold(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldEqualFold(FieldTopicID, v))
}

// TopicIDContainsFold applies the ContainsFold predicate on the "topic_id" field.
func TopicIDContainsFold(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldContainsFold(FieldTopicID, v))
}

// FromIDEQ applies the EQ predicate on the "from_id" field.
func FromIDEQ(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldEQ(FieldFromID, v))
}

// FromIDNEQ applies the NEQ predicate on the "from_id" field.
func FromIDNEQ(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldNEQ(FieldFromID, v))
}

// FromIDIn applies the In predicate on the "from_id" field.
func FromIDIn(vs ...string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldIn(FieldFromID, vs...))
}

// FromIDNotIn applies the NotIn predicate on the "from_id" field.
func FromIDNotIn(vs ...string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldNotIn(FieldFromID, vs...))
}

// FromIDGT applies the GT predicate on the "from_id" field.
func FromIDGT(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldGT(FieldFromID, v))
}

// FromIDGTE applies the GTE predicate on the "from_id" field.
func FromIDGTE(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldGTE(FieldFromID, v))
}

// FromIDLT applies the LT predicate on the "from_id" field.
func FromIDLT(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldLT(FieldFromID, v))
}

// FromIDLTE applies the LTE predicate on the "from_id" field.
func FromIDLTE(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldLTE(FieldFromID, v))
}

// FromIDContains applies the Contains predicate on the "from_id" field.
func FromIDContains(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldContains(FieldFromID, v))
}

// FromIDHasPrefix applies the HasPrefix predicate on the "from_id" field.
func FromIDHasPrefix(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldHasPrefix(FieldFromID, v))
}

// FromIDHasSuffix applies the HasSuffix predicate on the "from_id" field.
func FromIDHasSuffix(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldHasSuffix(FieldFromID, v))
}

// FromIDEqualFold applies the EqualFold predicate on the "from_id" field.
func FromIDEqualFold(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldEqualFold(FieldFromID, v))
}

// FromIDContainsFold applies the ContainsFold predicate on the "from_id" field.
func FromIDContainsFold(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldContainsFold(FieldFromID, v))
}

// ToIDEQ applies the EQ predicate on the "to_id" field.
func ToIDEQ(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldEQ(FieldToID, v))
}

// ToIDNEQ applies the NEQ predicate on the "to_id" field.
func ToIDNEQ(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldNEQ(FieldToID, v))
}

// ToIDIn applies the In predicate on the "to_id" field.
func ToIDIn(vs ...string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldIn(FieldToID, vs...))
}

// ToIDNotIn applies the NotIn predicate on the "to_id" field.
func ToIDNotIn(vs ...string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldNotIn(FieldToID, vs...))
}

// ToIDGT applies the GT predicate on the "to_id" field.
func ToIDGT(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldGT(FieldToID, v))
}

// ToIDGTE applies the GTE predicate on the "to_id" field.
func ToIDGTE(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldGTE(FieldToID, v))
}

// ToIDLT applies the LT predicate on the "to_id" field.
func ToIDLT(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldLT(FieldToID, v))
}

// ToIDLTE applies the LTE predicate on the "to_id" field.
func ToIDLTE(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldLTE(FieldToID, v))
}

// ToIDContains applies the Contains predicate on the "to_id" field.
func ToIDContains(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldContains(FieldToID, v))
}

// ToIDHasPrefix applies the HasPrefix predicate on the "to_id" field.
func ToIDHasPrefix(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldHasPrefix(FieldToID, v))
}

// ToIDHasSuffix applies the HasSuffix predicate on the "to_id" field.
func ToIDHasSuffix(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldHasSuffix(FieldToID, v))
}

// ToIDEqualFold applies the EqualFold predicate on the "to_id" field.
func ToIDEqualFold(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldEqualFold(FieldToID, v))
}

// ToIDContainsFold applies the ContainsFold predicate on the "to_id" field.
func ToIDContainsFold(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldContainsFold(FieldToID, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldContainsFold(FieldContent, v))
}

// IsReadEQ applies the EQ predicate on the "is_read" field.
func IsReadEQ(v int) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldEQ(FieldIsRead, v))
}

// IsReadNEQ applies the NEQ predicate on the "is_read" field.
func IsReadNEQ(v int) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldNEQ(FieldIsRead, v))
}

// IsReadIn applies the In predicate on the "is_read" field.
func IsReadIn(vs ...int) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldIn(FieldIsRead, vs...))
}

// IsReadNotIn applies the NotIn predicate on the "is_read" field.
func IsReadNotIn(vs ...int) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldNotIn(FieldIsRead, vs...))
}

// IsReadGT applies the GT predicate on the "is_read" field.
func IsReadGT(v int) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldGT(FieldIsRead, v))
}

// IsReadGTE applies the GTE predicate on the "is_read" field.
func IsReadGTE(v int) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldGTE(FieldIsRead, v))
}

// IsReadLT applies the LT predicate on the "is_read" field.
func IsReadLT(v int) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldLT(FieldIsRead, v))
}

// IsReadLTE applies the LTE predicate on the "is_read" field.
func IsReadLTE(v int) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldLTE(FieldIsRead, v))
}

// IsReadIsNil applies the IsNil predicate on the "is_read" field.
func IsReadIsNil() predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldIsNull(FieldIsRead))
}

// IsReadNotNil applies the NotNil predicate on the "is_read" field.
func IsReadNotNil() predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.FieldNotNull(FieldIsRead))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScaCommentMessage) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScaCommentMessage) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScaCommentMessage) predicate.ScaCommentMessage {
	return predicate.ScaCommentMessage(sql.NotPredicates(p))
}
