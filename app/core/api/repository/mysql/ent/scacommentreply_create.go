// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scacommentreply"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScaCommentReplyCreate is the builder for creating a ScaCommentReply entity.
type ScaCommentReplyCreate struct {
	config
	mutation *ScaCommentReplyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (scrc *ScaCommentReplyCreate) SetCreatedAt(t time.Time) *ScaCommentReplyCreate {
	scrc.mutation.SetCreatedAt(t)
	return scrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (scrc *ScaCommentReplyCreate) SetNillableCreatedAt(t *time.Time) *ScaCommentReplyCreate {
	if t != nil {
		scrc.SetCreatedAt(*t)
	}
	return scrc
}

// SetUpdatedAt sets the "updated_at" field.
func (scrc *ScaCommentReplyCreate) SetUpdatedAt(t time.Time) *ScaCommentReplyCreate {
	scrc.mutation.SetUpdatedAt(t)
	return scrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (scrc *ScaCommentReplyCreate) SetNillableUpdatedAt(t *time.Time) *ScaCommentReplyCreate {
	if t != nil {
		scrc.SetUpdatedAt(*t)
	}
	return scrc
}

// SetDeleted sets the "deleted" field.
func (scrc *ScaCommentReplyCreate) SetDeleted(i int8) *ScaCommentReplyCreate {
	scrc.mutation.SetDeleted(i)
	return scrc
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (scrc *ScaCommentReplyCreate) SetNillableDeleted(i *int8) *ScaCommentReplyCreate {
	if i != nil {
		scrc.SetDeleted(*i)
	}
	return scrc
}

// SetUserID sets the "user_id" field.
func (scrc *ScaCommentReplyCreate) SetUserID(s string) *ScaCommentReplyCreate {
	scrc.mutation.SetUserID(s)
	return scrc
}

// SetTopicID sets the "topic_id" field.
func (scrc *ScaCommentReplyCreate) SetTopicID(s string) *ScaCommentReplyCreate {
	scrc.mutation.SetTopicID(s)
	return scrc
}

// SetTopicType sets the "topic_type" field.
func (scrc *ScaCommentReplyCreate) SetTopicType(i int) *ScaCommentReplyCreate {
	scrc.mutation.SetTopicType(i)
	return scrc
}

// SetContent sets the "content" field.
func (scrc *ScaCommentReplyCreate) SetContent(s string) *ScaCommentReplyCreate {
	scrc.mutation.SetContent(s)
	return scrc
}

// SetCommentType sets the "comment_type" field.
func (scrc *ScaCommentReplyCreate) SetCommentType(i int) *ScaCommentReplyCreate {
	scrc.mutation.SetCommentType(i)
	return scrc
}

// SetReplyTo sets the "reply_to" field.
func (scrc *ScaCommentReplyCreate) SetReplyTo(i int64) *ScaCommentReplyCreate {
	scrc.mutation.SetReplyTo(i)
	return scrc
}

// SetNillableReplyTo sets the "reply_to" field if the given value is not nil.
func (scrc *ScaCommentReplyCreate) SetNillableReplyTo(i *int64) *ScaCommentReplyCreate {
	if i != nil {
		scrc.SetReplyTo(*i)
	}
	return scrc
}

// SetReplyID sets the "reply_id" field.
func (scrc *ScaCommentReplyCreate) SetReplyID(i int64) *ScaCommentReplyCreate {
	scrc.mutation.SetReplyID(i)
	return scrc
}

// SetNillableReplyID sets the "reply_id" field if the given value is not nil.
func (scrc *ScaCommentReplyCreate) SetNillableReplyID(i *int64) *ScaCommentReplyCreate {
	if i != nil {
		scrc.SetReplyID(*i)
	}
	return scrc
}

// SetReplyUser sets the "reply_user" field.
func (scrc *ScaCommentReplyCreate) SetReplyUser(s string) *ScaCommentReplyCreate {
	scrc.mutation.SetReplyUser(s)
	return scrc
}

// SetNillableReplyUser sets the "reply_user" field if the given value is not nil.
func (scrc *ScaCommentReplyCreate) SetNillableReplyUser(s *string) *ScaCommentReplyCreate {
	if s != nil {
		scrc.SetReplyUser(*s)
	}
	return scrc
}

// SetAuthor sets the "author" field.
func (scrc *ScaCommentReplyCreate) SetAuthor(i int) *ScaCommentReplyCreate {
	scrc.mutation.SetAuthor(i)
	return scrc
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (scrc *ScaCommentReplyCreate) SetNillableAuthor(i *int) *ScaCommentReplyCreate {
	if i != nil {
		scrc.SetAuthor(*i)
	}
	return scrc
}

// SetLikes sets the "likes" field.
func (scrc *ScaCommentReplyCreate) SetLikes(i int64) *ScaCommentReplyCreate {
	scrc.mutation.SetLikes(i)
	return scrc
}

// SetNillableLikes sets the "likes" field if the given value is not nil.
func (scrc *ScaCommentReplyCreate) SetNillableLikes(i *int64) *ScaCommentReplyCreate {
	if i != nil {
		scrc.SetLikes(*i)
	}
	return scrc
}

// SetReplyCount sets the "reply_count" field.
func (scrc *ScaCommentReplyCreate) SetReplyCount(i int64) *ScaCommentReplyCreate {
	scrc.mutation.SetReplyCount(i)
	return scrc
}

// SetNillableReplyCount sets the "reply_count" field if the given value is not nil.
func (scrc *ScaCommentReplyCreate) SetNillableReplyCount(i *int64) *ScaCommentReplyCreate {
	if i != nil {
		scrc.SetReplyCount(*i)
	}
	return scrc
}

// SetBrowser sets the "browser" field.
func (scrc *ScaCommentReplyCreate) SetBrowser(s string) *ScaCommentReplyCreate {
	scrc.mutation.SetBrowser(s)
	return scrc
}

// SetOperatingSystem sets the "operating_system" field.
func (scrc *ScaCommentReplyCreate) SetOperatingSystem(s string) *ScaCommentReplyCreate {
	scrc.mutation.SetOperatingSystem(s)
	return scrc
}

// SetCommentIP sets the "comment_ip" field.
func (scrc *ScaCommentReplyCreate) SetCommentIP(s string) *ScaCommentReplyCreate {
	scrc.mutation.SetCommentIP(s)
	return scrc
}

// SetLocation sets the "location" field.
func (scrc *ScaCommentReplyCreate) SetLocation(s string) *ScaCommentReplyCreate {
	scrc.mutation.SetLocation(s)
	return scrc
}

// SetAgent sets the "agent" field.
func (scrc *ScaCommentReplyCreate) SetAgent(s string) *ScaCommentReplyCreate {
	scrc.mutation.SetAgent(s)
	return scrc
}

// SetID sets the "id" field.
func (scrc *ScaCommentReplyCreate) SetID(i int64) *ScaCommentReplyCreate {
	scrc.mutation.SetID(i)
	return scrc
}

// Mutation returns the ScaCommentReplyMutation object of the builder.
func (scrc *ScaCommentReplyCreate) Mutation() *ScaCommentReplyMutation {
	return scrc.mutation
}

// Save creates the ScaCommentReply in the database.
func (scrc *ScaCommentReplyCreate) Save(ctx context.Context) (*ScaCommentReply, error) {
	scrc.defaults()
	return withHooks(ctx, scrc.sqlSave, scrc.mutation, scrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scrc *ScaCommentReplyCreate) SaveX(ctx context.Context) *ScaCommentReply {
	v, err := scrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scrc *ScaCommentReplyCreate) Exec(ctx context.Context) error {
	_, err := scrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scrc *ScaCommentReplyCreate) ExecX(ctx context.Context) {
	if err := scrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scrc *ScaCommentReplyCreate) defaults() {
	if _, ok := scrc.mutation.CreatedAt(); !ok {
		v := scacommentreply.DefaultCreatedAt()
		scrc.mutation.SetCreatedAt(v)
	}
	if _, ok := scrc.mutation.Deleted(); !ok {
		v := scacommentreply.DefaultDeleted
		scrc.mutation.SetDeleted(v)
	}
	if _, ok := scrc.mutation.Author(); !ok {
		v := scacommentreply.DefaultAuthor
		scrc.mutation.SetAuthor(v)
	}
	if _, ok := scrc.mutation.Likes(); !ok {
		v := scacommentreply.DefaultLikes
		scrc.mutation.SetLikes(v)
	}
	if _, ok := scrc.mutation.ReplyCount(); !ok {
		v := scacommentreply.DefaultReplyCount
		scrc.mutation.SetReplyCount(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scrc *ScaCommentReplyCreate) check() error {
	if _, ok := scrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ScaCommentReply.created_at"`)}
	}
	if _, ok := scrc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "ScaCommentReply.deleted"`)}
	}
	if v, ok := scrc.mutation.Deleted(); ok {
		if err := scacommentreply.DeletedValidator(v); err != nil {
			return &ValidationError{Name: "deleted", err: fmt.Errorf(`ent: validator failed for field "ScaCommentReply.deleted": %w`, err)}
		}
	}
	if _, ok := scrc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ScaCommentReply.user_id"`)}
	}
	if _, ok := scrc.mutation.TopicID(); !ok {
		return &ValidationError{Name: "topic_id", err: errors.New(`ent: missing required field "ScaCommentReply.topic_id"`)}
	}
	if _, ok := scrc.mutation.TopicType(); !ok {
		return &ValidationError{Name: "topic_type", err: errors.New(`ent: missing required field "ScaCommentReply.topic_type"`)}
	}
	if _, ok := scrc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "ScaCommentReply.content"`)}
	}
	if _, ok := scrc.mutation.CommentType(); !ok {
		return &ValidationError{Name: "comment_type", err: errors.New(`ent: missing required field "ScaCommentReply.comment_type"`)}
	}
	if _, ok := scrc.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "ScaCommentReply.author"`)}
	}
	if _, ok := scrc.mutation.Browser(); !ok {
		return &ValidationError{Name: "browser", err: errors.New(`ent: missing required field "ScaCommentReply.browser"`)}
	}
	if _, ok := scrc.mutation.OperatingSystem(); !ok {
		return &ValidationError{Name: "operating_system", err: errors.New(`ent: missing required field "ScaCommentReply.operating_system"`)}
	}
	if _, ok := scrc.mutation.CommentIP(); !ok {
		return &ValidationError{Name: "comment_ip", err: errors.New(`ent: missing required field "ScaCommentReply.comment_ip"`)}
	}
	if _, ok := scrc.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "ScaCommentReply.location"`)}
	}
	if _, ok := scrc.mutation.Agent(); !ok {
		return &ValidationError{Name: "agent", err: errors.New(`ent: missing required field "ScaCommentReply.agent"`)}
	}
	if v, ok := scrc.mutation.Agent(); ok {
		if err := scacommentreply.AgentValidator(v); err != nil {
			return &ValidationError{Name: "agent", err: fmt.Errorf(`ent: validator failed for field "ScaCommentReply.agent": %w`, err)}
		}
	}
	return nil
}

func (scrc *ScaCommentReplyCreate) sqlSave(ctx context.Context) (*ScaCommentReply, error) {
	if err := scrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := scrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	scrc.mutation.id = &_node.ID
	scrc.mutation.done = true
	return _node, nil
}

func (scrc *ScaCommentReplyCreate) createSpec() (*ScaCommentReply, *sqlgraph.CreateSpec) {
	var (
		_node = &ScaCommentReply{config: scrc.config}
		_spec = sqlgraph.NewCreateSpec(scacommentreply.Table, sqlgraph.NewFieldSpec(scacommentreply.FieldID, field.TypeInt64))
	)
	if id, ok := scrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := scrc.mutation.CreatedAt(); ok {
		_spec.SetField(scacommentreply.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := scrc.mutation.UpdatedAt(); ok {
		_spec.SetField(scacommentreply.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := scrc.mutation.Deleted(); ok {
		_spec.SetField(scacommentreply.FieldDeleted, field.TypeInt8, value)
		_node.Deleted = value
	}
	if value, ok := scrc.mutation.UserID(); ok {
		_spec.SetField(scacommentreply.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := scrc.mutation.TopicID(); ok {
		_spec.SetField(scacommentreply.FieldTopicID, field.TypeString, value)
		_node.TopicID = value
	}
	if value, ok := scrc.mutation.TopicType(); ok {
		_spec.SetField(scacommentreply.FieldTopicType, field.TypeInt, value)
		_node.TopicType = value
	}
	if value, ok := scrc.mutation.Content(); ok {
		_spec.SetField(scacommentreply.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := scrc.mutation.CommentType(); ok {
		_spec.SetField(scacommentreply.FieldCommentType, field.TypeInt, value)
		_node.CommentType = value
	}
	if value, ok := scrc.mutation.ReplyTo(); ok {
		_spec.SetField(scacommentreply.FieldReplyTo, field.TypeInt64, value)
		_node.ReplyTo = value
	}
	if value, ok := scrc.mutation.ReplyID(); ok {
		_spec.SetField(scacommentreply.FieldReplyID, field.TypeInt64, value)
		_node.ReplyID = value
	}
	if value, ok := scrc.mutation.ReplyUser(); ok {
		_spec.SetField(scacommentreply.FieldReplyUser, field.TypeString, value)
		_node.ReplyUser = value
	}
	if value, ok := scrc.mutation.Author(); ok {
		_spec.SetField(scacommentreply.FieldAuthor, field.TypeInt, value)
		_node.Author = value
	}
	if value, ok := scrc.mutation.Likes(); ok {
		_spec.SetField(scacommentreply.FieldLikes, field.TypeInt64, value)
		_node.Likes = value
	}
	if value, ok := scrc.mutation.ReplyCount(); ok {
		_spec.SetField(scacommentreply.FieldReplyCount, field.TypeInt64, value)
		_node.ReplyCount = value
	}
	if value, ok := scrc.mutation.Browser(); ok {
		_spec.SetField(scacommentreply.FieldBrowser, field.TypeString, value)
		_node.Browser = value
	}
	if value, ok := scrc.mutation.OperatingSystem(); ok {
		_spec.SetField(scacommentreply.FieldOperatingSystem, field.TypeString, value)
		_node.OperatingSystem = value
	}
	if value, ok := scrc.mutation.CommentIP(); ok {
		_spec.SetField(scacommentreply.FieldCommentIP, field.TypeString, value)
		_node.CommentIP = value
	}
	if value, ok := scrc.mutation.Location(); ok {
		_spec.SetField(scacommentreply.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := scrc.mutation.Agent(); ok {
		_spec.SetField(scacommentreply.FieldAgent, field.TypeString, value)
		_node.Agent = value
	}
	return _node, _spec
}

// ScaCommentReplyCreateBulk is the builder for creating many ScaCommentReply entities in bulk.
type ScaCommentReplyCreateBulk struct {
	config
	err      error
	builders []*ScaCommentReplyCreate
}

// Save creates the ScaCommentReply entities in the database.
func (scrcb *ScaCommentReplyCreateBulk) Save(ctx context.Context) ([]*ScaCommentReply, error) {
	if scrcb.err != nil {
		return nil, scrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scrcb.builders))
	nodes := make([]*ScaCommentReply, len(scrcb.builders))
	mutators := make([]Mutator, len(scrcb.builders))
	for i := range scrcb.builders {
		func(i int, root context.Context) {
			builder := scrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScaCommentReplyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scrcb *ScaCommentReplyCreateBulk) SaveX(ctx context.Context) []*ScaCommentReply {
	v, err := scrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scrcb *ScaCommentReplyCreateBulk) Exec(ctx context.Context) error {
	_, err := scrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scrcb *ScaCommentReplyCreateBulk) ExecX(ctx context.Context) {
	if err := scrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
