// Code generated by ent, DO NOT EDIT.

package scauserfollows

import (
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldLTE(FieldID, id))
}

// FollowerID applies equality check predicate on the "follower_id" field. It's identical to FollowerIDEQ.
func FollowerID(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldEQ(FieldFollowerID, v))
}

// FolloweeID applies equality check predicate on the "followee_id" field. It's identical to FolloweeIDEQ.
func FolloweeID(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldEQ(FieldFolloweeID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldEQ(FieldStatus, v))
}

// FollowerIDEQ applies the EQ predicate on the "follower_id" field.
func FollowerIDEQ(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldEQ(FieldFollowerID, v))
}

// FollowerIDNEQ applies the NEQ predicate on the "follower_id" field.
func FollowerIDNEQ(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldNEQ(FieldFollowerID, v))
}

// FollowerIDIn applies the In predicate on the "follower_id" field.
func FollowerIDIn(vs ...string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldIn(FieldFollowerID, vs...))
}

// FollowerIDNotIn applies the NotIn predicate on the "follower_id" field.
func FollowerIDNotIn(vs ...string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldNotIn(FieldFollowerID, vs...))
}

// FollowerIDGT applies the GT predicate on the "follower_id" field.
func FollowerIDGT(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldGT(FieldFollowerID, v))
}

// FollowerIDGTE applies the GTE predicate on the "follower_id" field.
func FollowerIDGTE(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldGTE(FieldFollowerID, v))
}

// FollowerIDLT applies the LT predicate on the "follower_id" field.
func FollowerIDLT(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldLT(FieldFollowerID, v))
}

// FollowerIDLTE applies the LTE predicate on the "follower_id" field.
func FollowerIDLTE(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldLTE(FieldFollowerID, v))
}

// FollowerIDContains applies the Contains predicate on the "follower_id" field.
func FollowerIDContains(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldContains(FieldFollowerID, v))
}

// FollowerIDHasPrefix applies the HasPrefix predicate on the "follower_id" field.
func FollowerIDHasPrefix(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldHasPrefix(FieldFollowerID, v))
}

// FollowerIDHasSuffix applies the HasSuffix predicate on the "follower_id" field.
func FollowerIDHasSuffix(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldHasSuffix(FieldFollowerID, v))
}

// FollowerIDEqualFold applies the EqualFold predicate on the "follower_id" field.
func FollowerIDEqualFold(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldEqualFold(FieldFollowerID, v))
}

// FollowerIDContainsFold applies the ContainsFold predicate on the "follower_id" field.
func FollowerIDContainsFold(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldContainsFold(FieldFollowerID, v))
}

// FolloweeIDEQ applies the EQ predicate on the "followee_id" field.
func FolloweeIDEQ(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldEQ(FieldFolloweeID, v))
}

// FolloweeIDNEQ applies the NEQ predicate on the "followee_id" field.
func FolloweeIDNEQ(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldNEQ(FieldFolloweeID, v))
}

// FolloweeIDIn applies the In predicate on the "followee_id" field.
func FolloweeIDIn(vs ...string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldIn(FieldFolloweeID, vs...))
}

// FolloweeIDNotIn applies the NotIn predicate on the "followee_id" field.
func FolloweeIDNotIn(vs ...string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldNotIn(FieldFolloweeID, vs...))
}

// FolloweeIDGT applies the GT predicate on the "followee_id" field.
func FolloweeIDGT(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldGT(FieldFolloweeID, v))
}

// FolloweeIDGTE applies the GTE predicate on the "followee_id" field.
func FolloweeIDGTE(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldGTE(FieldFolloweeID, v))
}

// FolloweeIDLT applies the LT predicate on the "followee_id" field.
func FolloweeIDLT(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldLT(FieldFolloweeID, v))
}

// FolloweeIDLTE applies the LTE predicate on the "followee_id" field.
func FolloweeIDLTE(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldLTE(FieldFolloweeID, v))
}

// FolloweeIDContains applies the Contains predicate on the "followee_id" field.
func FolloweeIDContains(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldContains(FieldFolloweeID, v))
}

// FolloweeIDHasPrefix applies the HasPrefix predicate on the "followee_id" field.
func FolloweeIDHasPrefix(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldHasPrefix(FieldFolloweeID, v))
}

// FolloweeIDHasSuffix applies the HasSuffix predicate on the "followee_id" field.
func FolloweeIDHasSuffix(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldHasSuffix(FieldFolloweeID, v))
}

// FolloweeIDEqualFold applies the EqualFold predicate on the "followee_id" field.
func FolloweeIDEqualFold(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldEqualFold(FieldFolloweeID, v))
}

// FolloweeIDContainsFold applies the ContainsFold predicate on the "followee_id" field.
func FolloweeIDContainsFold(v string) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldContainsFold(FieldFolloweeID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.FieldLTE(FieldStatus, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScaUserFollows) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScaUserFollows) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScaUserFollows) predicate.ScaUserFollows {
	return predicate.ScaUserFollows(sql.NotPredicates(p))
}
