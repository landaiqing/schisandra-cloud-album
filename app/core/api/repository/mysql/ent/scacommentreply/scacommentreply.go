// Code generated by ent, DO NOT EDIT.

package scacommentreply

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the scacommentreply type in the database.
	Label = "sca_comment_reply"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeleted holds the string denoting the deleted field in the database.
	FieldDeleted = "deleted"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTopicID holds the string denoting the topic_id field in the database.
	FieldTopicID = "topic_id"
	// FieldTopicType holds the string denoting the topic_type field in the database.
	FieldTopicType = "topic_type"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldCommentType holds the string denoting the comment_type field in the database.
	FieldCommentType = "comment_type"
	// FieldReplyTo holds the string denoting the reply_to field in the database.
	FieldReplyTo = "reply_to"
	// FieldReplyID holds the string denoting the reply_id field in the database.
	FieldReplyID = "reply_id"
	// FieldReplyUser holds the string denoting the reply_user field in the database.
	FieldReplyUser = "reply_user"
	// FieldAuthor holds the string denoting the author field in the database.
	FieldAuthor = "author"
	// FieldLikes holds the string denoting the likes field in the database.
	FieldLikes = "likes"
	// FieldReplyCount holds the string denoting the reply_count field in the database.
	FieldReplyCount = "reply_count"
	// FieldBrowser holds the string denoting the browser field in the database.
	FieldBrowser = "browser"
	// FieldOperatingSystem holds the string denoting the operating_system field in the database.
	FieldOperatingSystem = "operating_system"
	// FieldCommentIP holds the string denoting the comment_ip field in the database.
	FieldCommentIP = "comment_ip"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldAgent holds the string denoting the agent field in the database.
	FieldAgent = "agent"
	// Table holds the table name of the scacommentreply in the database.
	Table = "sca_comment_reply"
)

// Columns holds all SQL columns for scacommentreply fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeleted,
	FieldUserID,
	FieldTopicID,
	FieldTopicType,
	FieldContent,
	FieldCommentType,
	FieldReplyTo,
	FieldReplyID,
	FieldReplyUser,
	FieldAuthor,
	FieldLikes,
	FieldReplyCount,
	FieldBrowser,
	FieldOperatingSystem,
	FieldCommentIP,
	FieldLocation,
	FieldAgent,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeleted holds the default value on creation for the "deleted" field.
	DefaultDeleted int8
	// DeletedValidator is a validator for the "deleted" field. It is called by the builders before save.
	DeletedValidator func(int8) error
	// DefaultAuthor holds the default value on creation for the "author" field.
	DefaultAuthor int
	// DefaultLikes holds the default value on creation for the "likes" field.
	DefaultLikes int64
	// DefaultReplyCount holds the default value on creation for the "reply_count" field.
	DefaultReplyCount int64
	// AgentValidator is a validator for the "agent" field. It is called by the builders before save.
	AgentValidator func(string) error
)

// OrderOption defines the ordering options for the ScaCommentReply queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeleted orders the results by the deleted field.
func ByDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleted, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTopicID orders the results by the topic_id field.
func ByTopicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopicID, opts...).ToFunc()
}

// ByTopicType orders the results by the topic_type field.
func ByTopicType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopicType, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByCommentType orders the results by the comment_type field.
func ByCommentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommentType, opts...).ToFunc()
}

// ByReplyTo orders the results by the reply_to field.
func ByReplyTo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReplyTo, opts...).ToFunc()
}

// ByReplyID orders the results by the reply_id field.
func ByReplyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReplyID, opts...).ToFunc()
}

// ByReplyUser orders the results by the reply_user field.
func ByReplyUser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReplyUser, opts...).ToFunc()
}

// ByAuthor orders the results by the author field.
func ByAuthor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthor, opts...).ToFunc()
}

// ByLikes orders the results by the likes field.
func ByLikes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikes, opts...).ToFunc()
}

// ByReplyCount orders the results by the reply_count field.
func ByReplyCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReplyCount, opts...).ToFunc()
}

// ByBrowser orders the results by the browser field.
func ByBrowser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrowser, opts...).ToFunc()
}

// ByOperatingSystem orders the results by the operating_system field.
func ByOperatingSystem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperatingSystem, opts...).ToFunc()
}

// ByCommentIP orders the results by the comment_ip field.
func ByCommentIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommentIP, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByAgent orders the results by the agent field.
func ByAgent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgent, opts...).ToFunc()
}
