// Code generated by ent, DO NOT EDIT.

package scacommentreply

import (
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldUpdatedAt, v))
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v int8) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldDeleted, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldUserID, v))
}

// TopicID applies equality check predicate on the "topic_id" field. It's identical to TopicIDEQ.
func TopicID(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldTopicID, v))
}

// TopicType applies equality check predicate on the "topic_type" field. It's identical to TopicTypeEQ.
func TopicType(v int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldTopicType, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldContent, v))
}

// CommentType applies equality check predicate on the "comment_type" field. It's identical to CommentTypeEQ.
func CommentType(v int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldCommentType, v))
}

// ReplyTo applies equality check predicate on the "reply_to" field. It's identical to ReplyToEQ.
func ReplyTo(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldReplyTo, v))
}

// ReplyID applies equality check predicate on the "reply_id" field. It's identical to ReplyIDEQ.
func ReplyID(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldReplyID, v))
}

// ReplyUser applies equality check predicate on the "reply_user" field. It's identical to ReplyUserEQ.
func ReplyUser(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldReplyUser, v))
}

// Author applies equality check predicate on the "author" field. It's identical to AuthorEQ.
func Author(v int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldAuthor, v))
}

// Likes applies equality check predicate on the "likes" field. It's identical to LikesEQ.
func Likes(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldLikes, v))
}

// ReplyCount applies equality check predicate on the "reply_count" field. It's identical to ReplyCountEQ.
func ReplyCount(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldReplyCount, v))
}

// Browser applies equality check predicate on the "browser" field. It's identical to BrowserEQ.
func Browser(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldBrowser, v))
}

// OperatingSystem applies equality check predicate on the "operating_system" field. It's identical to OperatingSystemEQ.
func OperatingSystem(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldOperatingSystem, v))
}

// CommentIP applies equality check predicate on the "comment_ip" field. It's identical to CommentIPEQ.
func CommentIP(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldCommentIP, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldLocation, v))
}

// Agent applies equality check predicate on the "agent" field. It's identical to AgentEQ.
func Agent(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldAgent, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v int8) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldDeleted, v))
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v int8) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNEQ(FieldDeleted, v))
}

// DeletedIn applies the In predicate on the "deleted" field.
func DeletedIn(vs ...int8) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIn(FieldDeleted, vs...))
}

// DeletedNotIn applies the NotIn predicate on the "deleted" field.
func DeletedNotIn(vs ...int8) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotIn(FieldDeleted, vs...))
}

// DeletedGT applies the GT predicate on the "deleted" field.
func DeletedGT(v int8) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGT(FieldDeleted, v))
}

// DeletedGTE applies the GTE predicate on the "deleted" field.
func DeletedGTE(v int8) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGTE(FieldDeleted, v))
}

// DeletedLT applies the LT predicate on the "deleted" field.
func DeletedLT(v int8) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLT(FieldDeleted, v))
}

// DeletedLTE applies the LTE predicate on the "deleted" field.
func DeletedLTE(v int8) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLTE(FieldDeleted, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldContainsFold(FieldUserID, v))
}

// TopicIDEQ applies the EQ predicate on the "topic_id" field.
func TopicIDEQ(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldTopicID, v))
}

// TopicIDNEQ applies the NEQ predicate on the "topic_id" field.
func TopicIDNEQ(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNEQ(FieldTopicID, v))
}

// TopicIDIn applies the In predicate on the "topic_id" field.
func TopicIDIn(vs ...string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIn(FieldTopicID, vs...))
}

// TopicIDNotIn applies the NotIn predicate on the "topic_id" field.
func TopicIDNotIn(vs ...string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotIn(FieldTopicID, vs...))
}

// TopicIDGT applies the GT predicate on the "topic_id" field.
func TopicIDGT(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGT(FieldTopicID, v))
}

// TopicIDGTE applies the GTE predicate on the "topic_id" field.
func TopicIDGTE(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGTE(FieldTopicID, v))
}

// TopicIDLT applies the LT predicate on the "topic_id" field.
func TopicIDLT(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLT(FieldTopicID, v))
}

// TopicIDLTE applies the LTE predicate on the "topic_id" field.
func TopicIDLTE(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLTE(FieldTopicID, v))
}

// TopicIDContains applies the Contains predicate on the "topic_id" field.
func TopicIDContains(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldContains(FieldTopicID, v))
}

// TopicIDHasPrefix applies the HasPrefix predicate on the "topic_id" field.
func TopicIDHasPrefix(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldHasPrefix(FieldTopicID, v))
}

// TopicIDHasSuffix applies the HasSuffix predicate on the "topic_id" field.
func TopicIDHasSuffix(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldHasSuffix(FieldTopicID, v))
}

// TopicIDEqualFold applies the EqualFold predicate on the "topic_id" field.
func TopicIDEqualFold(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEqualFold(FieldTopicID, v))
}

// TopicIDContainsFold applies the ContainsFold predicate on the "topic_id" field.
func TopicIDContainsFold(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldContainsFold(FieldTopicID, v))
}

// TopicTypeEQ applies the EQ predicate on the "topic_type" field.
func TopicTypeEQ(v int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldTopicType, v))
}

// TopicTypeNEQ applies the NEQ predicate on the "topic_type" field.
func TopicTypeNEQ(v int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNEQ(FieldTopicType, v))
}

// TopicTypeIn applies the In predicate on the "topic_type" field.
func TopicTypeIn(vs ...int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIn(FieldTopicType, vs...))
}

// TopicTypeNotIn applies the NotIn predicate on the "topic_type" field.
func TopicTypeNotIn(vs ...int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotIn(FieldTopicType, vs...))
}

// TopicTypeGT applies the GT predicate on the "topic_type" field.
func TopicTypeGT(v int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGT(FieldTopicType, v))
}

// TopicTypeGTE applies the GTE predicate on the "topic_type" field.
func TopicTypeGTE(v int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGTE(FieldTopicType, v))
}

// TopicTypeLT applies the LT predicate on the "topic_type" field.
func TopicTypeLT(v int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLT(FieldTopicType, v))
}

// TopicTypeLTE applies the LTE predicate on the "topic_type" field.
func TopicTypeLTE(v int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLTE(FieldTopicType, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldContainsFold(FieldContent, v))
}

// CommentTypeEQ applies the EQ predicate on the "comment_type" field.
func CommentTypeEQ(v int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldCommentType, v))
}

// CommentTypeNEQ applies the NEQ predicate on the "comment_type" field.
func CommentTypeNEQ(v int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNEQ(FieldCommentType, v))
}

// CommentTypeIn applies the In predicate on the "comment_type" field.
func CommentTypeIn(vs ...int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIn(FieldCommentType, vs...))
}

// CommentTypeNotIn applies the NotIn predicate on the "comment_type" field.
func CommentTypeNotIn(vs ...int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotIn(FieldCommentType, vs...))
}

// CommentTypeGT applies the GT predicate on the "comment_type" field.
func CommentTypeGT(v int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGT(FieldCommentType, v))
}

// CommentTypeGTE applies the GTE predicate on the "comment_type" field.
func CommentTypeGTE(v int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGTE(FieldCommentType, v))
}

// CommentTypeLT applies the LT predicate on the "comment_type" field.
func CommentTypeLT(v int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLT(FieldCommentType, v))
}

// CommentTypeLTE applies the LTE predicate on the "comment_type" field.
func CommentTypeLTE(v int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLTE(FieldCommentType, v))
}

// ReplyToEQ applies the EQ predicate on the "reply_to" field.
func ReplyToEQ(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldReplyTo, v))
}

// ReplyToNEQ applies the NEQ predicate on the "reply_to" field.
func ReplyToNEQ(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNEQ(FieldReplyTo, v))
}

// ReplyToIn applies the In predicate on the "reply_to" field.
func ReplyToIn(vs ...int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIn(FieldReplyTo, vs...))
}

// ReplyToNotIn applies the NotIn predicate on the "reply_to" field.
func ReplyToNotIn(vs ...int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotIn(FieldReplyTo, vs...))
}

// ReplyToGT applies the GT predicate on the "reply_to" field.
func ReplyToGT(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGT(FieldReplyTo, v))
}

// ReplyToGTE applies the GTE predicate on the "reply_to" field.
func ReplyToGTE(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGTE(FieldReplyTo, v))
}

// ReplyToLT applies the LT predicate on the "reply_to" field.
func ReplyToLT(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLT(FieldReplyTo, v))
}

// ReplyToLTE applies the LTE predicate on the "reply_to" field.
func ReplyToLTE(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLTE(FieldReplyTo, v))
}

// ReplyToIsNil applies the IsNil predicate on the "reply_to" field.
func ReplyToIsNil() predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIsNull(FieldReplyTo))
}

// ReplyToNotNil applies the NotNil predicate on the "reply_to" field.
func ReplyToNotNil() predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotNull(FieldReplyTo))
}

// ReplyIDEQ applies the EQ predicate on the "reply_id" field.
func ReplyIDEQ(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldReplyID, v))
}

// ReplyIDNEQ applies the NEQ predicate on the "reply_id" field.
func ReplyIDNEQ(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNEQ(FieldReplyID, v))
}

// ReplyIDIn applies the In predicate on the "reply_id" field.
func ReplyIDIn(vs ...int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIn(FieldReplyID, vs...))
}

// ReplyIDNotIn applies the NotIn predicate on the "reply_id" field.
func ReplyIDNotIn(vs ...int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotIn(FieldReplyID, vs...))
}

// ReplyIDGT applies the GT predicate on the "reply_id" field.
func ReplyIDGT(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGT(FieldReplyID, v))
}

// ReplyIDGTE applies the GTE predicate on the "reply_id" field.
func ReplyIDGTE(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGTE(FieldReplyID, v))
}

// ReplyIDLT applies the LT predicate on the "reply_id" field.
func ReplyIDLT(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLT(FieldReplyID, v))
}

// ReplyIDLTE applies the LTE predicate on the "reply_id" field.
func ReplyIDLTE(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLTE(FieldReplyID, v))
}

// ReplyIDIsNil applies the IsNil predicate on the "reply_id" field.
func ReplyIDIsNil() predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIsNull(FieldReplyID))
}

// ReplyIDNotNil applies the NotNil predicate on the "reply_id" field.
func ReplyIDNotNil() predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotNull(FieldReplyID))
}

// ReplyUserEQ applies the EQ predicate on the "reply_user" field.
func ReplyUserEQ(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldReplyUser, v))
}

// ReplyUserNEQ applies the NEQ predicate on the "reply_user" field.
func ReplyUserNEQ(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNEQ(FieldReplyUser, v))
}

// ReplyUserIn applies the In predicate on the "reply_user" field.
func ReplyUserIn(vs ...string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIn(FieldReplyUser, vs...))
}

// ReplyUserNotIn applies the NotIn predicate on the "reply_user" field.
func ReplyUserNotIn(vs ...string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotIn(FieldReplyUser, vs...))
}

// ReplyUserGT applies the GT predicate on the "reply_user" field.
func ReplyUserGT(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGT(FieldReplyUser, v))
}

// ReplyUserGTE applies the GTE predicate on the "reply_user" field.
func ReplyUserGTE(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGTE(FieldReplyUser, v))
}

// ReplyUserLT applies the LT predicate on the "reply_user" field.
func ReplyUserLT(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLT(FieldReplyUser, v))
}

// ReplyUserLTE applies the LTE predicate on the "reply_user" field.
func ReplyUserLTE(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLTE(FieldReplyUser, v))
}

// ReplyUserContains applies the Contains predicate on the "reply_user" field.
func ReplyUserContains(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldContains(FieldReplyUser, v))
}

// ReplyUserHasPrefix applies the HasPrefix predicate on the "reply_user" field.
func ReplyUserHasPrefix(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldHasPrefix(FieldReplyUser, v))
}

// ReplyUserHasSuffix applies the HasSuffix predicate on the "reply_user" field.
func ReplyUserHasSuffix(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldHasSuffix(FieldReplyUser, v))
}

// ReplyUserIsNil applies the IsNil predicate on the "reply_user" field.
func ReplyUserIsNil() predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIsNull(FieldReplyUser))
}

// ReplyUserNotNil applies the NotNil predicate on the "reply_user" field.
func ReplyUserNotNil() predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotNull(FieldReplyUser))
}

// ReplyUserEqualFold applies the EqualFold predicate on the "reply_user" field.
func ReplyUserEqualFold(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEqualFold(FieldReplyUser, v))
}

// ReplyUserContainsFold applies the ContainsFold predicate on the "reply_user" field.
func ReplyUserContainsFold(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldContainsFold(FieldReplyUser, v))
}

// AuthorEQ applies the EQ predicate on the "author" field.
func AuthorEQ(v int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldAuthor, v))
}

// AuthorNEQ applies the NEQ predicate on the "author" field.
func AuthorNEQ(v int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNEQ(FieldAuthor, v))
}

// AuthorIn applies the In predicate on the "author" field.
func AuthorIn(vs ...int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIn(FieldAuthor, vs...))
}

// AuthorNotIn applies the NotIn predicate on the "author" field.
func AuthorNotIn(vs ...int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotIn(FieldAuthor, vs...))
}

// AuthorGT applies the GT predicate on the "author" field.
func AuthorGT(v int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGT(FieldAuthor, v))
}

// AuthorGTE applies the GTE predicate on the "author" field.
func AuthorGTE(v int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGTE(FieldAuthor, v))
}

// AuthorLT applies the LT predicate on the "author" field.
func AuthorLT(v int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLT(FieldAuthor, v))
}

// AuthorLTE applies the LTE predicate on the "author" field.
func AuthorLTE(v int) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLTE(FieldAuthor, v))
}

// LikesEQ applies the EQ predicate on the "likes" field.
func LikesEQ(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldLikes, v))
}

// LikesNEQ applies the NEQ predicate on the "likes" field.
func LikesNEQ(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNEQ(FieldLikes, v))
}

// LikesIn applies the In predicate on the "likes" field.
func LikesIn(vs ...int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIn(FieldLikes, vs...))
}

// LikesNotIn applies the NotIn predicate on the "likes" field.
func LikesNotIn(vs ...int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotIn(FieldLikes, vs...))
}

// LikesGT applies the GT predicate on the "likes" field.
func LikesGT(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGT(FieldLikes, v))
}

// LikesGTE applies the GTE predicate on the "likes" field.
func LikesGTE(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGTE(FieldLikes, v))
}

// LikesLT applies the LT predicate on the "likes" field.
func LikesLT(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLT(FieldLikes, v))
}

// LikesLTE applies the LTE predicate on the "likes" field.
func LikesLTE(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLTE(FieldLikes, v))
}

// LikesIsNil applies the IsNil predicate on the "likes" field.
func LikesIsNil() predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIsNull(FieldLikes))
}

// LikesNotNil applies the NotNil predicate on the "likes" field.
func LikesNotNil() predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotNull(FieldLikes))
}

// ReplyCountEQ applies the EQ predicate on the "reply_count" field.
func ReplyCountEQ(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldReplyCount, v))
}

// ReplyCountNEQ applies the NEQ predicate on the "reply_count" field.
func ReplyCountNEQ(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNEQ(FieldReplyCount, v))
}

// ReplyCountIn applies the In predicate on the "reply_count" field.
func ReplyCountIn(vs ...int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIn(FieldReplyCount, vs...))
}

// ReplyCountNotIn applies the NotIn predicate on the "reply_count" field.
func ReplyCountNotIn(vs ...int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotIn(FieldReplyCount, vs...))
}

// ReplyCountGT applies the GT predicate on the "reply_count" field.
func ReplyCountGT(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGT(FieldReplyCount, v))
}

// ReplyCountGTE applies the GTE predicate on the "reply_count" field.
func ReplyCountGTE(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGTE(FieldReplyCount, v))
}

// ReplyCountLT applies the LT predicate on the "reply_count" field.
func ReplyCountLT(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLT(FieldReplyCount, v))
}

// ReplyCountLTE applies the LTE predicate on the "reply_count" field.
func ReplyCountLTE(v int64) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLTE(FieldReplyCount, v))
}

// ReplyCountIsNil applies the IsNil predicate on the "reply_count" field.
func ReplyCountIsNil() predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIsNull(FieldReplyCount))
}

// ReplyCountNotNil applies the NotNil predicate on the "reply_count" field.
func ReplyCountNotNil() predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotNull(FieldReplyCount))
}

// BrowserEQ applies the EQ predicate on the "browser" field.
func BrowserEQ(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldBrowser, v))
}

// BrowserNEQ applies the NEQ predicate on the "browser" field.
func BrowserNEQ(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNEQ(FieldBrowser, v))
}

// BrowserIn applies the In predicate on the "browser" field.
func BrowserIn(vs ...string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIn(FieldBrowser, vs...))
}

// BrowserNotIn applies the NotIn predicate on the "browser" field.
func BrowserNotIn(vs ...string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotIn(FieldBrowser, vs...))
}

// BrowserGT applies the GT predicate on the "browser" field.
func BrowserGT(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGT(FieldBrowser, v))
}

// BrowserGTE applies the GTE predicate on the "browser" field.
func BrowserGTE(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGTE(FieldBrowser, v))
}

// BrowserLT applies the LT predicate on the "browser" field.
func BrowserLT(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLT(FieldBrowser, v))
}

// BrowserLTE applies the LTE predicate on the "browser" field.
func BrowserLTE(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLTE(FieldBrowser, v))
}

// BrowserContains applies the Contains predicate on the "browser" field.
func BrowserContains(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldContains(FieldBrowser, v))
}

// BrowserHasPrefix applies the HasPrefix predicate on the "browser" field.
func BrowserHasPrefix(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldHasPrefix(FieldBrowser, v))
}

// BrowserHasSuffix applies the HasSuffix predicate on the "browser" field.
func BrowserHasSuffix(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldHasSuffix(FieldBrowser, v))
}

// BrowserEqualFold applies the EqualFold predicate on the "browser" field.
func BrowserEqualFold(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEqualFold(FieldBrowser, v))
}

// BrowserContainsFold applies the ContainsFold predicate on the "browser" field.
func BrowserContainsFold(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldContainsFold(FieldBrowser, v))
}

// OperatingSystemEQ applies the EQ predicate on the "operating_system" field.
func OperatingSystemEQ(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldOperatingSystem, v))
}

// OperatingSystemNEQ applies the NEQ predicate on the "operating_system" field.
func OperatingSystemNEQ(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNEQ(FieldOperatingSystem, v))
}

// OperatingSystemIn applies the In predicate on the "operating_system" field.
func OperatingSystemIn(vs ...string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIn(FieldOperatingSystem, vs...))
}

// OperatingSystemNotIn applies the NotIn predicate on the "operating_system" field.
func OperatingSystemNotIn(vs ...string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotIn(FieldOperatingSystem, vs...))
}

// OperatingSystemGT applies the GT predicate on the "operating_system" field.
func OperatingSystemGT(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGT(FieldOperatingSystem, v))
}

// OperatingSystemGTE applies the GTE predicate on the "operating_system" field.
func OperatingSystemGTE(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGTE(FieldOperatingSystem, v))
}

// OperatingSystemLT applies the LT predicate on the "operating_system" field.
func OperatingSystemLT(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLT(FieldOperatingSystem, v))
}

// OperatingSystemLTE applies the LTE predicate on the "operating_system" field.
func OperatingSystemLTE(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLTE(FieldOperatingSystem, v))
}

// OperatingSystemContains applies the Contains predicate on the "operating_system" field.
func OperatingSystemContains(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldContains(FieldOperatingSystem, v))
}

// OperatingSystemHasPrefix applies the HasPrefix predicate on the "operating_system" field.
func OperatingSystemHasPrefix(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldHasPrefix(FieldOperatingSystem, v))
}

// OperatingSystemHasSuffix applies the HasSuffix predicate on the "operating_system" field.
func OperatingSystemHasSuffix(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldHasSuffix(FieldOperatingSystem, v))
}

// OperatingSystemEqualFold applies the EqualFold predicate on the "operating_system" field.
func OperatingSystemEqualFold(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEqualFold(FieldOperatingSystem, v))
}

// OperatingSystemContainsFold applies the ContainsFold predicate on the "operating_system" field.
func OperatingSystemContainsFold(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldContainsFold(FieldOperatingSystem, v))
}

// CommentIPEQ applies the EQ predicate on the "comment_ip" field.
func CommentIPEQ(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldCommentIP, v))
}

// CommentIPNEQ applies the NEQ predicate on the "comment_ip" field.
func CommentIPNEQ(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNEQ(FieldCommentIP, v))
}

// CommentIPIn applies the In predicate on the "comment_ip" field.
func CommentIPIn(vs ...string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIn(FieldCommentIP, vs...))
}

// CommentIPNotIn applies the NotIn predicate on the "comment_ip" field.
func CommentIPNotIn(vs ...string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotIn(FieldCommentIP, vs...))
}

// CommentIPGT applies the GT predicate on the "comment_ip" field.
func CommentIPGT(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGT(FieldCommentIP, v))
}

// CommentIPGTE applies the GTE predicate on the "comment_ip" field.
func CommentIPGTE(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGTE(FieldCommentIP, v))
}

// CommentIPLT applies the LT predicate on the "comment_ip" field.
func CommentIPLT(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLT(FieldCommentIP, v))
}

// CommentIPLTE applies the LTE predicate on the "comment_ip" field.
func CommentIPLTE(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLTE(FieldCommentIP, v))
}

// CommentIPContains applies the Contains predicate on the "comment_ip" field.
func CommentIPContains(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldContains(FieldCommentIP, v))
}

// CommentIPHasPrefix applies the HasPrefix predicate on the "comment_ip" field.
func CommentIPHasPrefix(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldHasPrefix(FieldCommentIP, v))
}

// CommentIPHasSuffix applies the HasSuffix predicate on the "comment_ip" field.
func CommentIPHasSuffix(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldHasSuffix(FieldCommentIP, v))
}

// CommentIPEqualFold applies the EqualFold predicate on the "comment_ip" field.
func CommentIPEqualFold(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEqualFold(FieldCommentIP, v))
}

// CommentIPContainsFold applies the ContainsFold predicate on the "comment_ip" field.
func CommentIPContainsFold(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldContainsFold(FieldCommentIP, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldContainsFold(FieldLocation, v))
}

// AgentEQ applies the EQ predicate on the "agent" field.
func AgentEQ(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEQ(FieldAgent, v))
}

// AgentNEQ applies the NEQ predicate on the "agent" field.
func AgentNEQ(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNEQ(FieldAgent, v))
}

// AgentIn applies the In predicate on the "agent" field.
func AgentIn(vs ...string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldIn(FieldAgent, vs...))
}

// AgentNotIn applies the NotIn predicate on the "agent" field.
func AgentNotIn(vs ...string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldNotIn(FieldAgent, vs...))
}

// AgentGT applies the GT predicate on the "agent" field.
func AgentGT(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGT(FieldAgent, v))
}

// AgentGTE applies the GTE predicate on the "agent" field.
func AgentGTE(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldGTE(FieldAgent, v))
}

// AgentLT applies the LT predicate on the "agent" field.
func AgentLT(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLT(FieldAgent, v))
}

// AgentLTE applies the LTE predicate on the "agent" field.
func AgentLTE(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldLTE(FieldAgent, v))
}

// AgentContains applies the Contains predicate on the "agent" field.
func AgentContains(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldContains(FieldAgent, v))
}

// AgentHasPrefix applies the HasPrefix predicate on the "agent" field.
func AgentHasPrefix(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldHasPrefix(FieldAgent, v))
}

// AgentHasSuffix applies the HasSuffix predicate on the "agent" field.
func AgentHasSuffix(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldHasSuffix(FieldAgent, v))
}

// AgentEqualFold applies the EqualFold predicate on the "agent" field.
func AgentEqualFold(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldEqualFold(FieldAgent, v))
}

// AgentContainsFold applies the ContainsFold predicate on the "agent" field.
func AgentContainsFold(v string) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.FieldContainsFold(FieldAgent, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScaCommentReply) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScaCommentReply) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScaCommentReply) predicate.ScaCommentReply {
	return predicate.ScaCommentReply(sql.NotPredicates(p))
}
