// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/predicate"
	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/ent/scacommentmessage"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScaCommentMessageUpdate is the builder for updating ScaCommentMessage entities.
type ScaCommentMessageUpdate struct {
	config
	hooks    []Hook
	mutation *ScaCommentMessageMutation
}

// Where appends a list predicates to the ScaCommentMessageUpdate builder.
func (scmu *ScaCommentMessageUpdate) Where(ps ...predicate.ScaCommentMessage) *ScaCommentMessageUpdate {
	scmu.mutation.Where(ps...)
	return scmu
}

// SetUpdatedAt sets the "updated_at" field.
func (scmu *ScaCommentMessageUpdate) SetUpdatedAt(t time.Time) *ScaCommentMessageUpdate {
	scmu.mutation.SetUpdatedAt(t)
	return scmu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (scmu *ScaCommentMessageUpdate) ClearUpdatedAt() *ScaCommentMessageUpdate {
	scmu.mutation.ClearUpdatedAt()
	return scmu
}

// SetDeleted sets the "deleted" field.
func (scmu *ScaCommentMessageUpdate) SetDeleted(i int8) *ScaCommentMessageUpdate {
	scmu.mutation.ResetDeleted()
	scmu.mutation.SetDeleted(i)
	return scmu
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (scmu *ScaCommentMessageUpdate) SetNillableDeleted(i *int8) *ScaCommentMessageUpdate {
	if i != nil {
		scmu.SetDeleted(*i)
	}
	return scmu
}

// AddDeleted adds i to the "deleted" field.
func (scmu *ScaCommentMessageUpdate) AddDeleted(i int8) *ScaCommentMessageUpdate {
	scmu.mutation.AddDeleted(i)
	return scmu
}

// SetTopicID sets the "topic_id" field.
func (scmu *ScaCommentMessageUpdate) SetTopicID(s string) *ScaCommentMessageUpdate {
	scmu.mutation.SetTopicID(s)
	return scmu
}

// SetNillableTopicID sets the "topic_id" field if the given value is not nil.
func (scmu *ScaCommentMessageUpdate) SetNillableTopicID(s *string) *ScaCommentMessageUpdate {
	if s != nil {
		scmu.SetTopicID(*s)
	}
	return scmu
}

// SetFromID sets the "from_id" field.
func (scmu *ScaCommentMessageUpdate) SetFromID(s string) *ScaCommentMessageUpdate {
	scmu.mutation.SetFromID(s)
	return scmu
}

// SetNillableFromID sets the "from_id" field if the given value is not nil.
func (scmu *ScaCommentMessageUpdate) SetNillableFromID(s *string) *ScaCommentMessageUpdate {
	if s != nil {
		scmu.SetFromID(*s)
	}
	return scmu
}

// SetToID sets the "to_id" field.
func (scmu *ScaCommentMessageUpdate) SetToID(s string) *ScaCommentMessageUpdate {
	scmu.mutation.SetToID(s)
	return scmu
}

// SetNillableToID sets the "to_id" field if the given value is not nil.
func (scmu *ScaCommentMessageUpdate) SetNillableToID(s *string) *ScaCommentMessageUpdate {
	if s != nil {
		scmu.SetToID(*s)
	}
	return scmu
}

// SetContent sets the "content" field.
func (scmu *ScaCommentMessageUpdate) SetContent(s string) *ScaCommentMessageUpdate {
	scmu.mutation.SetContent(s)
	return scmu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (scmu *ScaCommentMessageUpdate) SetNillableContent(s *string) *ScaCommentMessageUpdate {
	if s != nil {
		scmu.SetContent(*s)
	}
	return scmu
}

// SetIsRead sets the "is_read" field.
func (scmu *ScaCommentMessageUpdate) SetIsRead(i int) *ScaCommentMessageUpdate {
	scmu.mutation.ResetIsRead()
	scmu.mutation.SetIsRead(i)
	return scmu
}

// SetNillableIsRead sets the "is_read" field if the given value is not nil.
func (scmu *ScaCommentMessageUpdate) SetNillableIsRead(i *int) *ScaCommentMessageUpdate {
	if i != nil {
		scmu.SetIsRead(*i)
	}
	return scmu
}

// AddIsRead adds i to the "is_read" field.
func (scmu *ScaCommentMessageUpdate) AddIsRead(i int) *ScaCommentMessageUpdate {
	scmu.mutation.AddIsRead(i)
	return scmu
}

// ClearIsRead clears the value of the "is_read" field.
func (scmu *ScaCommentMessageUpdate) ClearIsRead() *ScaCommentMessageUpdate {
	scmu.mutation.ClearIsRead()
	return scmu
}

// Mutation returns the ScaCommentMessageMutation object of the builder.
func (scmu *ScaCommentMessageUpdate) Mutation() *ScaCommentMessageMutation {
	return scmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scmu *ScaCommentMessageUpdate) Save(ctx context.Context) (int, error) {
	scmu.defaults()
	return withHooks(ctx, scmu.sqlSave, scmu.mutation, scmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scmu *ScaCommentMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := scmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scmu *ScaCommentMessageUpdate) Exec(ctx context.Context) error {
	_, err := scmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scmu *ScaCommentMessageUpdate) ExecX(ctx context.Context) {
	if err := scmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scmu *ScaCommentMessageUpdate) defaults() {
	if _, ok := scmu.mutation.UpdatedAt(); !ok && !scmu.mutation.UpdatedAtCleared() {
		v := scacommentmessage.UpdateDefaultUpdatedAt()
		scmu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scmu *ScaCommentMessageUpdate) check() error {
	if v, ok := scmu.mutation.Deleted(); ok {
		if err := scacommentmessage.DeletedValidator(v); err != nil {
			return &ValidationError{Name: "deleted", err: fmt.Errorf(`ent: validator failed for field "ScaCommentMessage.deleted": %w`, err)}
		}
	}
	return nil
}

func (scmu *ScaCommentMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := scmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(scacommentmessage.Table, scacommentmessage.Columns, sqlgraph.NewFieldSpec(scacommentmessage.FieldID, field.TypeInt64))
	if ps := scmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scmu.mutation.UpdatedAt(); ok {
		_spec.SetField(scacommentmessage.FieldUpdatedAt, field.TypeTime, value)
	}
	if scmu.mutation.UpdatedAtCleared() {
		_spec.ClearField(scacommentmessage.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := scmu.mutation.Deleted(); ok {
		_spec.SetField(scacommentmessage.FieldDeleted, field.TypeInt8, value)
	}
	if value, ok := scmu.mutation.AddedDeleted(); ok {
		_spec.AddField(scacommentmessage.FieldDeleted, field.TypeInt8, value)
	}
	if value, ok := scmu.mutation.TopicID(); ok {
		_spec.SetField(scacommentmessage.FieldTopicID, field.TypeString, value)
	}
	if value, ok := scmu.mutation.FromID(); ok {
		_spec.SetField(scacommentmessage.FieldFromID, field.TypeString, value)
	}
	if value, ok := scmu.mutation.ToID(); ok {
		_spec.SetField(scacommentmessage.FieldToID, field.TypeString, value)
	}
	if value, ok := scmu.mutation.Content(); ok {
		_spec.SetField(scacommentmessage.FieldContent, field.TypeString, value)
	}
	if value, ok := scmu.mutation.IsRead(); ok {
		_spec.SetField(scacommentmessage.FieldIsRead, field.TypeInt, value)
	}
	if value, ok := scmu.mutation.AddedIsRead(); ok {
		_spec.AddField(scacommentmessage.FieldIsRead, field.TypeInt, value)
	}
	if scmu.mutation.IsReadCleared() {
		_spec.ClearField(scacommentmessage.FieldIsRead, field.TypeInt)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scacommentmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scmu.mutation.done = true
	return n, nil
}

// ScaCommentMessageUpdateOne is the builder for updating a single ScaCommentMessage entity.
type ScaCommentMessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScaCommentMessageMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (scmuo *ScaCommentMessageUpdateOne) SetUpdatedAt(t time.Time) *ScaCommentMessageUpdateOne {
	scmuo.mutation.SetUpdatedAt(t)
	return scmuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (scmuo *ScaCommentMessageUpdateOne) ClearUpdatedAt() *ScaCommentMessageUpdateOne {
	scmuo.mutation.ClearUpdatedAt()
	return scmuo
}

// SetDeleted sets the "deleted" field.
func (scmuo *ScaCommentMessageUpdateOne) SetDeleted(i int8) *ScaCommentMessageUpdateOne {
	scmuo.mutation.ResetDeleted()
	scmuo.mutation.SetDeleted(i)
	return scmuo
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (scmuo *ScaCommentMessageUpdateOne) SetNillableDeleted(i *int8) *ScaCommentMessageUpdateOne {
	if i != nil {
		scmuo.SetDeleted(*i)
	}
	return scmuo
}

// AddDeleted adds i to the "deleted" field.
func (scmuo *ScaCommentMessageUpdateOne) AddDeleted(i int8) *ScaCommentMessageUpdateOne {
	scmuo.mutation.AddDeleted(i)
	return scmuo
}

// SetTopicID sets the "topic_id" field.
func (scmuo *ScaCommentMessageUpdateOne) SetTopicID(s string) *ScaCommentMessageUpdateOne {
	scmuo.mutation.SetTopicID(s)
	return scmuo
}

// SetNillableTopicID sets the "topic_id" field if the given value is not nil.
func (scmuo *ScaCommentMessageUpdateOne) SetNillableTopicID(s *string) *ScaCommentMessageUpdateOne {
	if s != nil {
		scmuo.SetTopicID(*s)
	}
	return scmuo
}

// SetFromID sets the "from_id" field.
func (scmuo *ScaCommentMessageUpdateOne) SetFromID(s string) *ScaCommentMessageUpdateOne {
	scmuo.mutation.SetFromID(s)
	return scmuo
}

// SetNillableFromID sets the "from_id" field if the given value is not nil.
func (scmuo *ScaCommentMessageUpdateOne) SetNillableFromID(s *string) *ScaCommentMessageUpdateOne {
	if s != nil {
		scmuo.SetFromID(*s)
	}
	return scmuo
}

// SetToID sets the "to_id" field.
func (scmuo *ScaCommentMessageUpdateOne) SetToID(s string) *ScaCommentMessageUpdateOne {
	scmuo.mutation.SetToID(s)
	return scmuo
}

// SetNillableToID sets the "to_id" field if the given value is not nil.
func (scmuo *ScaCommentMessageUpdateOne) SetNillableToID(s *string) *ScaCommentMessageUpdateOne {
	if s != nil {
		scmuo.SetToID(*s)
	}
	return scmuo
}

// SetContent sets the "content" field.
func (scmuo *ScaCommentMessageUpdateOne) SetContent(s string) *ScaCommentMessageUpdateOne {
	scmuo.mutation.SetContent(s)
	return scmuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (scmuo *ScaCommentMessageUpdateOne) SetNillableContent(s *string) *ScaCommentMessageUpdateOne {
	if s != nil {
		scmuo.SetContent(*s)
	}
	return scmuo
}

// SetIsRead sets the "is_read" field.
func (scmuo *ScaCommentMessageUpdateOne) SetIsRead(i int) *ScaCommentMessageUpdateOne {
	scmuo.mutation.ResetIsRead()
	scmuo.mutation.SetIsRead(i)
	return scmuo
}

// SetNillableIsRead sets the "is_read" field if the given value is not nil.
func (scmuo *ScaCommentMessageUpdateOne) SetNillableIsRead(i *int) *ScaCommentMessageUpdateOne {
	if i != nil {
		scmuo.SetIsRead(*i)
	}
	return scmuo
}

// AddIsRead adds i to the "is_read" field.
func (scmuo *ScaCommentMessageUpdateOne) AddIsRead(i int) *ScaCommentMessageUpdateOne {
	scmuo.mutation.AddIsRead(i)
	return scmuo
}

// ClearIsRead clears the value of the "is_read" field.
func (scmuo *ScaCommentMessageUpdateOne) ClearIsRead() *ScaCommentMessageUpdateOne {
	scmuo.mutation.ClearIsRead()
	return scmuo
}

// Mutation returns the ScaCommentMessageMutation object of the builder.
func (scmuo *ScaCommentMessageUpdateOne) Mutation() *ScaCommentMessageMutation {
	return scmuo.mutation
}

// Where appends a list predicates to the ScaCommentMessageUpdate builder.
func (scmuo *ScaCommentMessageUpdateOne) Where(ps ...predicate.ScaCommentMessage) *ScaCommentMessageUpdateOne {
	scmuo.mutation.Where(ps...)
	return scmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scmuo *ScaCommentMessageUpdateOne) Select(field string, fields ...string) *ScaCommentMessageUpdateOne {
	scmuo.fields = append([]string{field}, fields...)
	return scmuo
}

// Save executes the query and returns the updated ScaCommentMessage entity.
func (scmuo *ScaCommentMessageUpdateOne) Save(ctx context.Context) (*ScaCommentMessage, error) {
	scmuo.defaults()
	return withHooks(ctx, scmuo.sqlSave, scmuo.mutation, scmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scmuo *ScaCommentMessageUpdateOne) SaveX(ctx context.Context) *ScaCommentMessage {
	node, err := scmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scmuo *ScaCommentMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := scmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scmuo *ScaCommentMessageUpdateOne) ExecX(ctx context.Context) {
	if err := scmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scmuo *ScaCommentMessageUpdateOne) defaults() {
	if _, ok := scmuo.mutation.UpdatedAt(); !ok && !scmuo.mutation.UpdatedAtCleared() {
		v := scacommentmessage.UpdateDefaultUpdatedAt()
		scmuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scmuo *ScaCommentMessageUpdateOne) check() error {
	if v, ok := scmuo.mutation.Deleted(); ok {
		if err := scacommentmessage.DeletedValidator(v); err != nil {
			return &ValidationError{Name: "deleted", err: fmt.Errorf(`ent: validator failed for field "ScaCommentMessage.deleted": %w`, err)}
		}
	}
	return nil
}

func (scmuo *ScaCommentMessageUpdateOne) sqlSave(ctx context.Context) (_node *ScaCommentMessage, err error) {
	if err := scmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scacommentmessage.Table, scacommentmessage.Columns, sqlgraph.NewFieldSpec(scacommentmessage.FieldID, field.TypeInt64))
	id, ok := scmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScaCommentMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scacommentmessage.FieldID)
		for _, f := range fields {
			if !scacommentmessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scacommentmessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(scacommentmessage.FieldUpdatedAt, field.TypeTime, value)
	}
	if scmuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(scacommentmessage.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := scmuo.mutation.Deleted(); ok {
		_spec.SetField(scacommentmessage.FieldDeleted, field.TypeInt8, value)
	}
	if value, ok := scmuo.mutation.AddedDeleted(); ok {
		_spec.AddField(scacommentmessage.FieldDeleted, field.TypeInt8, value)
	}
	if value, ok := scmuo.mutation.TopicID(); ok {
		_spec.SetField(scacommentmessage.FieldTopicID, field.TypeString, value)
	}
	if value, ok := scmuo.mutation.FromID(); ok {
		_spec.SetField(scacommentmessage.FieldFromID, field.TypeString, value)
	}
	if value, ok := scmuo.mutation.ToID(); ok {
		_spec.SetField(scacommentmessage.FieldToID, field.TypeString, value)
	}
	if value, ok := scmuo.mutation.Content(); ok {
		_spec.SetField(scacommentmessage.FieldContent, field.TypeString, value)
	}
	if value, ok := scmuo.mutation.IsRead(); ok {
		_spec.SetField(scacommentmessage.FieldIsRead, field.TypeInt, value)
	}
	if value, ok := scmuo.mutation.AddedIsRead(); ok {
		_spec.AddField(scacommentmessage.FieldIsRead, field.TypeInt, value)
	}
	if scmuo.mutation.IsReadCleared() {
		_spec.ClearField(scacommentmessage.FieldIsRead, field.TypeInt)
	}
	_node = &ScaCommentMessage{config: scmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scacommentmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scmuo.mutation.done = true
	return _node, nil
}
