// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/model"
)

func newScaFileInfo(db *gorm.DB, opts ...gen.DOOption) scaFileInfo {
	_scaFileInfo := scaFileInfo{}

	_scaFileInfo.scaFileInfoDo.UseDB(db, opts...)
	_scaFileInfo.scaFileInfoDo.UseModel(&model.ScaFileInfo{})

	tableName := _scaFileInfo.scaFileInfoDo.TableName()
	_scaFileInfo.ALL = field.NewAsterisk(tableName)
	_scaFileInfo.ID = field.NewInt64(tableName, "id")
	_scaFileInfo.FileName = field.NewString(tableName, "file_name")
	_scaFileInfo.FileSize = field.NewFloat64(tableName, "file_size")
	_scaFileInfo.FileTypeID = field.NewInt64(tableName, "file_type_id")
	_scaFileInfo.UploadTime = field.NewTime(tableName, "upload_time")
	_scaFileInfo.FolderID = field.NewInt64(tableName, "folder_id")
	_scaFileInfo.UserID = field.NewString(tableName, "user_id")
	_scaFileInfo.FileSource = field.NewInt64(tableName, "file_source")
	_scaFileInfo.Status = field.NewInt64(tableName, "status")
	_scaFileInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_scaFileInfo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_scaFileInfo.Deleted = field.NewInt64(tableName, "deleted")
	_scaFileInfo.DeletedAt = field.NewField(tableName, "deleted_at")

	_scaFileInfo.fillFieldMap()

	return _scaFileInfo
}

type scaFileInfo struct {
	scaFileInfoDo

	ALL        field.Asterisk
	ID         field.Int64   // 主键
	FileName   field.String  // 文件名
	FileSize   field.Float64 // 文件大小
	FileTypeID field.Int64   // 文件类型编号
	UploadTime field.Time    // 上传时间
	FolderID   field.Int64   // 文件夹编号
	UserID     field.String  // 用户编号
	FileSource field.Int64   // 文件来源 0 相册 1 评论
	Status     field.Int64   // 文件状态
	CreatedAt  field.Time    // 创建时间
	UpdatedAt  field.Time    // 更新时间
	Deleted    field.Int64   // 是否删除 0 未删除 1 已删除
	DeletedAt  field.Field   // 删除时间

	fieldMap map[string]field.Expr
}

func (s scaFileInfo) Table(newTableName string) *scaFileInfo {
	s.scaFileInfoDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scaFileInfo) As(alias string) *scaFileInfo {
	s.scaFileInfoDo.DO = *(s.scaFileInfoDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scaFileInfo) updateTableName(table string) *scaFileInfo {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.FileName = field.NewString(table, "file_name")
	s.FileSize = field.NewFloat64(table, "file_size")
	s.FileTypeID = field.NewInt64(table, "file_type_id")
	s.UploadTime = field.NewTime(table, "upload_time")
	s.FolderID = field.NewInt64(table, "folder_id")
	s.UserID = field.NewString(table, "user_id")
	s.FileSource = field.NewInt64(table, "file_source")
	s.Status = field.NewInt64(table, "status")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.Deleted = field.NewInt64(table, "deleted")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *scaFileInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scaFileInfo) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["id"] = s.ID
	s.fieldMap["file_name"] = s.FileName
	s.fieldMap["file_size"] = s.FileSize
	s.fieldMap["file_type_id"] = s.FileTypeID
	s.fieldMap["upload_time"] = s.UploadTime
	s.fieldMap["folder_id"] = s.FolderID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["file_source"] = s.FileSource
	s.fieldMap["status"] = s.Status
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted"] = s.Deleted
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s scaFileInfo) clone(db *gorm.DB) scaFileInfo {
	s.scaFileInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scaFileInfo) replaceDB(db *gorm.DB) scaFileInfo {
	s.scaFileInfoDo.ReplaceDB(db)
	return s
}

type scaFileInfoDo struct{ gen.DO }

type IScaFileInfoDo interface {
	gen.SubQuery
	Debug() IScaFileInfoDo
	WithContext(ctx context.Context) IScaFileInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScaFileInfoDo
	WriteDB() IScaFileInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScaFileInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScaFileInfoDo
	Not(conds ...gen.Condition) IScaFileInfoDo
	Or(conds ...gen.Condition) IScaFileInfoDo
	Select(conds ...field.Expr) IScaFileInfoDo
	Where(conds ...gen.Condition) IScaFileInfoDo
	Order(conds ...field.Expr) IScaFileInfoDo
	Distinct(cols ...field.Expr) IScaFileInfoDo
	Omit(cols ...field.Expr) IScaFileInfoDo
	Join(table schema.Tabler, on ...field.Expr) IScaFileInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScaFileInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScaFileInfoDo
	Group(cols ...field.Expr) IScaFileInfoDo
	Having(conds ...gen.Condition) IScaFileInfoDo
	Limit(limit int) IScaFileInfoDo
	Offset(offset int) IScaFileInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScaFileInfoDo
	Unscoped() IScaFileInfoDo
	Create(values ...*model.ScaFileInfo) error
	CreateInBatches(values []*model.ScaFileInfo, batchSize int) error
	Save(values ...*model.ScaFileInfo) error
	First() (*model.ScaFileInfo, error)
	Take() (*model.ScaFileInfo, error)
	Last() (*model.ScaFileInfo, error)
	Find() ([]*model.ScaFileInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaFileInfo, err error)
	FindInBatches(result *[]*model.ScaFileInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScaFileInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScaFileInfoDo
	Assign(attrs ...field.AssignExpr) IScaFileInfoDo
	Joins(fields ...field.RelationField) IScaFileInfoDo
	Preload(fields ...field.RelationField) IScaFileInfoDo
	FirstOrInit() (*model.ScaFileInfo, error)
	FirstOrCreate() (*model.ScaFileInfo, error)
	FindByPage(offset int, limit int) (result []*model.ScaFileInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScaFileInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scaFileInfoDo) Debug() IScaFileInfoDo {
	return s.withDO(s.DO.Debug())
}

func (s scaFileInfoDo) WithContext(ctx context.Context) IScaFileInfoDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scaFileInfoDo) ReadDB() IScaFileInfoDo {
	return s.Clauses(dbresolver.Read)
}

func (s scaFileInfoDo) WriteDB() IScaFileInfoDo {
	return s.Clauses(dbresolver.Write)
}

func (s scaFileInfoDo) Session(config *gorm.Session) IScaFileInfoDo {
	return s.withDO(s.DO.Session(config))
}

func (s scaFileInfoDo) Clauses(conds ...clause.Expression) IScaFileInfoDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scaFileInfoDo) Returning(value interface{}, columns ...string) IScaFileInfoDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scaFileInfoDo) Not(conds ...gen.Condition) IScaFileInfoDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scaFileInfoDo) Or(conds ...gen.Condition) IScaFileInfoDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scaFileInfoDo) Select(conds ...field.Expr) IScaFileInfoDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scaFileInfoDo) Where(conds ...gen.Condition) IScaFileInfoDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scaFileInfoDo) Order(conds ...field.Expr) IScaFileInfoDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scaFileInfoDo) Distinct(cols ...field.Expr) IScaFileInfoDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scaFileInfoDo) Omit(cols ...field.Expr) IScaFileInfoDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scaFileInfoDo) Join(table schema.Tabler, on ...field.Expr) IScaFileInfoDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scaFileInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScaFileInfoDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scaFileInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IScaFileInfoDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scaFileInfoDo) Group(cols ...field.Expr) IScaFileInfoDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scaFileInfoDo) Having(conds ...gen.Condition) IScaFileInfoDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scaFileInfoDo) Limit(limit int) IScaFileInfoDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scaFileInfoDo) Offset(offset int) IScaFileInfoDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scaFileInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScaFileInfoDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scaFileInfoDo) Unscoped() IScaFileInfoDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scaFileInfoDo) Create(values ...*model.ScaFileInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scaFileInfoDo) CreateInBatches(values []*model.ScaFileInfo, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scaFileInfoDo) Save(values ...*model.ScaFileInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scaFileInfoDo) First() (*model.ScaFileInfo, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaFileInfo), nil
	}
}

func (s scaFileInfoDo) Take() (*model.ScaFileInfo, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaFileInfo), nil
	}
}

func (s scaFileInfoDo) Last() (*model.ScaFileInfo, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaFileInfo), nil
	}
}

func (s scaFileInfoDo) Find() ([]*model.ScaFileInfo, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScaFileInfo), err
}

func (s scaFileInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaFileInfo, err error) {
	buf := make([]*model.ScaFileInfo, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scaFileInfoDo) FindInBatches(result *[]*model.ScaFileInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scaFileInfoDo) Attrs(attrs ...field.AssignExpr) IScaFileInfoDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scaFileInfoDo) Assign(attrs ...field.AssignExpr) IScaFileInfoDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scaFileInfoDo) Joins(fields ...field.RelationField) IScaFileInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scaFileInfoDo) Preload(fields ...field.RelationField) IScaFileInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scaFileInfoDo) FirstOrInit() (*model.ScaFileInfo, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaFileInfo), nil
	}
}

func (s scaFileInfoDo) FirstOrCreate() (*model.ScaFileInfo, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaFileInfo), nil
	}
}

func (s scaFileInfoDo) FindByPage(offset int, limit int) (result []*model.ScaFileInfo, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scaFileInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scaFileInfoDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scaFileInfoDo) Delete(models ...*model.ScaFileInfo) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scaFileInfoDo) withDO(do gen.Dao) *scaFileInfoDo {
	s.DO = *do.(*gen.DO)
	return s
}
