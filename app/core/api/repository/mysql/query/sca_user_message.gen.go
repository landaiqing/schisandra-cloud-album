// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/model"
)

func newScaUserMessage(db *gorm.DB, opts ...gen.DOOption) scaUserMessage {
	_scaUserMessage := scaUserMessage{}

	_scaUserMessage.scaUserMessageDo.UseDB(db, opts...)
	_scaUserMessage.scaUserMessageDo.UseModel(&model.ScaUserMessage{})

	tableName := _scaUserMessage.scaUserMessageDo.TableName()
	_scaUserMessage.ALL = field.NewAsterisk(tableName)
	_scaUserMessage.ID = field.NewInt64(tableName, "id")
	_scaUserMessage.TopicID = field.NewString(tableName, "topic_id")
	_scaUserMessage.FromID = field.NewString(tableName, "from_id")
	_scaUserMessage.ToID = field.NewString(tableName, "to_id")
	_scaUserMessage.Content = field.NewString(tableName, "content")
	_scaUserMessage.IsRead = field.NewInt64(tableName, "is_read")
	_scaUserMessage.Deleted = field.NewInt64(tableName, "deleted")
	_scaUserMessage.CreatedAt = field.NewTime(tableName, "created_at")
	_scaUserMessage.UpdatedAt = field.NewTime(tableName, "updated_at")
	_scaUserMessage.DeletedAt = field.NewField(tableName, "deleted_at")

	_scaUserMessage.fillFieldMap()

	return _scaUserMessage
}

type scaUserMessage struct {
	scaUserMessageDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键
	TopicID   field.String // 话题Id
	FromID    field.String // 来自人
	ToID      field.String // 送达人
	Content   field.String // 消息内容
	IsRead    field.Int64  // 是否已读
	Deleted   field.Int64  // 是否删除 0 未删除 1 已删除
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s scaUserMessage) Table(newTableName string) *scaUserMessage {
	s.scaUserMessageDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scaUserMessage) As(alias string) *scaUserMessage {
	s.scaUserMessageDo.DO = *(s.scaUserMessageDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scaUserMessage) updateTableName(table string) *scaUserMessage {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.TopicID = field.NewString(table, "topic_id")
	s.FromID = field.NewString(table, "from_id")
	s.ToID = field.NewString(table, "to_id")
	s.Content = field.NewString(table, "content")
	s.IsRead = field.NewInt64(table, "is_read")
	s.Deleted = field.NewInt64(table, "deleted")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *scaUserMessage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scaUserMessage) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["topic_id"] = s.TopicID
	s.fieldMap["from_id"] = s.FromID
	s.fieldMap["to_id"] = s.ToID
	s.fieldMap["content"] = s.Content
	s.fieldMap["is_read"] = s.IsRead
	s.fieldMap["deleted"] = s.Deleted
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s scaUserMessage) clone(db *gorm.DB) scaUserMessage {
	s.scaUserMessageDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scaUserMessage) replaceDB(db *gorm.DB) scaUserMessage {
	s.scaUserMessageDo.ReplaceDB(db)
	return s
}

type scaUserMessageDo struct{ gen.DO }

type IScaUserMessageDo interface {
	gen.SubQuery
	Debug() IScaUserMessageDo
	WithContext(ctx context.Context) IScaUserMessageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScaUserMessageDo
	WriteDB() IScaUserMessageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScaUserMessageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScaUserMessageDo
	Not(conds ...gen.Condition) IScaUserMessageDo
	Or(conds ...gen.Condition) IScaUserMessageDo
	Select(conds ...field.Expr) IScaUserMessageDo
	Where(conds ...gen.Condition) IScaUserMessageDo
	Order(conds ...field.Expr) IScaUserMessageDo
	Distinct(cols ...field.Expr) IScaUserMessageDo
	Omit(cols ...field.Expr) IScaUserMessageDo
	Join(table schema.Tabler, on ...field.Expr) IScaUserMessageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScaUserMessageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScaUserMessageDo
	Group(cols ...field.Expr) IScaUserMessageDo
	Having(conds ...gen.Condition) IScaUserMessageDo
	Limit(limit int) IScaUserMessageDo
	Offset(offset int) IScaUserMessageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScaUserMessageDo
	Unscoped() IScaUserMessageDo
	Create(values ...*model.ScaUserMessage) error
	CreateInBatches(values []*model.ScaUserMessage, batchSize int) error
	Save(values ...*model.ScaUserMessage) error
	First() (*model.ScaUserMessage, error)
	Take() (*model.ScaUserMessage, error)
	Last() (*model.ScaUserMessage, error)
	Find() ([]*model.ScaUserMessage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaUserMessage, err error)
	FindInBatches(result *[]*model.ScaUserMessage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScaUserMessage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScaUserMessageDo
	Assign(attrs ...field.AssignExpr) IScaUserMessageDo
	Joins(fields ...field.RelationField) IScaUserMessageDo
	Preload(fields ...field.RelationField) IScaUserMessageDo
	FirstOrInit() (*model.ScaUserMessage, error)
	FirstOrCreate() (*model.ScaUserMessage, error)
	FindByPage(offset int, limit int) (result []*model.ScaUserMessage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScaUserMessageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scaUserMessageDo) Debug() IScaUserMessageDo {
	return s.withDO(s.DO.Debug())
}

func (s scaUserMessageDo) WithContext(ctx context.Context) IScaUserMessageDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scaUserMessageDo) ReadDB() IScaUserMessageDo {
	return s.Clauses(dbresolver.Read)
}

func (s scaUserMessageDo) WriteDB() IScaUserMessageDo {
	return s.Clauses(dbresolver.Write)
}

func (s scaUserMessageDo) Session(config *gorm.Session) IScaUserMessageDo {
	return s.withDO(s.DO.Session(config))
}

func (s scaUserMessageDo) Clauses(conds ...clause.Expression) IScaUserMessageDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scaUserMessageDo) Returning(value interface{}, columns ...string) IScaUserMessageDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scaUserMessageDo) Not(conds ...gen.Condition) IScaUserMessageDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scaUserMessageDo) Or(conds ...gen.Condition) IScaUserMessageDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scaUserMessageDo) Select(conds ...field.Expr) IScaUserMessageDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scaUserMessageDo) Where(conds ...gen.Condition) IScaUserMessageDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scaUserMessageDo) Order(conds ...field.Expr) IScaUserMessageDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scaUserMessageDo) Distinct(cols ...field.Expr) IScaUserMessageDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scaUserMessageDo) Omit(cols ...field.Expr) IScaUserMessageDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scaUserMessageDo) Join(table schema.Tabler, on ...field.Expr) IScaUserMessageDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scaUserMessageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScaUserMessageDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scaUserMessageDo) RightJoin(table schema.Tabler, on ...field.Expr) IScaUserMessageDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scaUserMessageDo) Group(cols ...field.Expr) IScaUserMessageDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scaUserMessageDo) Having(conds ...gen.Condition) IScaUserMessageDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scaUserMessageDo) Limit(limit int) IScaUserMessageDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scaUserMessageDo) Offset(offset int) IScaUserMessageDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scaUserMessageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScaUserMessageDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scaUserMessageDo) Unscoped() IScaUserMessageDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scaUserMessageDo) Create(values ...*model.ScaUserMessage) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scaUserMessageDo) CreateInBatches(values []*model.ScaUserMessage, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scaUserMessageDo) Save(values ...*model.ScaUserMessage) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scaUserMessageDo) First() (*model.ScaUserMessage, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaUserMessage), nil
	}
}

func (s scaUserMessageDo) Take() (*model.ScaUserMessage, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaUserMessage), nil
	}
}

func (s scaUserMessageDo) Last() (*model.ScaUserMessage, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaUserMessage), nil
	}
}

func (s scaUserMessageDo) Find() ([]*model.ScaUserMessage, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScaUserMessage), err
}

func (s scaUserMessageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaUserMessage, err error) {
	buf := make([]*model.ScaUserMessage, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scaUserMessageDo) FindInBatches(result *[]*model.ScaUserMessage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scaUserMessageDo) Attrs(attrs ...field.AssignExpr) IScaUserMessageDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scaUserMessageDo) Assign(attrs ...field.AssignExpr) IScaUserMessageDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scaUserMessageDo) Joins(fields ...field.RelationField) IScaUserMessageDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scaUserMessageDo) Preload(fields ...field.RelationField) IScaUserMessageDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scaUserMessageDo) FirstOrInit() (*model.ScaUserMessage, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaUserMessage), nil
	}
}

func (s scaUserMessageDo) FirstOrCreate() (*model.ScaUserMessage, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaUserMessage), nil
	}
}

func (s scaUserMessageDo) FindByPage(offset int, limit int) (result []*model.ScaUserMessage, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scaUserMessageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scaUserMessageDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scaUserMessageDo) Delete(models ...*model.ScaUserMessage) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scaUserMessageDo) withDO(do gen.Dao) *scaUserMessageDo {
	s.DO = *do.(*gen.DO)
	return s
}
