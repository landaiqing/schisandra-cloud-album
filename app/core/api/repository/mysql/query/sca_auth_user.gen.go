// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/model"
)

func newScaAuthUser(db *gorm.DB, opts ...gen.DOOption) scaAuthUser {
	_scaAuthUser := scaAuthUser{}

	_scaAuthUser.scaAuthUserDo.UseDB(db, opts...)
	_scaAuthUser.scaAuthUserDo.UseModel(&model.ScaAuthUser{})

	tableName := _scaAuthUser.scaAuthUserDo.TableName()
	_scaAuthUser.ALL = field.NewAsterisk(tableName)
	_scaAuthUser.ID = field.NewInt64(tableName, "id")
	_scaAuthUser.UID = field.NewString(tableName, "uid")
	_scaAuthUser.Username = field.NewString(tableName, "username")
	_scaAuthUser.Nickname = field.NewString(tableName, "nickname")
	_scaAuthUser.Email = field.NewString(tableName, "email")
	_scaAuthUser.Phone = field.NewString(tableName, "phone")
	_scaAuthUser.Password = field.NewString(tableName, "password")
	_scaAuthUser.Gender = field.NewInt64(tableName, "gender")
	_scaAuthUser.Avatar = field.NewString(tableName, "avatar")
	_scaAuthUser.Status = field.NewInt64(tableName, "status")
	_scaAuthUser.Introduce = field.NewString(tableName, "introduce")
	_scaAuthUser.CreatedAt = field.NewTime(tableName, "created_at")
	_scaAuthUser.Deleted = field.NewInt64(tableName, "deleted")
	_scaAuthUser.Blog = field.NewString(tableName, "blog")
	_scaAuthUser.Location = field.NewString(tableName, "location")
	_scaAuthUser.Company = field.NewString(tableName, "company")
	_scaAuthUser.UpdatedAt = field.NewTime(tableName, "updated_at")
	_scaAuthUser.DeletedAt = field.NewField(tableName, "deleted_at")

	_scaAuthUser.fillFieldMap()

	return _scaAuthUser
}

type scaAuthUser struct {
	scaAuthUserDo

	ALL       field.Asterisk
	ID        field.Int64  // 自增ID
	UID       field.String // 唯一ID
	Username  field.String // 用户名
	Nickname  field.String // 昵称
	Email     field.String // 邮箱
	Phone     field.String // 电话
	Password  field.String // 密码
	Gender    field.Int64  // 性别
	Avatar    field.String // 头像
	Status    field.Int64  // 状态 0 正常 1 封禁
	Introduce field.String // 介绍
	CreatedAt field.Time   // 创建时间
	Deleted   field.Int64  // 是否删除 0 未删除 1 已删除
	Blog      field.String // 博客
	Location  field.String // 地址
	Company   field.String // 公司
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s scaAuthUser) Table(newTableName string) *scaAuthUser {
	s.scaAuthUserDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scaAuthUser) As(alias string) *scaAuthUser {
	s.scaAuthUserDo.DO = *(s.scaAuthUserDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scaAuthUser) updateTableName(table string) *scaAuthUser {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UID = field.NewString(table, "uid")
	s.Username = field.NewString(table, "username")
	s.Nickname = field.NewString(table, "nickname")
	s.Email = field.NewString(table, "email")
	s.Phone = field.NewString(table, "phone")
	s.Password = field.NewString(table, "password")
	s.Gender = field.NewInt64(table, "gender")
	s.Avatar = field.NewString(table, "avatar")
	s.Status = field.NewInt64(table, "status")
	s.Introduce = field.NewString(table, "introduce")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.Deleted = field.NewInt64(table, "deleted")
	s.Blog = field.NewString(table, "blog")
	s.Location = field.NewString(table, "location")
	s.Company = field.NewString(table, "company")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *scaAuthUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scaAuthUser) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 18)
	s.fieldMap["id"] = s.ID
	s.fieldMap["uid"] = s.UID
	s.fieldMap["username"] = s.Username
	s.fieldMap["nickname"] = s.Nickname
	s.fieldMap["email"] = s.Email
	s.fieldMap["phone"] = s.Phone
	s.fieldMap["password"] = s.Password
	s.fieldMap["gender"] = s.Gender
	s.fieldMap["avatar"] = s.Avatar
	s.fieldMap["status"] = s.Status
	s.fieldMap["introduce"] = s.Introduce
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["deleted"] = s.Deleted
	s.fieldMap["blog"] = s.Blog
	s.fieldMap["location"] = s.Location
	s.fieldMap["company"] = s.Company
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s scaAuthUser) clone(db *gorm.DB) scaAuthUser {
	s.scaAuthUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scaAuthUser) replaceDB(db *gorm.DB) scaAuthUser {
	s.scaAuthUserDo.ReplaceDB(db)
	return s
}

type scaAuthUserDo struct{ gen.DO }

type IScaAuthUserDo interface {
	gen.SubQuery
	Debug() IScaAuthUserDo
	WithContext(ctx context.Context) IScaAuthUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScaAuthUserDo
	WriteDB() IScaAuthUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScaAuthUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScaAuthUserDo
	Not(conds ...gen.Condition) IScaAuthUserDo
	Or(conds ...gen.Condition) IScaAuthUserDo
	Select(conds ...field.Expr) IScaAuthUserDo
	Where(conds ...gen.Condition) IScaAuthUserDo
	Order(conds ...field.Expr) IScaAuthUserDo
	Distinct(cols ...field.Expr) IScaAuthUserDo
	Omit(cols ...field.Expr) IScaAuthUserDo
	Join(table schema.Tabler, on ...field.Expr) IScaAuthUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScaAuthUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScaAuthUserDo
	Group(cols ...field.Expr) IScaAuthUserDo
	Having(conds ...gen.Condition) IScaAuthUserDo
	Limit(limit int) IScaAuthUserDo
	Offset(offset int) IScaAuthUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScaAuthUserDo
	Unscoped() IScaAuthUserDo
	Create(values ...*model.ScaAuthUser) error
	CreateInBatches(values []*model.ScaAuthUser, batchSize int) error
	Save(values ...*model.ScaAuthUser) error
	First() (*model.ScaAuthUser, error)
	Take() (*model.ScaAuthUser, error)
	Last() (*model.ScaAuthUser, error)
	Find() ([]*model.ScaAuthUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaAuthUser, err error)
	FindInBatches(result *[]*model.ScaAuthUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScaAuthUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScaAuthUserDo
	Assign(attrs ...field.AssignExpr) IScaAuthUserDo
	Joins(fields ...field.RelationField) IScaAuthUserDo
	Preload(fields ...field.RelationField) IScaAuthUserDo
	FirstOrInit() (*model.ScaAuthUser, error)
	FirstOrCreate() (*model.ScaAuthUser, error)
	FindByPage(offset int, limit int) (result []*model.ScaAuthUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScaAuthUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scaAuthUserDo) Debug() IScaAuthUserDo {
	return s.withDO(s.DO.Debug())
}

func (s scaAuthUserDo) WithContext(ctx context.Context) IScaAuthUserDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scaAuthUserDo) ReadDB() IScaAuthUserDo {
	return s.Clauses(dbresolver.Read)
}

func (s scaAuthUserDo) WriteDB() IScaAuthUserDo {
	return s.Clauses(dbresolver.Write)
}

func (s scaAuthUserDo) Session(config *gorm.Session) IScaAuthUserDo {
	return s.withDO(s.DO.Session(config))
}

func (s scaAuthUserDo) Clauses(conds ...clause.Expression) IScaAuthUserDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scaAuthUserDo) Returning(value interface{}, columns ...string) IScaAuthUserDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scaAuthUserDo) Not(conds ...gen.Condition) IScaAuthUserDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scaAuthUserDo) Or(conds ...gen.Condition) IScaAuthUserDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scaAuthUserDo) Select(conds ...field.Expr) IScaAuthUserDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scaAuthUserDo) Where(conds ...gen.Condition) IScaAuthUserDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scaAuthUserDo) Order(conds ...field.Expr) IScaAuthUserDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scaAuthUserDo) Distinct(cols ...field.Expr) IScaAuthUserDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scaAuthUserDo) Omit(cols ...field.Expr) IScaAuthUserDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scaAuthUserDo) Join(table schema.Tabler, on ...field.Expr) IScaAuthUserDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scaAuthUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScaAuthUserDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scaAuthUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IScaAuthUserDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scaAuthUserDo) Group(cols ...field.Expr) IScaAuthUserDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scaAuthUserDo) Having(conds ...gen.Condition) IScaAuthUserDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scaAuthUserDo) Limit(limit int) IScaAuthUserDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scaAuthUserDo) Offset(offset int) IScaAuthUserDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scaAuthUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScaAuthUserDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scaAuthUserDo) Unscoped() IScaAuthUserDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scaAuthUserDo) Create(values ...*model.ScaAuthUser) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scaAuthUserDo) CreateInBatches(values []*model.ScaAuthUser, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scaAuthUserDo) Save(values ...*model.ScaAuthUser) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scaAuthUserDo) First() (*model.ScaAuthUser, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthUser), nil
	}
}

func (s scaAuthUserDo) Take() (*model.ScaAuthUser, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthUser), nil
	}
}

func (s scaAuthUserDo) Last() (*model.ScaAuthUser, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthUser), nil
	}
}

func (s scaAuthUserDo) Find() ([]*model.ScaAuthUser, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScaAuthUser), err
}

func (s scaAuthUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaAuthUser, err error) {
	buf := make([]*model.ScaAuthUser, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scaAuthUserDo) FindInBatches(result *[]*model.ScaAuthUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scaAuthUserDo) Attrs(attrs ...field.AssignExpr) IScaAuthUserDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scaAuthUserDo) Assign(attrs ...field.AssignExpr) IScaAuthUserDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scaAuthUserDo) Joins(fields ...field.RelationField) IScaAuthUserDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scaAuthUserDo) Preload(fields ...field.RelationField) IScaAuthUserDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scaAuthUserDo) FirstOrInit() (*model.ScaAuthUser, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthUser), nil
	}
}

func (s scaAuthUserDo) FirstOrCreate() (*model.ScaAuthUser, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthUser), nil
	}
}

func (s scaAuthUserDo) FindByPage(offset int, limit int) (result []*model.ScaAuthUser, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scaAuthUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scaAuthUserDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scaAuthUserDo) Delete(models ...*model.ScaAuthUser) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scaAuthUserDo) withDO(do gen.Dao) *scaAuthUserDo {
	s.DO = *do.(*gen.DO)
	return s
}
