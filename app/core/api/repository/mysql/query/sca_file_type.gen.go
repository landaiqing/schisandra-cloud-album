// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/model"
)

func newScaFileType(db *gorm.DB, opts ...gen.DOOption) scaFileType {
	_scaFileType := scaFileType{}

	_scaFileType.scaFileTypeDo.UseDB(db, opts...)
	_scaFileType.scaFileTypeDo.UseModel(&model.ScaFileType{})

	tableName := _scaFileType.scaFileTypeDo.TableName()
	_scaFileType.ALL = field.NewAsterisk(tableName)
	_scaFileType.ID = field.NewInt64(tableName, "id")
	_scaFileType.TypeName = field.NewString(tableName, "type_name")
	_scaFileType.MimeType = field.NewString(tableName, "mime_type")
	_scaFileType.Status = field.NewInt64(tableName, "status")
	_scaFileType.CreatedAt = field.NewTime(tableName, "created_at")
	_scaFileType.UpdatedAt = field.NewTime(tableName, "updated_at")
	_scaFileType.Deleted = field.NewInt64(tableName, "deleted")
	_scaFileType.DeletedAt = field.NewField(tableName, "deleted_at")

	_scaFileType.fillFieldMap()

	return _scaFileType
}

type scaFileType struct {
	scaFileTypeDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键
	TypeName  field.String // 类型名称
	MimeType  field.String // MIME 类型
	Status    field.Int64  // 类型状态
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	Deleted   field.Int64  // 是否删除 0 未删除 1 已删除
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s scaFileType) Table(newTableName string) *scaFileType {
	s.scaFileTypeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scaFileType) As(alias string) *scaFileType {
	s.scaFileTypeDo.DO = *(s.scaFileTypeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scaFileType) updateTableName(table string) *scaFileType {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.TypeName = field.NewString(table, "type_name")
	s.MimeType = field.NewString(table, "mime_type")
	s.Status = field.NewInt64(table, "status")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.Deleted = field.NewInt64(table, "deleted")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *scaFileType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scaFileType) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["type_name"] = s.TypeName
	s.fieldMap["mime_type"] = s.MimeType
	s.fieldMap["status"] = s.Status
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted"] = s.Deleted
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s scaFileType) clone(db *gorm.DB) scaFileType {
	s.scaFileTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scaFileType) replaceDB(db *gorm.DB) scaFileType {
	s.scaFileTypeDo.ReplaceDB(db)
	return s
}

type scaFileTypeDo struct{ gen.DO }

type IScaFileTypeDo interface {
	gen.SubQuery
	Debug() IScaFileTypeDo
	WithContext(ctx context.Context) IScaFileTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScaFileTypeDo
	WriteDB() IScaFileTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScaFileTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScaFileTypeDo
	Not(conds ...gen.Condition) IScaFileTypeDo
	Or(conds ...gen.Condition) IScaFileTypeDo
	Select(conds ...field.Expr) IScaFileTypeDo
	Where(conds ...gen.Condition) IScaFileTypeDo
	Order(conds ...field.Expr) IScaFileTypeDo
	Distinct(cols ...field.Expr) IScaFileTypeDo
	Omit(cols ...field.Expr) IScaFileTypeDo
	Join(table schema.Tabler, on ...field.Expr) IScaFileTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScaFileTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScaFileTypeDo
	Group(cols ...field.Expr) IScaFileTypeDo
	Having(conds ...gen.Condition) IScaFileTypeDo
	Limit(limit int) IScaFileTypeDo
	Offset(offset int) IScaFileTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScaFileTypeDo
	Unscoped() IScaFileTypeDo
	Create(values ...*model.ScaFileType) error
	CreateInBatches(values []*model.ScaFileType, batchSize int) error
	Save(values ...*model.ScaFileType) error
	First() (*model.ScaFileType, error)
	Take() (*model.ScaFileType, error)
	Last() (*model.ScaFileType, error)
	Find() ([]*model.ScaFileType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaFileType, err error)
	FindInBatches(result *[]*model.ScaFileType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScaFileType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScaFileTypeDo
	Assign(attrs ...field.AssignExpr) IScaFileTypeDo
	Joins(fields ...field.RelationField) IScaFileTypeDo
	Preload(fields ...field.RelationField) IScaFileTypeDo
	FirstOrInit() (*model.ScaFileType, error)
	FirstOrCreate() (*model.ScaFileType, error)
	FindByPage(offset int, limit int) (result []*model.ScaFileType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScaFileTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scaFileTypeDo) Debug() IScaFileTypeDo {
	return s.withDO(s.DO.Debug())
}

func (s scaFileTypeDo) WithContext(ctx context.Context) IScaFileTypeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scaFileTypeDo) ReadDB() IScaFileTypeDo {
	return s.Clauses(dbresolver.Read)
}

func (s scaFileTypeDo) WriteDB() IScaFileTypeDo {
	return s.Clauses(dbresolver.Write)
}

func (s scaFileTypeDo) Session(config *gorm.Session) IScaFileTypeDo {
	return s.withDO(s.DO.Session(config))
}

func (s scaFileTypeDo) Clauses(conds ...clause.Expression) IScaFileTypeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scaFileTypeDo) Returning(value interface{}, columns ...string) IScaFileTypeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scaFileTypeDo) Not(conds ...gen.Condition) IScaFileTypeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scaFileTypeDo) Or(conds ...gen.Condition) IScaFileTypeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scaFileTypeDo) Select(conds ...field.Expr) IScaFileTypeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scaFileTypeDo) Where(conds ...gen.Condition) IScaFileTypeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scaFileTypeDo) Order(conds ...field.Expr) IScaFileTypeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scaFileTypeDo) Distinct(cols ...field.Expr) IScaFileTypeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scaFileTypeDo) Omit(cols ...field.Expr) IScaFileTypeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scaFileTypeDo) Join(table schema.Tabler, on ...field.Expr) IScaFileTypeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scaFileTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScaFileTypeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scaFileTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IScaFileTypeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scaFileTypeDo) Group(cols ...field.Expr) IScaFileTypeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scaFileTypeDo) Having(conds ...gen.Condition) IScaFileTypeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scaFileTypeDo) Limit(limit int) IScaFileTypeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scaFileTypeDo) Offset(offset int) IScaFileTypeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scaFileTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScaFileTypeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scaFileTypeDo) Unscoped() IScaFileTypeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scaFileTypeDo) Create(values ...*model.ScaFileType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scaFileTypeDo) CreateInBatches(values []*model.ScaFileType, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scaFileTypeDo) Save(values ...*model.ScaFileType) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scaFileTypeDo) First() (*model.ScaFileType, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaFileType), nil
	}
}

func (s scaFileTypeDo) Take() (*model.ScaFileType, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaFileType), nil
	}
}

func (s scaFileTypeDo) Last() (*model.ScaFileType, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaFileType), nil
	}
}

func (s scaFileTypeDo) Find() ([]*model.ScaFileType, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScaFileType), err
}

func (s scaFileTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaFileType, err error) {
	buf := make([]*model.ScaFileType, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scaFileTypeDo) FindInBatches(result *[]*model.ScaFileType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scaFileTypeDo) Attrs(attrs ...field.AssignExpr) IScaFileTypeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scaFileTypeDo) Assign(attrs ...field.AssignExpr) IScaFileTypeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scaFileTypeDo) Joins(fields ...field.RelationField) IScaFileTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scaFileTypeDo) Preload(fields ...field.RelationField) IScaFileTypeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scaFileTypeDo) FirstOrInit() (*model.ScaFileType, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaFileType), nil
	}
}

func (s scaFileTypeDo) FirstOrCreate() (*model.ScaFileType, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaFileType), nil
	}
}

func (s scaFileTypeDo) FindByPage(offset int, limit int) (result []*model.ScaFileType, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scaFileTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scaFileTypeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scaFileTypeDo) Delete(models ...*model.ScaFileType) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scaFileTypeDo) withDO(do gen.Dao) *scaFileTypeDo {
	s.DO = *do.(*gen.DO)
	return s
}
