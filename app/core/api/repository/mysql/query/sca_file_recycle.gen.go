// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/model"
)

func newScaFileRecycle(db *gorm.DB, opts ...gen.DOOption) scaFileRecycle {
	_scaFileRecycle := scaFileRecycle{}

	_scaFileRecycle.scaFileRecycleDo.UseDB(db, opts...)
	_scaFileRecycle.scaFileRecycleDo.UseModel(&model.ScaFileRecycle{})

	tableName := _scaFileRecycle.scaFileRecycleDo.TableName()
	_scaFileRecycle.ALL = field.NewAsterisk(tableName)
	_scaFileRecycle.ID = field.NewInt64(tableName, "id")
	_scaFileRecycle.FileID = field.NewInt64(tableName, "file_id")
	_scaFileRecycle.FolderID = field.NewInt64(tableName, "folder_id")
	_scaFileRecycle.Type = field.NewInt64(tableName, "type")
	_scaFileRecycle.UserID = field.NewString(tableName, "user_id")
	_scaFileRecycle.DeletedAt = field.NewField(tableName, "deleted_at")
	_scaFileRecycle.OriginalPath = field.NewString(tableName, "original_path")
	_scaFileRecycle.Deleted = field.NewInt64(tableName, "deleted")
	_scaFileRecycle.FileSource = field.NewInt64(tableName, "file_source")

	_scaFileRecycle.fillFieldMap()

	return _scaFileRecycle
}

type scaFileRecycle struct {
	scaFileRecycleDo

	ALL          field.Asterisk
	ID           field.Int64  // 主键
	FileID       field.Int64  // 文件编号
	FolderID     field.Int64  // 文件夹编号
	Type         field.Int64  // 类型 0 文件 1 文件夹
	UserID       field.String // 用户编号
	DeletedAt    field.Field  // 删除时间
	OriginalPath field.String // 原始路径
	Deleted      field.Int64  // 是否被永久删除 0否 1是
	FileSource   field.Int64  // 文件来源 0 相册 1 评论

	fieldMap map[string]field.Expr
}

func (s scaFileRecycle) Table(newTableName string) *scaFileRecycle {
	s.scaFileRecycleDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scaFileRecycle) As(alias string) *scaFileRecycle {
	s.scaFileRecycleDo.DO = *(s.scaFileRecycleDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scaFileRecycle) updateTableName(table string) *scaFileRecycle {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.FileID = field.NewInt64(table, "file_id")
	s.FolderID = field.NewInt64(table, "folder_id")
	s.Type = field.NewInt64(table, "type")
	s.UserID = field.NewString(table, "user_id")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.OriginalPath = field.NewString(table, "original_path")
	s.Deleted = field.NewInt64(table, "deleted")
	s.FileSource = field.NewInt64(table, "file_source")

	s.fillFieldMap()

	return s
}

func (s *scaFileRecycle) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scaFileRecycle) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["file_id"] = s.FileID
	s.fieldMap["folder_id"] = s.FolderID
	s.fieldMap["type"] = s.Type
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["original_path"] = s.OriginalPath
	s.fieldMap["deleted"] = s.Deleted
	s.fieldMap["file_source"] = s.FileSource
}

func (s scaFileRecycle) clone(db *gorm.DB) scaFileRecycle {
	s.scaFileRecycleDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scaFileRecycle) replaceDB(db *gorm.DB) scaFileRecycle {
	s.scaFileRecycleDo.ReplaceDB(db)
	return s
}

type scaFileRecycleDo struct{ gen.DO }

type IScaFileRecycleDo interface {
	gen.SubQuery
	Debug() IScaFileRecycleDo
	WithContext(ctx context.Context) IScaFileRecycleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScaFileRecycleDo
	WriteDB() IScaFileRecycleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScaFileRecycleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScaFileRecycleDo
	Not(conds ...gen.Condition) IScaFileRecycleDo
	Or(conds ...gen.Condition) IScaFileRecycleDo
	Select(conds ...field.Expr) IScaFileRecycleDo
	Where(conds ...gen.Condition) IScaFileRecycleDo
	Order(conds ...field.Expr) IScaFileRecycleDo
	Distinct(cols ...field.Expr) IScaFileRecycleDo
	Omit(cols ...field.Expr) IScaFileRecycleDo
	Join(table schema.Tabler, on ...field.Expr) IScaFileRecycleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScaFileRecycleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScaFileRecycleDo
	Group(cols ...field.Expr) IScaFileRecycleDo
	Having(conds ...gen.Condition) IScaFileRecycleDo
	Limit(limit int) IScaFileRecycleDo
	Offset(offset int) IScaFileRecycleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScaFileRecycleDo
	Unscoped() IScaFileRecycleDo
	Create(values ...*model.ScaFileRecycle) error
	CreateInBatches(values []*model.ScaFileRecycle, batchSize int) error
	Save(values ...*model.ScaFileRecycle) error
	First() (*model.ScaFileRecycle, error)
	Take() (*model.ScaFileRecycle, error)
	Last() (*model.ScaFileRecycle, error)
	Find() ([]*model.ScaFileRecycle, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaFileRecycle, err error)
	FindInBatches(result *[]*model.ScaFileRecycle, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScaFileRecycle) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScaFileRecycleDo
	Assign(attrs ...field.AssignExpr) IScaFileRecycleDo
	Joins(fields ...field.RelationField) IScaFileRecycleDo
	Preload(fields ...field.RelationField) IScaFileRecycleDo
	FirstOrInit() (*model.ScaFileRecycle, error)
	FirstOrCreate() (*model.ScaFileRecycle, error)
	FindByPage(offset int, limit int) (result []*model.ScaFileRecycle, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScaFileRecycleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scaFileRecycleDo) Debug() IScaFileRecycleDo {
	return s.withDO(s.DO.Debug())
}

func (s scaFileRecycleDo) WithContext(ctx context.Context) IScaFileRecycleDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scaFileRecycleDo) ReadDB() IScaFileRecycleDo {
	return s.Clauses(dbresolver.Read)
}

func (s scaFileRecycleDo) WriteDB() IScaFileRecycleDo {
	return s.Clauses(dbresolver.Write)
}

func (s scaFileRecycleDo) Session(config *gorm.Session) IScaFileRecycleDo {
	return s.withDO(s.DO.Session(config))
}

func (s scaFileRecycleDo) Clauses(conds ...clause.Expression) IScaFileRecycleDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scaFileRecycleDo) Returning(value interface{}, columns ...string) IScaFileRecycleDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scaFileRecycleDo) Not(conds ...gen.Condition) IScaFileRecycleDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scaFileRecycleDo) Or(conds ...gen.Condition) IScaFileRecycleDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scaFileRecycleDo) Select(conds ...field.Expr) IScaFileRecycleDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scaFileRecycleDo) Where(conds ...gen.Condition) IScaFileRecycleDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scaFileRecycleDo) Order(conds ...field.Expr) IScaFileRecycleDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scaFileRecycleDo) Distinct(cols ...field.Expr) IScaFileRecycleDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scaFileRecycleDo) Omit(cols ...field.Expr) IScaFileRecycleDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scaFileRecycleDo) Join(table schema.Tabler, on ...field.Expr) IScaFileRecycleDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scaFileRecycleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScaFileRecycleDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scaFileRecycleDo) RightJoin(table schema.Tabler, on ...field.Expr) IScaFileRecycleDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scaFileRecycleDo) Group(cols ...field.Expr) IScaFileRecycleDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scaFileRecycleDo) Having(conds ...gen.Condition) IScaFileRecycleDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scaFileRecycleDo) Limit(limit int) IScaFileRecycleDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scaFileRecycleDo) Offset(offset int) IScaFileRecycleDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scaFileRecycleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScaFileRecycleDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scaFileRecycleDo) Unscoped() IScaFileRecycleDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scaFileRecycleDo) Create(values ...*model.ScaFileRecycle) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scaFileRecycleDo) CreateInBatches(values []*model.ScaFileRecycle, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scaFileRecycleDo) Save(values ...*model.ScaFileRecycle) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scaFileRecycleDo) First() (*model.ScaFileRecycle, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaFileRecycle), nil
	}
}

func (s scaFileRecycleDo) Take() (*model.ScaFileRecycle, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaFileRecycle), nil
	}
}

func (s scaFileRecycleDo) Last() (*model.ScaFileRecycle, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaFileRecycle), nil
	}
}

func (s scaFileRecycleDo) Find() ([]*model.ScaFileRecycle, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScaFileRecycle), err
}

func (s scaFileRecycleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaFileRecycle, err error) {
	buf := make([]*model.ScaFileRecycle, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scaFileRecycleDo) FindInBatches(result *[]*model.ScaFileRecycle, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scaFileRecycleDo) Attrs(attrs ...field.AssignExpr) IScaFileRecycleDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scaFileRecycleDo) Assign(attrs ...field.AssignExpr) IScaFileRecycleDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scaFileRecycleDo) Joins(fields ...field.RelationField) IScaFileRecycleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scaFileRecycleDo) Preload(fields ...field.RelationField) IScaFileRecycleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scaFileRecycleDo) FirstOrInit() (*model.ScaFileRecycle, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaFileRecycle), nil
	}
}

func (s scaFileRecycleDo) FirstOrCreate() (*model.ScaFileRecycle, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaFileRecycle), nil
	}
}

func (s scaFileRecycleDo) FindByPage(offset int, limit int) (result []*model.ScaFileRecycle, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scaFileRecycleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scaFileRecycleDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scaFileRecycleDo) Delete(models ...*model.ScaFileRecycle) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scaFileRecycleDo) withDO(do gen.Dao) *scaFileRecycleDo {
	s.DO = *do.(*gen.DO)
	return s
}
