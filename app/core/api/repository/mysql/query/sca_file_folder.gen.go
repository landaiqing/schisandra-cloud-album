// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schisandra-album-cloud-microservices/app/core/api/repository/mysql/model"
)

func newScaFileFolder(db *gorm.DB, opts ...gen.DOOption) scaFileFolder {
	_scaFileFolder := scaFileFolder{}

	_scaFileFolder.scaFileFolderDo.UseDB(db, opts...)
	_scaFileFolder.scaFileFolderDo.UseModel(&model.ScaFileFolder{})

	tableName := _scaFileFolder.scaFileFolderDo.TableName()
	_scaFileFolder.ALL = field.NewAsterisk(tableName)
	_scaFileFolder.ID = field.NewInt64(tableName, "id")
	_scaFileFolder.FolderName = field.NewString(tableName, "folder_name")
	_scaFileFolder.ParentFolderID = field.NewInt64(tableName, "parent_folder_id")
	_scaFileFolder.FolderAddr = field.NewString(tableName, "folder_addr")
	_scaFileFolder.UserID = field.NewString(tableName, "user_id")
	_scaFileFolder.FolderSource = field.NewInt64(tableName, "folder_source")
	_scaFileFolder.CreatedTime = field.NewTime(tableName, "created_time")
	_scaFileFolder.UpdateTime = field.NewTime(tableName, "update_time")
	_scaFileFolder.Deleted = field.NewInt64(tableName, "deleted")
	_scaFileFolder.DeletedAt = field.NewField(tableName, "deleted_at")

	_scaFileFolder.fillFieldMap()

	return _scaFileFolder
}

type scaFileFolder struct {
	scaFileFolderDo

	ALL            field.Asterisk
	ID             field.Int64  // 主键
	FolderName     field.String // 文件夹名称
	ParentFolderID field.Int64  // 父文件夹编号
	FolderAddr     field.String // 文件夹名称
	UserID         field.String // 用户编号
	FolderSource   field.Int64  // 文件夹来源 0相册 1 评论
	CreatedTime    field.Time   // 创建时间
	UpdateTime     field.Time   // 更新时间
	Deleted        field.Int64  // 是否删除 0 未删除 1 已删除
	DeletedAt      field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s scaFileFolder) Table(newTableName string) *scaFileFolder {
	s.scaFileFolderDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scaFileFolder) As(alias string) *scaFileFolder {
	s.scaFileFolderDo.DO = *(s.scaFileFolderDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scaFileFolder) updateTableName(table string) *scaFileFolder {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.FolderName = field.NewString(table, "folder_name")
	s.ParentFolderID = field.NewInt64(table, "parent_folder_id")
	s.FolderAddr = field.NewString(table, "folder_addr")
	s.UserID = field.NewString(table, "user_id")
	s.FolderSource = field.NewInt64(table, "folder_source")
	s.CreatedTime = field.NewTime(table, "created_time")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.Deleted = field.NewInt64(table, "deleted")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *scaFileFolder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scaFileFolder) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["folder_name"] = s.FolderName
	s.fieldMap["parent_folder_id"] = s.ParentFolderID
	s.fieldMap["folder_addr"] = s.FolderAddr
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["folder_source"] = s.FolderSource
	s.fieldMap["created_time"] = s.CreatedTime
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["deleted"] = s.Deleted
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s scaFileFolder) clone(db *gorm.DB) scaFileFolder {
	s.scaFileFolderDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scaFileFolder) replaceDB(db *gorm.DB) scaFileFolder {
	s.scaFileFolderDo.ReplaceDB(db)
	return s
}

type scaFileFolderDo struct{ gen.DO }

type IScaFileFolderDo interface {
	gen.SubQuery
	Debug() IScaFileFolderDo
	WithContext(ctx context.Context) IScaFileFolderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScaFileFolderDo
	WriteDB() IScaFileFolderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScaFileFolderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScaFileFolderDo
	Not(conds ...gen.Condition) IScaFileFolderDo
	Or(conds ...gen.Condition) IScaFileFolderDo
	Select(conds ...field.Expr) IScaFileFolderDo
	Where(conds ...gen.Condition) IScaFileFolderDo
	Order(conds ...field.Expr) IScaFileFolderDo
	Distinct(cols ...field.Expr) IScaFileFolderDo
	Omit(cols ...field.Expr) IScaFileFolderDo
	Join(table schema.Tabler, on ...field.Expr) IScaFileFolderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScaFileFolderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScaFileFolderDo
	Group(cols ...field.Expr) IScaFileFolderDo
	Having(conds ...gen.Condition) IScaFileFolderDo
	Limit(limit int) IScaFileFolderDo
	Offset(offset int) IScaFileFolderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScaFileFolderDo
	Unscoped() IScaFileFolderDo
	Create(values ...*model.ScaFileFolder) error
	CreateInBatches(values []*model.ScaFileFolder, batchSize int) error
	Save(values ...*model.ScaFileFolder) error
	First() (*model.ScaFileFolder, error)
	Take() (*model.ScaFileFolder, error)
	Last() (*model.ScaFileFolder, error)
	Find() ([]*model.ScaFileFolder, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaFileFolder, err error)
	FindInBatches(result *[]*model.ScaFileFolder, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScaFileFolder) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScaFileFolderDo
	Assign(attrs ...field.AssignExpr) IScaFileFolderDo
	Joins(fields ...field.RelationField) IScaFileFolderDo
	Preload(fields ...field.RelationField) IScaFileFolderDo
	FirstOrInit() (*model.ScaFileFolder, error)
	FirstOrCreate() (*model.ScaFileFolder, error)
	FindByPage(offset int, limit int) (result []*model.ScaFileFolder, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScaFileFolderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scaFileFolderDo) Debug() IScaFileFolderDo {
	return s.withDO(s.DO.Debug())
}

func (s scaFileFolderDo) WithContext(ctx context.Context) IScaFileFolderDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scaFileFolderDo) ReadDB() IScaFileFolderDo {
	return s.Clauses(dbresolver.Read)
}

func (s scaFileFolderDo) WriteDB() IScaFileFolderDo {
	return s.Clauses(dbresolver.Write)
}

func (s scaFileFolderDo) Session(config *gorm.Session) IScaFileFolderDo {
	return s.withDO(s.DO.Session(config))
}

func (s scaFileFolderDo) Clauses(conds ...clause.Expression) IScaFileFolderDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scaFileFolderDo) Returning(value interface{}, columns ...string) IScaFileFolderDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scaFileFolderDo) Not(conds ...gen.Condition) IScaFileFolderDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scaFileFolderDo) Or(conds ...gen.Condition) IScaFileFolderDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scaFileFolderDo) Select(conds ...field.Expr) IScaFileFolderDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scaFileFolderDo) Where(conds ...gen.Condition) IScaFileFolderDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scaFileFolderDo) Order(conds ...field.Expr) IScaFileFolderDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scaFileFolderDo) Distinct(cols ...field.Expr) IScaFileFolderDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scaFileFolderDo) Omit(cols ...field.Expr) IScaFileFolderDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scaFileFolderDo) Join(table schema.Tabler, on ...field.Expr) IScaFileFolderDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scaFileFolderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScaFileFolderDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scaFileFolderDo) RightJoin(table schema.Tabler, on ...field.Expr) IScaFileFolderDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scaFileFolderDo) Group(cols ...field.Expr) IScaFileFolderDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scaFileFolderDo) Having(conds ...gen.Condition) IScaFileFolderDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scaFileFolderDo) Limit(limit int) IScaFileFolderDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scaFileFolderDo) Offset(offset int) IScaFileFolderDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scaFileFolderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScaFileFolderDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scaFileFolderDo) Unscoped() IScaFileFolderDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scaFileFolderDo) Create(values ...*model.ScaFileFolder) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scaFileFolderDo) CreateInBatches(values []*model.ScaFileFolder, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scaFileFolderDo) Save(values ...*model.ScaFileFolder) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scaFileFolderDo) First() (*model.ScaFileFolder, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaFileFolder), nil
	}
}

func (s scaFileFolderDo) Take() (*model.ScaFileFolder, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaFileFolder), nil
	}
}

func (s scaFileFolderDo) Last() (*model.ScaFileFolder, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaFileFolder), nil
	}
}

func (s scaFileFolderDo) Find() ([]*model.ScaFileFolder, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScaFileFolder), err
}

func (s scaFileFolderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaFileFolder, err error) {
	buf := make([]*model.ScaFileFolder, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scaFileFolderDo) FindInBatches(result *[]*model.ScaFileFolder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scaFileFolderDo) Attrs(attrs ...field.AssignExpr) IScaFileFolderDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scaFileFolderDo) Assign(attrs ...field.AssignExpr) IScaFileFolderDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scaFileFolderDo) Joins(fields ...field.RelationField) IScaFileFolderDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scaFileFolderDo) Preload(fields ...field.RelationField) IScaFileFolderDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scaFileFolderDo) FirstOrInit() (*model.ScaFileFolder, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaFileFolder), nil
	}
}

func (s scaFileFolderDo) FirstOrCreate() (*model.ScaFileFolder, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaFileFolder), nil
	}
}

func (s scaFileFolderDo) FindByPage(offset int, limit int) (result []*model.ScaFileFolder, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scaFileFolderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scaFileFolderDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scaFileFolderDo) Delete(models ...*model.ScaFileFolder) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scaFileFolderDo) withDO(do gen.Dao) *scaFileFolderDo {
	s.DO = *do.(*gen.DO)
	return s
}
