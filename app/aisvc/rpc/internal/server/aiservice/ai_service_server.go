// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: aisvc.proto

package server

import (
	"context"

	"schisandra-album-cloud-microservices/app/aisvc/rpc/internal/logic/aiservice"
	"schisandra-album-cloud-microservices/app/aisvc/rpc/internal/svc"
	"schisandra-album-cloud-microservices/app/aisvc/rpc/pb"
)

type AiServiceServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedAiServiceServer
}

func NewAiServiceServer(svcCtx *svc.ServiceContext) *AiServiceServer {
	return &AiServiceServer{
		svcCtx: svcCtx,
	}
}

// FaceRecognition
func (s *AiServiceServer) FaceRecognition(ctx context.Context, in *pb.FaceRecognitionRequest) (*pb.FaceRecognitionResponse, error) {
	l := aiservicelogic.NewFaceRecognitionLogic(ctx, s.svcCtx)
	return l.FaceRecognition(in)
}

// TfClassification
func (s *AiServiceServer) TfClassification(ctx context.Context, in *pb.TfClassificationRequest) (*pb.TfClassificationResponse, error) {
	l := aiservicelogic.NewTfClassificationLogic(ctx, s.svcCtx)
	return l.TfClassification(in)
}

// CaffeClassification
func (s *AiServiceServer) CaffeClassification(ctx context.Context, in *pb.CaffeClassificationRequest) (*pb.CaffeClassificationResponse, error) {
	l := aiservicelogic.NewCaffeClassificationLogic(ctx, s.svcCtx)
	return l.CaffeClassification(in)
}
