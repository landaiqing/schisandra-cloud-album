// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.19.4
// source: aisvc.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 人脸识别
type FaceRecognitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Face   []byte `protobuf:"bytes,1,opt,name=face,proto3" json:"face,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *FaceRecognitionRequest) Reset() {
	*x = FaceRecognitionRequest{}
	mi := &file_aisvc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FaceRecognitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaceRecognitionRequest) ProtoMessage() {}

func (x *FaceRecognitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aisvc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaceRecognitionRequest.ProtoReflect.Descriptor instead.
func (*FaceRecognitionRequest) Descriptor() ([]byte, []int) {
	return file_aisvc_proto_rawDescGZIP(), []int{0}
}

func (x *FaceRecognitionRequest) GetFace() []byte {
	if x != nil {
		return x.Face
	}
	return nil
}

func (x *FaceRecognitionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type FaceRecognitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaceId int64 `protobuf:"varint,3,opt,name=face_id,json=faceId,proto3" json:"face_id,omitempty"`
}

func (x *FaceRecognitionResponse) Reset() {
	*x = FaceRecognitionResponse{}
	mi := &file_aisvc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FaceRecognitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaceRecognitionResponse) ProtoMessage() {}

func (x *FaceRecognitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aisvc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaceRecognitionResponse.ProtoReflect.Descriptor instead.
func (*FaceRecognitionResponse) Descriptor() ([]byte, []int) {
	return file_aisvc_proto_rawDescGZIP(), []int{1}
}

func (x *FaceRecognitionResponse) GetFaceId() int64 {
	if x != nil {
		return x.FaceId
	}
	return 0
}

// tf分类识别
type TfClassificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *TfClassificationRequest) Reset() {
	*x = TfClassificationRequest{}
	mi := &file_aisvc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TfClassificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TfClassificationRequest) ProtoMessage() {}

func (x *TfClassificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aisvc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TfClassificationRequest.ProtoReflect.Descriptor instead.
func (*TfClassificationRequest) Descriptor() ([]byte, []int) {
	return file_aisvc_proto_rawDescGZIP(), []int{2}
}

func (x *TfClassificationRequest) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type TfClassificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassName string  `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	Score     float32 `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *TfClassificationResponse) Reset() {
	*x = TfClassificationResponse{}
	mi := &file_aisvc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TfClassificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TfClassificationResponse) ProtoMessage() {}

func (x *TfClassificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aisvc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TfClassificationResponse.ProtoReflect.Descriptor instead.
func (*TfClassificationResponse) Descriptor() ([]byte, []int) {
	return file_aisvc_proto_rawDescGZIP(), []int{3}
}

func (x *TfClassificationResponse) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *TfClassificationResponse) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// caffe分类识别
type CaffeClassificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image []byte `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *CaffeClassificationRequest) Reset() {
	*x = CaffeClassificationRequest{}
	mi := &file_aisvc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaffeClassificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaffeClassificationRequest) ProtoMessage() {}

func (x *CaffeClassificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aisvc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaffeClassificationRequest.ProtoReflect.Descriptor instead.
func (*CaffeClassificationRequest) Descriptor() ([]byte, []int) {
	return file_aisvc_proto_rawDescGZIP(), []int{4}
}

func (x *CaffeClassificationRequest) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type CaffeClassificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassName string  `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	Score     float32 `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *CaffeClassificationResponse) Reset() {
	*x = CaffeClassificationResponse{}
	mi := &file_aisvc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaffeClassificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaffeClassificationResponse) ProtoMessage() {}

func (x *CaffeClassificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aisvc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaffeClassificationResponse.ProtoReflect.Descriptor instead.
func (*CaffeClassificationResponse) Descriptor() ([]byte, []int) {
	return file_aisvc_proto_rawDescGZIP(), []int{5}
}

func (x *CaffeClassificationResponse) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *CaffeClassificationResponse) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

var File_aisvc_proto protoreflect.FileDescriptor

var file_aisvc_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x69, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x61,
	0x69, 0x22, 0x45, 0x0a, 0x16, 0x46, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x17, 0x46, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x17,
	0x54, 0x66, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x4f, 0x0a,
	0x18, 0x54, 0x66, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x32,
	0x0a, 0x1a, 0x43, 0x61, 0x66, 0x66, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x22, 0x52, 0x0a, 0x1b, 0x43, 0x61, 0x66, 0x66, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x32, 0xfe, 0x01, 0x0a, 0x09, 0x41, 0x69, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x46, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x61, 0x69, 0x2e, 0x46, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x69, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4d, 0x0a, 0x10, 0x54, 0x66, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x61, 0x69, 0x2e, 0x54, 0x66, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x69, 0x2e, 0x54, 0x66, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x56, 0x0a, 0x13, 0x43, 0x61, 0x66, 0x66, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x61, 0x69, 0x2e, 0x43, 0x61, 0x66, 0x66,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x69, 0x2e, 0x43, 0x61, 0x66, 0x66,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aisvc_proto_rawDescOnce sync.Once
	file_aisvc_proto_rawDescData = file_aisvc_proto_rawDesc
)

func file_aisvc_proto_rawDescGZIP() []byte {
	file_aisvc_proto_rawDescOnce.Do(func() {
		file_aisvc_proto_rawDescData = protoimpl.X.CompressGZIP(file_aisvc_proto_rawDescData)
	})
	return file_aisvc_proto_rawDescData
}

var file_aisvc_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_aisvc_proto_goTypes = []any{
	(*FaceRecognitionRequest)(nil),      // 0: ai.FaceRecognitionRequest
	(*FaceRecognitionResponse)(nil),     // 1: ai.FaceRecognitionResponse
	(*TfClassificationRequest)(nil),     // 2: ai.TfClassificationRequest
	(*TfClassificationResponse)(nil),    // 3: ai.TfClassificationResponse
	(*CaffeClassificationRequest)(nil),  // 4: ai.CaffeClassificationRequest
	(*CaffeClassificationResponse)(nil), // 5: ai.CaffeClassificationResponse
}
var file_aisvc_proto_depIdxs = []int32{
	0, // 0: ai.AiService.FaceRecognition:input_type -> ai.FaceRecognitionRequest
	2, // 1: ai.AiService.TfClassification:input_type -> ai.TfClassificationRequest
	4, // 2: ai.AiService.CaffeClassification:input_type -> ai.CaffeClassificationRequest
	1, // 3: ai.AiService.FaceRecognition:output_type -> ai.FaceRecognitionResponse
	3, // 4: ai.AiService.TfClassification:output_type -> ai.TfClassificationResponse
	5, // 5: ai.AiService.CaffeClassification:output_type -> ai.CaffeClassificationResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_aisvc_proto_init() }
func file_aisvc_proto_init() {
	if File_aisvc_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aisvc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aisvc_proto_goTypes,
		DependencyIndexes: file_aisvc_proto_depIdxs,
		MessageInfos:      file_aisvc_proto_msgTypes,
	}.Build()
	File_aisvc_proto = out.File
	file_aisvc_proto_rawDesc = nil
	file_aisvc_proto_goTypes = nil
	file_aisvc_proto_depIdxs = nil
}
