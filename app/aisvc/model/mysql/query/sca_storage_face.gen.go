// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schisandra-album-cloud-microservices/app/aisvc/model/mysql/model"
)

func newScaStorageFace(db *gorm.DB, opts ...gen.DOOption) scaStorageFace {
	_scaStorageFace := scaStorageFace{}

	_scaStorageFace.scaStorageFaceDo.UseDB(db, opts...)
	_scaStorageFace.scaStorageFaceDo.UseModel(&model.ScaStorageFace{})

	tableName := _scaStorageFace.scaStorageFaceDo.TableName()
	_scaStorageFace.ALL = field.NewAsterisk(tableName)
	_scaStorageFace.ID = field.NewInt64(tableName, "id")
	_scaStorageFace.UserID = field.NewString(tableName, "user_id")
	_scaStorageFace.FaceName = field.NewString(tableName, "face_name")
	_scaStorageFace.FaceVector = field.NewString(tableName, "face_vector")
	_scaStorageFace.FaceImagePath = field.NewString(tableName, "face_image_path")
	_scaStorageFace.FaceType = field.NewInt64(tableName, "face_type")
	_scaStorageFace.CreatedAt = field.NewTime(tableName, "created_at")
	_scaStorageFace.UpdatedAt = field.NewTime(tableName, "updated_at")
	_scaStorageFace.DeletedAt = field.NewField(tableName, "deleted_at")

	_scaStorageFace.fillFieldMap()

	return _scaStorageFace
}

// scaStorageFace 人脸特征向量表
type scaStorageFace struct {
	scaStorageFaceDo

	ALL           field.Asterisk
	ID            field.Int64  // 主键
	UserID        field.String // 用户ID
	FaceName      field.String // 人脸名称
	FaceVector    field.String // 人脸特征向量
	FaceImagePath field.String // 人脸图像路径
	FaceType      field.Int64  // 人脸类型标识
	CreatedAt     field.Time   // 创建时间
	UpdatedAt     field.Time   // 更新时间
	DeletedAt     field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s scaStorageFace) Table(newTableName string) *scaStorageFace {
	s.scaStorageFaceDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scaStorageFace) As(alias string) *scaStorageFace {
	s.scaStorageFaceDo.DO = *(s.scaStorageFaceDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scaStorageFace) updateTableName(table string) *scaStorageFace {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewString(table, "user_id")
	s.FaceName = field.NewString(table, "face_name")
	s.FaceVector = field.NewString(table, "face_vector")
	s.FaceImagePath = field.NewString(table, "face_image_path")
	s.FaceType = field.NewInt64(table, "face_type")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *scaStorageFace) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scaStorageFace) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["face_name"] = s.FaceName
	s.fieldMap["face_vector"] = s.FaceVector
	s.fieldMap["face_image_path"] = s.FaceImagePath
	s.fieldMap["face_type"] = s.FaceType
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s scaStorageFace) clone(db *gorm.DB) scaStorageFace {
	s.scaStorageFaceDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scaStorageFace) replaceDB(db *gorm.DB) scaStorageFace {
	s.scaStorageFaceDo.ReplaceDB(db)
	return s
}

type scaStorageFaceDo struct{ gen.DO }

type IScaStorageFaceDo interface {
	gen.SubQuery
	Debug() IScaStorageFaceDo
	WithContext(ctx context.Context) IScaStorageFaceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScaStorageFaceDo
	WriteDB() IScaStorageFaceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScaStorageFaceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScaStorageFaceDo
	Not(conds ...gen.Condition) IScaStorageFaceDo
	Or(conds ...gen.Condition) IScaStorageFaceDo
	Select(conds ...field.Expr) IScaStorageFaceDo
	Where(conds ...gen.Condition) IScaStorageFaceDo
	Order(conds ...field.Expr) IScaStorageFaceDo
	Distinct(cols ...field.Expr) IScaStorageFaceDo
	Omit(cols ...field.Expr) IScaStorageFaceDo
	Join(table schema.Tabler, on ...field.Expr) IScaStorageFaceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScaStorageFaceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScaStorageFaceDo
	Group(cols ...field.Expr) IScaStorageFaceDo
	Having(conds ...gen.Condition) IScaStorageFaceDo
	Limit(limit int) IScaStorageFaceDo
	Offset(offset int) IScaStorageFaceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScaStorageFaceDo
	Unscoped() IScaStorageFaceDo
	Create(values ...*model.ScaStorageFace) error
	CreateInBatches(values []*model.ScaStorageFace, batchSize int) error
	Save(values ...*model.ScaStorageFace) error
	First() (*model.ScaStorageFace, error)
	Take() (*model.ScaStorageFace, error)
	Last() (*model.ScaStorageFace, error)
	Find() ([]*model.ScaStorageFace, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaStorageFace, err error)
	FindInBatches(result *[]*model.ScaStorageFace, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScaStorageFace) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScaStorageFaceDo
	Assign(attrs ...field.AssignExpr) IScaStorageFaceDo
	Joins(fields ...field.RelationField) IScaStorageFaceDo
	Preload(fields ...field.RelationField) IScaStorageFaceDo
	FirstOrInit() (*model.ScaStorageFace, error)
	FirstOrCreate() (*model.ScaStorageFace, error)
	FindByPage(offset int, limit int) (result []*model.ScaStorageFace, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScaStorageFaceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scaStorageFaceDo) Debug() IScaStorageFaceDo {
	return s.withDO(s.DO.Debug())
}

func (s scaStorageFaceDo) WithContext(ctx context.Context) IScaStorageFaceDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scaStorageFaceDo) ReadDB() IScaStorageFaceDo {
	return s.Clauses(dbresolver.Read)
}

func (s scaStorageFaceDo) WriteDB() IScaStorageFaceDo {
	return s.Clauses(dbresolver.Write)
}

func (s scaStorageFaceDo) Session(config *gorm.Session) IScaStorageFaceDo {
	return s.withDO(s.DO.Session(config))
}

func (s scaStorageFaceDo) Clauses(conds ...clause.Expression) IScaStorageFaceDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scaStorageFaceDo) Returning(value interface{}, columns ...string) IScaStorageFaceDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scaStorageFaceDo) Not(conds ...gen.Condition) IScaStorageFaceDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scaStorageFaceDo) Or(conds ...gen.Condition) IScaStorageFaceDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scaStorageFaceDo) Select(conds ...field.Expr) IScaStorageFaceDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scaStorageFaceDo) Where(conds ...gen.Condition) IScaStorageFaceDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scaStorageFaceDo) Order(conds ...field.Expr) IScaStorageFaceDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scaStorageFaceDo) Distinct(cols ...field.Expr) IScaStorageFaceDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scaStorageFaceDo) Omit(cols ...field.Expr) IScaStorageFaceDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scaStorageFaceDo) Join(table schema.Tabler, on ...field.Expr) IScaStorageFaceDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scaStorageFaceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScaStorageFaceDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scaStorageFaceDo) RightJoin(table schema.Tabler, on ...field.Expr) IScaStorageFaceDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scaStorageFaceDo) Group(cols ...field.Expr) IScaStorageFaceDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scaStorageFaceDo) Having(conds ...gen.Condition) IScaStorageFaceDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scaStorageFaceDo) Limit(limit int) IScaStorageFaceDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scaStorageFaceDo) Offset(offset int) IScaStorageFaceDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scaStorageFaceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScaStorageFaceDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scaStorageFaceDo) Unscoped() IScaStorageFaceDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scaStorageFaceDo) Create(values ...*model.ScaStorageFace) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scaStorageFaceDo) CreateInBatches(values []*model.ScaStorageFace, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scaStorageFaceDo) Save(values ...*model.ScaStorageFace) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scaStorageFaceDo) First() (*model.ScaStorageFace, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageFace), nil
	}
}

func (s scaStorageFaceDo) Take() (*model.ScaStorageFace, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageFace), nil
	}
}

func (s scaStorageFaceDo) Last() (*model.ScaStorageFace, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageFace), nil
	}
}

func (s scaStorageFaceDo) Find() ([]*model.ScaStorageFace, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScaStorageFace), err
}

func (s scaStorageFaceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaStorageFace, err error) {
	buf := make([]*model.ScaStorageFace, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scaStorageFaceDo) FindInBatches(result *[]*model.ScaStorageFace, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scaStorageFaceDo) Attrs(attrs ...field.AssignExpr) IScaStorageFaceDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scaStorageFaceDo) Assign(attrs ...field.AssignExpr) IScaStorageFaceDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scaStorageFaceDo) Joins(fields ...field.RelationField) IScaStorageFaceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scaStorageFaceDo) Preload(fields ...field.RelationField) IScaStorageFaceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scaStorageFaceDo) FirstOrInit() (*model.ScaStorageFace, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageFace), nil
	}
}

func (s scaStorageFaceDo) FirstOrCreate() (*model.ScaStorageFace, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageFace), nil
	}
}

func (s scaStorageFaceDo) FindByPage(offset int, limit int) (result []*model.ScaStorageFace, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scaStorageFaceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scaStorageFaceDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scaStorageFaceDo) Delete(models ...*model.ScaStorageFace) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scaStorageFaceDo) withDO(do gen.Dao) *scaStorageFaceDo {
	s.DO = *do.(*gen.DO)
	return s
}
