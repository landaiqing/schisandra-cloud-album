// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"schisandra-album-cloud-microservices/app/auth/api/model/mysql/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newScaAuthUserDevice(db *gorm.DB, opts ...gen.DOOption) scaAuthUserDevice {
	_scaAuthUserDevice := scaAuthUserDevice{}

	_scaAuthUserDevice.scaAuthUserDeviceDo.UseDB(db, opts...)
	_scaAuthUserDevice.scaAuthUserDeviceDo.UseModel(&model.ScaAuthUserDevice{})

	tableName := _scaAuthUserDevice.scaAuthUserDeviceDo.TableName()
	_scaAuthUserDevice.ALL = field.NewAsterisk(tableName)
	_scaAuthUserDevice.ID = field.NewInt64(tableName, "id")
	_scaAuthUserDevice.UserID = field.NewString(tableName, "user_id")
	_scaAuthUserDevice.IP = field.NewString(tableName, "ip")
	_scaAuthUserDevice.Location = field.NewString(tableName, "location")
	_scaAuthUserDevice.Agent = field.NewString(tableName, "agent")
	_scaAuthUserDevice.CreatedAt = field.NewTime(tableName, "created_at")
	_scaAuthUserDevice.Browser = field.NewString(tableName, "browser")
	_scaAuthUserDevice.OperatingSystem = field.NewString(tableName, "operating_system")
	_scaAuthUserDevice.BrowserVersion = field.NewString(tableName, "browser_version")
	_scaAuthUserDevice.Mobile = field.NewInt64(tableName, "mobile")
	_scaAuthUserDevice.Bot = field.NewInt64(tableName, "bot")
	_scaAuthUserDevice.Mozilla = field.NewString(tableName, "mozilla")
	_scaAuthUserDevice.Platform = field.NewString(tableName, "platform")
	_scaAuthUserDevice.EngineName = field.NewString(tableName, "engine_name")
	_scaAuthUserDevice.EngineVersion = field.NewString(tableName, "engine_version")
	_scaAuthUserDevice.UpdatedAt = field.NewTime(tableName, "updated_at")
	_scaAuthUserDevice.DeletedAt = field.NewField(tableName, "deleted_at")

	_scaAuthUserDevice.fillFieldMap()

	return _scaAuthUserDevice
}

type scaAuthUserDevice struct {
	scaAuthUserDeviceDo

	ALL             field.Asterisk
	ID              field.Int64  // 主键ID
	UserID          field.String // 用户ID
	IP              field.String // 登录IP
	Location        field.String // 地址
	Agent           field.String // 设备信息
	CreatedAt       field.Time   // 创建时间
	Browser         field.String // 浏览器
	OperatingSystem field.String // 操作系统
	BrowserVersion  field.String // 浏览器版本
	Mobile          field.Int64  // 是否为手机 0否1是
	Bot             field.Int64  // 是否为bot 0否1是
	Mozilla         field.String // 火狐版本
	Platform        field.String // 平台
	EngineName      field.String // 引擎名称
	EngineVersion   field.String // 引擎版本
	UpdatedAt       field.Time   // 更新时间
	DeletedAt       field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s scaAuthUserDevice) Table(newTableName string) *scaAuthUserDevice {
	s.scaAuthUserDeviceDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scaAuthUserDevice) As(alias string) *scaAuthUserDevice {
	s.scaAuthUserDeviceDo.DO = *(s.scaAuthUserDeviceDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scaAuthUserDevice) updateTableName(table string) *scaAuthUserDevice {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewString(table, "user_id")
	s.IP = field.NewString(table, "ip")
	s.Location = field.NewString(table, "location")
	s.Agent = field.NewString(table, "agent")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.Browser = field.NewString(table, "browser")
	s.OperatingSystem = field.NewString(table, "operating_system")
	s.BrowserVersion = field.NewString(table, "browser_version")
	s.Mobile = field.NewInt64(table, "mobile")
	s.Bot = field.NewInt64(table, "bot")
	s.Mozilla = field.NewString(table, "mozilla")
	s.Platform = field.NewString(table, "platform")
	s.EngineName = field.NewString(table, "engine_name")
	s.EngineVersion = field.NewString(table, "engine_version")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *scaAuthUserDevice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scaAuthUserDevice) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 17)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["ip"] = s.IP
	s.fieldMap["location"] = s.Location
	s.fieldMap["agent"] = s.Agent
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["browser"] = s.Browser
	s.fieldMap["operating_system"] = s.OperatingSystem
	s.fieldMap["browser_version"] = s.BrowserVersion
	s.fieldMap["mobile"] = s.Mobile
	s.fieldMap["bot"] = s.Bot
	s.fieldMap["mozilla"] = s.Mozilla
	s.fieldMap["platform"] = s.Platform
	s.fieldMap["engine_name"] = s.EngineName
	s.fieldMap["engine_version"] = s.EngineVersion
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s scaAuthUserDevice) clone(db *gorm.DB) scaAuthUserDevice {
	s.scaAuthUserDeviceDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scaAuthUserDevice) replaceDB(db *gorm.DB) scaAuthUserDevice {
	s.scaAuthUserDeviceDo.ReplaceDB(db)
	return s
}

type scaAuthUserDeviceDo struct{ gen.DO }

type IScaAuthUserDeviceDo interface {
	gen.SubQuery
	Debug() IScaAuthUserDeviceDo
	WithContext(ctx context.Context) IScaAuthUserDeviceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScaAuthUserDeviceDo
	WriteDB() IScaAuthUserDeviceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScaAuthUserDeviceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScaAuthUserDeviceDo
	Not(conds ...gen.Condition) IScaAuthUserDeviceDo
	Or(conds ...gen.Condition) IScaAuthUserDeviceDo
	Select(conds ...field.Expr) IScaAuthUserDeviceDo
	Where(conds ...gen.Condition) IScaAuthUserDeviceDo
	Order(conds ...field.Expr) IScaAuthUserDeviceDo
	Distinct(cols ...field.Expr) IScaAuthUserDeviceDo
	Omit(cols ...field.Expr) IScaAuthUserDeviceDo
	Join(table schema.Tabler, on ...field.Expr) IScaAuthUserDeviceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScaAuthUserDeviceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScaAuthUserDeviceDo
	Group(cols ...field.Expr) IScaAuthUserDeviceDo
	Having(conds ...gen.Condition) IScaAuthUserDeviceDo
	Limit(limit int) IScaAuthUserDeviceDo
	Offset(offset int) IScaAuthUserDeviceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScaAuthUserDeviceDo
	Unscoped() IScaAuthUserDeviceDo
	Create(values ...*model.ScaAuthUserDevice) error
	CreateInBatches(values []*model.ScaAuthUserDevice, batchSize int) error
	Save(values ...*model.ScaAuthUserDevice) error
	First() (*model.ScaAuthUserDevice, error)
	Take() (*model.ScaAuthUserDevice, error)
	Last() (*model.ScaAuthUserDevice, error)
	Find() ([]*model.ScaAuthUserDevice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaAuthUserDevice, err error)
	FindInBatches(result *[]*model.ScaAuthUserDevice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScaAuthUserDevice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScaAuthUserDeviceDo
	Assign(attrs ...field.AssignExpr) IScaAuthUserDeviceDo
	Joins(fields ...field.RelationField) IScaAuthUserDeviceDo
	Preload(fields ...field.RelationField) IScaAuthUserDeviceDo
	FirstOrInit() (*model.ScaAuthUserDevice, error)
	FirstOrCreate() (*model.ScaAuthUserDevice, error)
	FindByPage(offset int, limit int) (result []*model.ScaAuthUserDevice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScaAuthUserDeviceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scaAuthUserDeviceDo) Debug() IScaAuthUserDeviceDo {
	return s.withDO(s.DO.Debug())
}

func (s scaAuthUserDeviceDo) WithContext(ctx context.Context) IScaAuthUserDeviceDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scaAuthUserDeviceDo) ReadDB() IScaAuthUserDeviceDo {
	return s.Clauses(dbresolver.Read)
}

func (s scaAuthUserDeviceDo) WriteDB() IScaAuthUserDeviceDo {
	return s.Clauses(dbresolver.Write)
}

func (s scaAuthUserDeviceDo) Session(config *gorm.Session) IScaAuthUserDeviceDo {
	return s.withDO(s.DO.Session(config))
}

func (s scaAuthUserDeviceDo) Clauses(conds ...clause.Expression) IScaAuthUserDeviceDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scaAuthUserDeviceDo) Returning(value interface{}, columns ...string) IScaAuthUserDeviceDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scaAuthUserDeviceDo) Not(conds ...gen.Condition) IScaAuthUserDeviceDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scaAuthUserDeviceDo) Or(conds ...gen.Condition) IScaAuthUserDeviceDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scaAuthUserDeviceDo) Select(conds ...field.Expr) IScaAuthUserDeviceDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scaAuthUserDeviceDo) Where(conds ...gen.Condition) IScaAuthUserDeviceDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scaAuthUserDeviceDo) Order(conds ...field.Expr) IScaAuthUserDeviceDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scaAuthUserDeviceDo) Distinct(cols ...field.Expr) IScaAuthUserDeviceDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scaAuthUserDeviceDo) Omit(cols ...field.Expr) IScaAuthUserDeviceDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scaAuthUserDeviceDo) Join(table schema.Tabler, on ...field.Expr) IScaAuthUserDeviceDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scaAuthUserDeviceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScaAuthUserDeviceDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scaAuthUserDeviceDo) RightJoin(table schema.Tabler, on ...field.Expr) IScaAuthUserDeviceDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scaAuthUserDeviceDo) Group(cols ...field.Expr) IScaAuthUserDeviceDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scaAuthUserDeviceDo) Having(conds ...gen.Condition) IScaAuthUserDeviceDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scaAuthUserDeviceDo) Limit(limit int) IScaAuthUserDeviceDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scaAuthUserDeviceDo) Offset(offset int) IScaAuthUserDeviceDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scaAuthUserDeviceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScaAuthUserDeviceDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scaAuthUserDeviceDo) Unscoped() IScaAuthUserDeviceDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scaAuthUserDeviceDo) Create(values ...*model.ScaAuthUserDevice) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scaAuthUserDeviceDo) CreateInBatches(values []*model.ScaAuthUserDevice, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scaAuthUserDeviceDo) Save(values ...*model.ScaAuthUserDevice) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scaAuthUserDeviceDo) First() (*model.ScaAuthUserDevice, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthUserDevice), nil
	}
}

func (s scaAuthUserDeviceDo) Take() (*model.ScaAuthUserDevice, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthUserDevice), nil
	}
}

func (s scaAuthUserDeviceDo) Last() (*model.ScaAuthUserDevice, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthUserDevice), nil
	}
}

func (s scaAuthUserDeviceDo) Find() ([]*model.ScaAuthUserDevice, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScaAuthUserDevice), err
}

func (s scaAuthUserDeviceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaAuthUserDevice, err error) {
	buf := make([]*model.ScaAuthUserDevice, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scaAuthUserDeviceDo) FindInBatches(result *[]*model.ScaAuthUserDevice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scaAuthUserDeviceDo) Attrs(attrs ...field.AssignExpr) IScaAuthUserDeviceDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scaAuthUserDeviceDo) Assign(attrs ...field.AssignExpr) IScaAuthUserDeviceDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scaAuthUserDeviceDo) Joins(fields ...field.RelationField) IScaAuthUserDeviceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scaAuthUserDeviceDo) Preload(fields ...field.RelationField) IScaAuthUserDeviceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scaAuthUserDeviceDo) FirstOrInit() (*model.ScaAuthUserDevice, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthUserDevice), nil
	}
}

func (s scaAuthUserDeviceDo) FirstOrCreate() (*model.ScaAuthUserDevice, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthUserDevice), nil
	}
}

func (s scaAuthUserDeviceDo) FindByPage(offset int, limit int) (result []*model.ScaAuthUserDevice, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scaAuthUserDeviceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scaAuthUserDeviceDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scaAuthUserDeviceDo) Delete(models ...*model.ScaAuthUserDevice) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scaAuthUserDeviceDo) withDO(do gen.Dao) *scaAuthUserDeviceDo {
	s.DO = *do.(*gen.DO)
	return s
}
