// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schisandra-album-cloud-microservices/app/auth/model/mysql/model"
)

func newScaStorageThumb(db *gorm.DB, opts ...gen.DOOption) scaStorageThumb {
	_scaStorageThumb := scaStorageThumb{}

	_scaStorageThumb.scaStorageThumbDo.UseDB(db, opts...)
	_scaStorageThumb.scaStorageThumbDo.UseModel(&model.ScaStorageThumb{})

	tableName := _scaStorageThumb.scaStorageThumbDo.TableName()
	_scaStorageThumb.ALL = field.NewAsterisk(tableName)
	_scaStorageThumb.ID = field.NewInt64(tableName, "id")
	_scaStorageThumb.UserID = field.NewString(tableName, "user_id")
	_scaStorageThumb.InfoID = field.NewInt64(tableName, "info_id")
	_scaStorageThumb.ThumbPath = field.NewString(tableName, "thumb_path")
	_scaStorageThumb.ThumbW = field.NewFloat64(tableName, "thumb_w")
	_scaStorageThumb.ThumbH = field.NewFloat64(tableName, "thumb_h")
	_scaStorageThumb.ThumbSize = field.NewFloat64(tableName, "thumb_size")
	_scaStorageThumb.CreatedAt = field.NewTime(tableName, "created_at")
	_scaStorageThumb.UpdatedAt = field.NewTime(tableName, "updated_at")
	_scaStorageThumb.DeletedAt = field.NewField(tableName, "deleted_at")

	_scaStorageThumb.fillFieldMap()

	return _scaStorageThumb
}

// scaStorageThumb 缩略图表
type scaStorageThumb struct {
	scaStorageThumbDo

	ALL       field.Asterisk
	ID        field.Int64   // 主键
	UserID    field.String  // 用户ID
	InfoID    field.Int64   // 信息ID
	ThumbPath field.String  // 缩略图路径
	ThumbW    field.Float64 // 缩略图宽
	ThumbH    field.Float64 // 缩略图高
	ThumbSize field.Float64 // 缩略图大小
	CreatedAt field.Time    // 创建时间
	UpdatedAt field.Time    // 更新时间
	DeletedAt field.Field   // 删除时间

	fieldMap map[string]field.Expr
}

func (s scaStorageThumb) Table(newTableName string) *scaStorageThumb {
	s.scaStorageThumbDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scaStorageThumb) As(alias string) *scaStorageThumb {
	s.scaStorageThumbDo.DO = *(s.scaStorageThumbDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scaStorageThumb) updateTableName(table string) *scaStorageThumb {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewString(table, "user_id")
	s.InfoID = field.NewInt64(table, "info_id")
	s.ThumbPath = field.NewString(table, "thumb_path")
	s.ThumbW = field.NewFloat64(table, "thumb_w")
	s.ThumbH = field.NewFloat64(table, "thumb_h")
	s.ThumbSize = field.NewFloat64(table, "thumb_size")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *scaStorageThumb) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scaStorageThumb) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["info_id"] = s.InfoID
	s.fieldMap["thumb_path"] = s.ThumbPath
	s.fieldMap["thumb_w"] = s.ThumbW
	s.fieldMap["thumb_h"] = s.ThumbH
	s.fieldMap["thumb_size"] = s.ThumbSize
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s scaStorageThumb) clone(db *gorm.DB) scaStorageThumb {
	s.scaStorageThumbDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scaStorageThumb) replaceDB(db *gorm.DB) scaStorageThumb {
	s.scaStorageThumbDo.ReplaceDB(db)
	return s
}

type scaStorageThumbDo struct{ gen.DO }

type IScaStorageThumbDo interface {
	gen.SubQuery
	Debug() IScaStorageThumbDo
	WithContext(ctx context.Context) IScaStorageThumbDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScaStorageThumbDo
	WriteDB() IScaStorageThumbDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScaStorageThumbDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScaStorageThumbDo
	Not(conds ...gen.Condition) IScaStorageThumbDo
	Or(conds ...gen.Condition) IScaStorageThumbDo
	Select(conds ...field.Expr) IScaStorageThumbDo
	Where(conds ...gen.Condition) IScaStorageThumbDo
	Order(conds ...field.Expr) IScaStorageThumbDo
	Distinct(cols ...field.Expr) IScaStorageThumbDo
	Omit(cols ...field.Expr) IScaStorageThumbDo
	Join(table schema.Tabler, on ...field.Expr) IScaStorageThumbDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScaStorageThumbDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScaStorageThumbDo
	Group(cols ...field.Expr) IScaStorageThumbDo
	Having(conds ...gen.Condition) IScaStorageThumbDo
	Limit(limit int) IScaStorageThumbDo
	Offset(offset int) IScaStorageThumbDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScaStorageThumbDo
	Unscoped() IScaStorageThumbDo
	Create(values ...*model.ScaStorageThumb) error
	CreateInBatches(values []*model.ScaStorageThumb, batchSize int) error
	Save(values ...*model.ScaStorageThumb) error
	First() (*model.ScaStorageThumb, error)
	Take() (*model.ScaStorageThumb, error)
	Last() (*model.ScaStorageThumb, error)
	Find() ([]*model.ScaStorageThumb, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaStorageThumb, err error)
	FindInBatches(result *[]*model.ScaStorageThumb, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScaStorageThumb) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScaStorageThumbDo
	Assign(attrs ...field.AssignExpr) IScaStorageThumbDo
	Joins(fields ...field.RelationField) IScaStorageThumbDo
	Preload(fields ...field.RelationField) IScaStorageThumbDo
	FirstOrInit() (*model.ScaStorageThumb, error)
	FirstOrCreate() (*model.ScaStorageThumb, error)
	FindByPage(offset int, limit int) (result []*model.ScaStorageThumb, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScaStorageThumbDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scaStorageThumbDo) Debug() IScaStorageThumbDo {
	return s.withDO(s.DO.Debug())
}

func (s scaStorageThumbDo) WithContext(ctx context.Context) IScaStorageThumbDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scaStorageThumbDo) ReadDB() IScaStorageThumbDo {
	return s.Clauses(dbresolver.Read)
}

func (s scaStorageThumbDo) WriteDB() IScaStorageThumbDo {
	return s.Clauses(dbresolver.Write)
}

func (s scaStorageThumbDo) Session(config *gorm.Session) IScaStorageThumbDo {
	return s.withDO(s.DO.Session(config))
}

func (s scaStorageThumbDo) Clauses(conds ...clause.Expression) IScaStorageThumbDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scaStorageThumbDo) Returning(value interface{}, columns ...string) IScaStorageThumbDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scaStorageThumbDo) Not(conds ...gen.Condition) IScaStorageThumbDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scaStorageThumbDo) Or(conds ...gen.Condition) IScaStorageThumbDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scaStorageThumbDo) Select(conds ...field.Expr) IScaStorageThumbDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scaStorageThumbDo) Where(conds ...gen.Condition) IScaStorageThumbDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scaStorageThumbDo) Order(conds ...field.Expr) IScaStorageThumbDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scaStorageThumbDo) Distinct(cols ...field.Expr) IScaStorageThumbDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scaStorageThumbDo) Omit(cols ...field.Expr) IScaStorageThumbDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scaStorageThumbDo) Join(table schema.Tabler, on ...field.Expr) IScaStorageThumbDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scaStorageThumbDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScaStorageThumbDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scaStorageThumbDo) RightJoin(table schema.Tabler, on ...field.Expr) IScaStorageThumbDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scaStorageThumbDo) Group(cols ...field.Expr) IScaStorageThumbDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scaStorageThumbDo) Having(conds ...gen.Condition) IScaStorageThumbDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scaStorageThumbDo) Limit(limit int) IScaStorageThumbDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scaStorageThumbDo) Offset(offset int) IScaStorageThumbDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scaStorageThumbDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScaStorageThumbDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scaStorageThumbDo) Unscoped() IScaStorageThumbDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scaStorageThumbDo) Create(values ...*model.ScaStorageThumb) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scaStorageThumbDo) CreateInBatches(values []*model.ScaStorageThumb, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scaStorageThumbDo) Save(values ...*model.ScaStorageThumb) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scaStorageThumbDo) First() (*model.ScaStorageThumb, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageThumb), nil
	}
}

func (s scaStorageThumbDo) Take() (*model.ScaStorageThumb, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageThumb), nil
	}
}

func (s scaStorageThumbDo) Last() (*model.ScaStorageThumb, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageThumb), nil
	}
}

func (s scaStorageThumbDo) Find() ([]*model.ScaStorageThumb, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScaStorageThumb), err
}

func (s scaStorageThumbDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaStorageThumb, err error) {
	buf := make([]*model.ScaStorageThumb, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scaStorageThumbDo) FindInBatches(result *[]*model.ScaStorageThumb, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scaStorageThumbDo) Attrs(attrs ...field.AssignExpr) IScaStorageThumbDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scaStorageThumbDo) Assign(attrs ...field.AssignExpr) IScaStorageThumbDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scaStorageThumbDo) Joins(fields ...field.RelationField) IScaStorageThumbDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scaStorageThumbDo) Preload(fields ...field.RelationField) IScaStorageThumbDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scaStorageThumbDo) FirstOrInit() (*model.ScaStorageThumb, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageThumb), nil
	}
}

func (s scaStorageThumbDo) FirstOrCreate() (*model.ScaStorageThumb, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageThumb), nil
	}
}

func (s scaStorageThumbDo) FindByPage(offset int, limit int) (result []*model.ScaStorageThumb, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scaStorageThumbDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scaStorageThumbDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scaStorageThumbDo) Delete(models ...*model.ScaStorageThumb) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scaStorageThumbDo) withDO(do gen.Dao) *scaStorageThumbDo {
	s.DO = *do.(*gen.DO)
	return s
}
