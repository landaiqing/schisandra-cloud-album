// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schisandra-album-cloud-microservices/app/auth/model/mysql/model"
)

func newScaAuthPermissionRule(db *gorm.DB, opts ...gen.DOOption) scaAuthPermissionRule {
	_scaAuthPermissionRule := scaAuthPermissionRule{}

	_scaAuthPermissionRule.scaAuthPermissionRuleDo.UseDB(db, opts...)
	_scaAuthPermissionRule.scaAuthPermissionRuleDo.UseModel(&model.ScaAuthPermissionRule{})

	tableName := _scaAuthPermissionRule.scaAuthPermissionRuleDo.TableName()
	_scaAuthPermissionRule.ALL = field.NewAsterisk(tableName)
	_scaAuthPermissionRule.ID = field.NewInt64(tableName, "id")
	_scaAuthPermissionRule.Ptype = field.NewString(tableName, "ptype")
	_scaAuthPermissionRule.V0 = field.NewString(tableName, "v0")
	_scaAuthPermissionRule.V1 = field.NewString(tableName, "v1")
	_scaAuthPermissionRule.V2 = field.NewString(tableName, "v2")
	_scaAuthPermissionRule.V3 = field.NewString(tableName, "v3")
	_scaAuthPermissionRule.V4 = field.NewString(tableName, "v4")
	_scaAuthPermissionRule.V5 = field.NewString(tableName, "v5")

	_scaAuthPermissionRule.fillFieldMap()

	return _scaAuthPermissionRule
}

type scaAuthPermissionRule struct {
	scaAuthPermissionRuleDo

	ALL   field.Asterisk
	ID    field.Int64
	Ptype field.String
	V0    field.String
	V1    field.String
	V2    field.String
	V3    field.String
	V4    field.String
	V5    field.String

	fieldMap map[string]field.Expr
}

func (s scaAuthPermissionRule) Table(newTableName string) *scaAuthPermissionRule {
	s.scaAuthPermissionRuleDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scaAuthPermissionRule) As(alias string) *scaAuthPermissionRule {
	s.scaAuthPermissionRuleDo.DO = *(s.scaAuthPermissionRuleDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scaAuthPermissionRule) updateTableName(table string) *scaAuthPermissionRule {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Ptype = field.NewString(table, "ptype")
	s.V0 = field.NewString(table, "v0")
	s.V1 = field.NewString(table, "v1")
	s.V2 = field.NewString(table, "v2")
	s.V3 = field.NewString(table, "v3")
	s.V4 = field.NewString(table, "v4")
	s.V5 = field.NewString(table, "v5")

	s.fillFieldMap()

	return s
}

func (s *scaAuthPermissionRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scaAuthPermissionRule) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["ptype"] = s.Ptype
	s.fieldMap["v0"] = s.V0
	s.fieldMap["v1"] = s.V1
	s.fieldMap["v2"] = s.V2
	s.fieldMap["v3"] = s.V3
	s.fieldMap["v4"] = s.V4
	s.fieldMap["v5"] = s.V5
}

func (s scaAuthPermissionRule) clone(db *gorm.DB) scaAuthPermissionRule {
	s.scaAuthPermissionRuleDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scaAuthPermissionRule) replaceDB(db *gorm.DB) scaAuthPermissionRule {
	s.scaAuthPermissionRuleDo.ReplaceDB(db)
	return s
}

type scaAuthPermissionRuleDo struct{ gen.DO }

type IScaAuthPermissionRuleDo interface {
	gen.SubQuery
	Debug() IScaAuthPermissionRuleDo
	WithContext(ctx context.Context) IScaAuthPermissionRuleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScaAuthPermissionRuleDo
	WriteDB() IScaAuthPermissionRuleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScaAuthPermissionRuleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScaAuthPermissionRuleDo
	Not(conds ...gen.Condition) IScaAuthPermissionRuleDo
	Or(conds ...gen.Condition) IScaAuthPermissionRuleDo
	Select(conds ...field.Expr) IScaAuthPermissionRuleDo
	Where(conds ...gen.Condition) IScaAuthPermissionRuleDo
	Order(conds ...field.Expr) IScaAuthPermissionRuleDo
	Distinct(cols ...field.Expr) IScaAuthPermissionRuleDo
	Omit(cols ...field.Expr) IScaAuthPermissionRuleDo
	Join(table schema.Tabler, on ...field.Expr) IScaAuthPermissionRuleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScaAuthPermissionRuleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScaAuthPermissionRuleDo
	Group(cols ...field.Expr) IScaAuthPermissionRuleDo
	Having(conds ...gen.Condition) IScaAuthPermissionRuleDo
	Limit(limit int) IScaAuthPermissionRuleDo
	Offset(offset int) IScaAuthPermissionRuleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScaAuthPermissionRuleDo
	Unscoped() IScaAuthPermissionRuleDo
	Create(values ...*model.ScaAuthPermissionRule) error
	CreateInBatches(values []*model.ScaAuthPermissionRule, batchSize int) error
	Save(values ...*model.ScaAuthPermissionRule) error
	First() (*model.ScaAuthPermissionRule, error)
	Take() (*model.ScaAuthPermissionRule, error)
	Last() (*model.ScaAuthPermissionRule, error)
	Find() ([]*model.ScaAuthPermissionRule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaAuthPermissionRule, err error)
	FindInBatches(result *[]*model.ScaAuthPermissionRule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScaAuthPermissionRule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScaAuthPermissionRuleDo
	Assign(attrs ...field.AssignExpr) IScaAuthPermissionRuleDo
	Joins(fields ...field.RelationField) IScaAuthPermissionRuleDo
	Preload(fields ...field.RelationField) IScaAuthPermissionRuleDo
	FirstOrInit() (*model.ScaAuthPermissionRule, error)
	FirstOrCreate() (*model.ScaAuthPermissionRule, error)
	FindByPage(offset int, limit int) (result []*model.ScaAuthPermissionRule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScaAuthPermissionRuleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scaAuthPermissionRuleDo) Debug() IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.Debug())
}

func (s scaAuthPermissionRuleDo) WithContext(ctx context.Context) IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scaAuthPermissionRuleDo) ReadDB() IScaAuthPermissionRuleDo {
	return s.Clauses(dbresolver.Read)
}

func (s scaAuthPermissionRuleDo) WriteDB() IScaAuthPermissionRuleDo {
	return s.Clauses(dbresolver.Write)
}

func (s scaAuthPermissionRuleDo) Session(config *gorm.Session) IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.Session(config))
}

func (s scaAuthPermissionRuleDo) Clauses(conds ...clause.Expression) IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scaAuthPermissionRuleDo) Returning(value interface{}, columns ...string) IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scaAuthPermissionRuleDo) Not(conds ...gen.Condition) IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scaAuthPermissionRuleDo) Or(conds ...gen.Condition) IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scaAuthPermissionRuleDo) Select(conds ...field.Expr) IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scaAuthPermissionRuleDo) Where(conds ...gen.Condition) IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scaAuthPermissionRuleDo) Order(conds ...field.Expr) IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scaAuthPermissionRuleDo) Distinct(cols ...field.Expr) IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scaAuthPermissionRuleDo) Omit(cols ...field.Expr) IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scaAuthPermissionRuleDo) Join(table schema.Tabler, on ...field.Expr) IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scaAuthPermissionRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scaAuthPermissionRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scaAuthPermissionRuleDo) Group(cols ...field.Expr) IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scaAuthPermissionRuleDo) Having(conds ...gen.Condition) IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scaAuthPermissionRuleDo) Limit(limit int) IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scaAuthPermissionRuleDo) Offset(offset int) IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scaAuthPermissionRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scaAuthPermissionRuleDo) Unscoped() IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scaAuthPermissionRuleDo) Create(values ...*model.ScaAuthPermissionRule) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scaAuthPermissionRuleDo) CreateInBatches(values []*model.ScaAuthPermissionRule, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scaAuthPermissionRuleDo) Save(values ...*model.ScaAuthPermissionRule) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scaAuthPermissionRuleDo) First() (*model.ScaAuthPermissionRule, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthPermissionRule), nil
	}
}

func (s scaAuthPermissionRuleDo) Take() (*model.ScaAuthPermissionRule, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthPermissionRule), nil
	}
}

func (s scaAuthPermissionRuleDo) Last() (*model.ScaAuthPermissionRule, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthPermissionRule), nil
	}
}

func (s scaAuthPermissionRuleDo) Find() ([]*model.ScaAuthPermissionRule, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScaAuthPermissionRule), err
}

func (s scaAuthPermissionRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaAuthPermissionRule, err error) {
	buf := make([]*model.ScaAuthPermissionRule, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scaAuthPermissionRuleDo) FindInBatches(result *[]*model.ScaAuthPermissionRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scaAuthPermissionRuleDo) Attrs(attrs ...field.AssignExpr) IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scaAuthPermissionRuleDo) Assign(attrs ...field.AssignExpr) IScaAuthPermissionRuleDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scaAuthPermissionRuleDo) Joins(fields ...field.RelationField) IScaAuthPermissionRuleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scaAuthPermissionRuleDo) Preload(fields ...field.RelationField) IScaAuthPermissionRuleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scaAuthPermissionRuleDo) FirstOrInit() (*model.ScaAuthPermissionRule, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthPermissionRule), nil
	}
}

func (s scaAuthPermissionRuleDo) FirstOrCreate() (*model.ScaAuthPermissionRule, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthPermissionRule), nil
	}
}

func (s scaAuthPermissionRuleDo) FindByPage(offset int, limit int) (result []*model.ScaAuthPermissionRule, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scaAuthPermissionRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scaAuthPermissionRuleDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scaAuthPermissionRuleDo) Delete(models ...*model.ScaAuthPermissionRule) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scaAuthPermissionRuleDo) withDO(do gen.Dao) *scaAuthPermissionRuleDo {
	s.DO = *do.(*gen.DO)
	return s
}
