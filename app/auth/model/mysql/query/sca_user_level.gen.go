// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schisandra-album-cloud-microservices/app/auth/model/mysql/model"
)

func newScaUserLevel(db *gorm.DB, opts ...gen.DOOption) scaUserLevel {
	_scaUserLevel := scaUserLevel{}

	_scaUserLevel.scaUserLevelDo.UseDB(db, opts...)
	_scaUserLevel.scaUserLevelDo.UseModel(&model.ScaUserLevel{})

	tableName := _scaUserLevel.scaUserLevelDo.TableName()
	_scaUserLevel.ALL = field.NewAsterisk(tableName)
	_scaUserLevel.ID = field.NewInt64(tableName, "id")
	_scaUserLevel.UserID = field.NewString(tableName, "user_id")
	_scaUserLevel.LevelType = field.NewInt64(tableName, "level_type")
	_scaUserLevel.Level = field.NewInt64(tableName, "level")
	_scaUserLevel.LevelName = field.NewString(tableName, "level_name")
	_scaUserLevel.ExpStart = field.NewInt64(tableName, "exp_start")
	_scaUserLevel.ExpEnd = field.NewInt64(tableName, "exp_end")
	_scaUserLevel.Description = field.NewString(tableName, "description")
	_scaUserLevel.CreatedAt = field.NewTime(tableName, "created_at")
	_scaUserLevel.UpdatedAt = field.NewTime(tableName, "updated_at")
	_scaUserLevel.DeletedAt = field.NewField(tableName, "deleted_at")

	_scaUserLevel.fillFieldMap()

	return _scaUserLevel
}

// scaUserLevel 用户等级表
type scaUserLevel struct {
	scaUserLevelDo

	ALL         field.Asterisk
	ID          field.Int64  // 主键
	UserID      field.String // 用户Id
	LevelType   field.Int64  // 等级类型
	Level       field.Int64  // 等级
	LevelName   field.String // 等级名称
	ExpStart    field.Int64  // 开始经验值
	ExpEnd      field.Int64  // 结束经验值
	Description field.String // 等级描述
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 更新时间
	DeletedAt   field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s scaUserLevel) Table(newTableName string) *scaUserLevel {
	s.scaUserLevelDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scaUserLevel) As(alias string) *scaUserLevel {
	s.scaUserLevelDo.DO = *(s.scaUserLevelDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scaUserLevel) updateTableName(table string) *scaUserLevel {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewString(table, "user_id")
	s.LevelType = field.NewInt64(table, "level_type")
	s.Level = field.NewInt64(table, "level")
	s.LevelName = field.NewString(table, "level_name")
	s.ExpStart = field.NewInt64(table, "exp_start")
	s.ExpEnd = field.NewInt64(table, "exp_end")
	s.Description = field.NewString(table, "description")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *scaUserLevel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scaUserLevel) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["level_type"] = s.LevelType
	s.fieldMap["level"] = s.Level
	s.fieldMap["level_name"] = s.LevelName
	s.fieldMap["exp_start"] = s.ExpStart
	s.fieldMap["exp_end"] = s.ExpEnd
	s.fieldMap["description"] = s.Description
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s scaUserLevel) clone(db *gorm.DB) scaUserLevel {
	s.scaUserLevelDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scaUserLevel) replaceDB(db *gorm.DB) scaUserLevel {
	s.scaUserLevelDo.ReplaceDB(db)
	return s
}

type scaUserLevelDo struct{ gen.DO }

type IScaUserLevelDo interface {
	gen.SubQuery
	Debug() IScaUserLevelDo
	WithContext(ctx context.Context) IScaUserLevelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScaUserLevelDo
	WriteDB() IScaUserLevelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScaUserLevelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScaUserLevelDo
	Not(conds ...gen.Condition) IScaUserLevelDo
	Or(conds ...gen.Condition) IScaUserLevelDo
	Select(conds ...field.Expr) IScaUserLevelDo
	Where(conds ...gen.Condition) IScaUserLevelDo
	Order(conds ...field.Expr) IScaUserLevelDo
	Distinct(cols ...field.Expr) IScaUserLevelDo
	Omit(cols ...field.Expr) IScaUserLevelDo
	Join(table schema.Tabler, on ...field.Expr) IScaUserLevelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScaUserLevelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScaUserLevelDo
	Group(cols ...field.Expr) IScaUserLevelDo
	Having(conds ...gen.Condition) IScaUserLevelDo
	Limit(limit int) IScaUserLevelDo
	Offset(offset int) IScaUserLevelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScaUserLevelDo
	Unscoped() IScaUserLevelDo
	Create(values ...*model.ScaUserLevel) error
	CreateInBatches(values []*model.ScaUserLevel, batchSize int) error
	Save(values ...*model.ScaUserLevel) error
	First() (*model.ScaUserLevel, error)
	Take() (*model.ScaUserLevel, error)
	Last() (*model.ScaUserLevel, error)
	Find() ([]*model.ScaUserLevel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaUserLevel, err error)
	FindInBatches(result *[]*model.ScaUserLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScaUserLevel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScaUserLevelDo
	Assign(attrs ...field.AssignExpr) IScaUserLevelDo
	Joins(fields ...field.RelationField) IScaUserLevelDo
	Preload(fields ...field.RelationField) IScaUserLevelDo
	FirstOrInit() (*model.ScaUserLevel, error)
	FirstOrCreate() (*model.ScaUserLevel, error)
	FindByPage(offset int, limit int) (result []*model.ScaUserLevel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScaUserLevelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scaUserLevelDo) Debug() IScaUserLevelDo {
	return s.withDO(s.DO.Debug())
}

func (s scaUserLevelDo) WithContext(ctx context.Context) IScaUserLevelDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scaUserLevelDo) ReadDB() IScaUserLevelDo {
	return s.Clauses(dbresolver.Read)
}

func (s scaUserLevelDo) WriteDB() IScaUserLevelDo {
	return s.Clauses(dbresolver.Write)
}

func (s scaUserLevelDo) Session(config *gorm.Session) IScaUserLevelDo {
	return s.withDO(s.DO.Session(config))
}

func (s scaUserLevelDo) Clauses(conds ...clause.Expression) IScaUserLevelDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scaUserLevelDo) Returning(value interface{}, columns ...string) IScaUserLevelDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scaUserLevelDo) Not(conds ...gen.Condition) IScaUserLevelDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scaUserLevelDo) Or(conds ...gen.Condition) IScaUserLevelDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scaUserLevelDo) Select(conds ...field.Expr) IScaUserLevelDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scaUserLevelDo) Where(conds ...gen.Condition) IScaUserLevelDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scaUserLevelDo) Order(conds ...field.Expr) IScaUserLevelDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scaUserLevelDo) Distinct(cols ...field.Expr) IScaUserLevelDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scaUserLevelDo) Omit(cols ...field.Expr) IScaUserLevelDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scaUserLevelDo) Join(table schema.Tabler, on ...field.Expr) IScaUserLevelDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scaUserLevelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScaUserLevelDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scaUserLevelDo) RightJoin(table schema.Tabler, on ...field.Expr) IScaUserLevelDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scaUserLevelDo) Group(cols ...field.Expr) IScaUserLevelDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scaUserLevelDo) Having(conds ...gen.Condition) IScaUserLevelDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scaUserLevelDo) Limit(limit int) IScaUserLevelDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scaUserLevelDo) Offset(offset int) IScaUserLevelDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scaUserLevelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScaUserLevelDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scaUserLevelDo) Unscoped() IScaUserLevelDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scaUserLevelDo) Create(values ...*model.ScaUserLevel) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scaUserLevelDo) CreateInBatches(values []*model.ScaUserLevel, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scaUserLevelDo) Save(values ...*model.ScaUserLevel) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scaUserLevelDo) First() (*model.ScaUserLevel, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaUserLevel), nil
	}
}

func (s scaUserLevelDo) Take() (*model.ScaUserLevel, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaUserLevel), nil
	}
}

func (s scaUserLevelDo) Last() (*model.ScaUserLevel, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaUserLevel), nil
	}
}

func (s scaUserLevelDo) Find() ([]*model.ScaUserLevel, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScaUserLevel), err
}

func (s scaUserLevelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaUserLevel, err error) {
	buf := make([]*model.ScaUserLevel, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scaUserLevelDo) FindInBatches(result *[]*model.ScaUserLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scaUserLevelDo) Attrs(attrs ...field.AssignExpr) IScaUserLevelDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scaUserLevelDo) Assign(attrs ...field.AssignExpr) IScaUserLevelDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scaUserLevelDo) Joins(fields ...field.RelationField) IScaUserLevelDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scaUserLevelDo) Preload(fields ...field.RelationField) IScaUserLevelDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scaUserLevelDo) FirstOrInit() (*model.ScaUserLevel, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaUserLevel), nil
	}
}

func (s scaUserLevelDo) FirstOrCreate() (*model.ScaUserLevel, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaUserLevel), nil
	}
}

func (s scaUserLevelDo) FindByPage(offset int, limit int) (result []*model.ScaUserLevel, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scaUserLevelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scaUserLevelDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scaUserLevelDo) Delete(models ...*model.ScaUserLevel) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scaUserLevelDo) withDO(do gen.Dao) *scaUserLevelDo {
	s.DO = *do.(*gen.DO)
	return s
}
