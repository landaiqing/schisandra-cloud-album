// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schisandra-album-cloud-microservices/app/auth/model/mysql/model"
)

func newScaStorageConfig(db *gorm.DB, opts ...gen.DOOption) scaStorageConfig {
	_scaStorageConfig := scaStorageConfig{}

	_scaStorageConfig.scaStorageConfigDo.UseDB(db, opts...)
	_scaStorageConfig.scaStorageConfigDo.UseModel(&model.ScaStorageConfig{})

	tableName := _scaStorageConfig.scaStorageConfigDo.TableName()
	_scaStorageConfig.ALL = field.NewAsterisk(tableName)
	_scaStorageConfig.ID = field.NewInt64(tableName, "id")
	_scaStorageConfig.UserID = field.NewString(tableName, "user_id")
	_scaStorageConfig.Type = field.NewString(tableName, "type")
	_scaStorageConfig.Endpoint = field.NewString(tableName, "endpoint")
	_scaStorageConfig.AccessKey = field.NewString(tableName, "access_key")
	_scaStorageConfig.SecretKey = field.NewString(tableName, "secret_key")
	_scaStorageConfig.Bucket = field.NewString(tableName, "bucket")
	_scaStorageConfig.Region = field.NewString(tableName, "region")
	_scaStorageConfig.CreatedAt = field.NewTime(tableName, "created_at")
	_scaStorageConfig.UpdatedAt = field.NewTime(tableName, "updated_at")
	_scaStorageConfig.DeletedAt = field.NewField(tableName, "deleted_at")

	_scaStorageConfig.fillFieldMap()

	return _scaStorageConfig
}

type scaStorageConfig struct {
	scaStorageConfigDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键
	UserID    field.String // 用户ID
	Type      field.String // 类型
	Endpoint  field.String // 地址
	AccessKey field.String // 密钥key
	SecretKey field.String // 密钥
	Bucket    field.String // 存储桶
	Region    field.String // 地域
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s scaStorageConfig) Table(newTableName string) *scaStorageConfig {
	s.scaStorageConfigDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scaStorageConfig) As(alias string) *scaStorageConfig {
	s.scaStorageConfigDo.DO = *(s.scaStorageConfigDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scaStorageConfig) updateTableName(table string) *scaStorageConfig {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewString(table, "user_id")
	s.Type = field.NewString(table, "type")
	s.Endpoint = field.NewString(table, "endpoint")
	s.AccessKey = field.NewString(table, "access_key")
	s.SecretKey = field.NewString(table, "secret_key")
	s.Bucket = field.NewString(table, "bucket")
	s.Region = field.NewString(table, "region")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *scaStorageConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scaStorageConfig) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["type"] = s.Type
	s.fieldMap["endpoint"] = s.Endpoint
	s.fieldMap["access_key"] = s.AccessKey
	s.fieldMap["secret_key"] = s.SecretKey
	s.fieldMap["bucket"] = s.Bucket
	s.fieldMap["region"] = s.Region
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s scaStorageConfig) clone(db *gorm.DB) scaStorageConfig {
	s.scaStorageConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scaStorageConfig) replaceDB(db *gorm.DB) scaStorageConfig {
	s.scaStorageConfigDo.ReplaceDB(db)
	return s
}

type scaStorageConfigDo struct{ gen.DO }

type IScaStorageConfigDo interface {
	gen.SubQuery
	Debug() IScaStorageConfigDo
	WithContext(ctx context.Context) IScaStorageConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScaStorageConfigDo
	WriteDB() IScaStorageConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScaStorageConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScaStorageConfigDo
	Not(conds ...gen.Condition) IScaStorageConfigDo
	Or(conds ...gen.Condition) IScaStorageConfigDo
	Select(conds ...field.Expr) IScaStorageConfigDo
	Where(conds ...gen.Condition) IScaStorageConfigDo
	Order(conds ...field.Expr) IScaStorageConfigDo
	Distinct(cols ...field.Expr) IScaStorageConfigDo
	Omit(cols ...field.Expr) IScaStorageConfigDo
	Join(table schema.Tabler, on ...field.Expr) IScaStorageConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScaStorageConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScaStorageConfigDo
	Group(cols ...field.Expr) IScaStorageConfigDo
	Having(conds ...gen.Condition) IScaStorageConfigDo
	Limit(limit int) IScaStorageConfigDo
	Offset(offset int) IScaStorageConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScaStorageConfigDo
	Unscoped() IScaStorageConfigDo
	Create(values ...*model.ScaStorageConfig) error
	CreateInBatches(values []*model.ScaStorageConfig, batchSize int) error
	Save(values ...*model.ScaStorageConfig) error
	First() (*model.ScaStorageConfig, error)
	Take() (*model.ScaStorageConfig, error)
	Last() (*model.ScaStorageConfig, error)
	Find() ([]*model.ScaStorageConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaStorageConfig, err error)
	FindInBatches(result *[]*model.ScaStorageConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScaStorageConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScaStorageConfigDo
	Assign(attrs ...field.AssignExpr) IScaStorageConfigDo
	Joins(fields ...field.RelationField) IScaStorageConfigDo
	Preload(fields ...field.RelationField) IScaStorageConfigDo
	FirstOrInit() (*model.ScaStorageConfig, error)
	FirstOrCreate() (*model.ScaStorageConfig, error)
	FindByPage(offset int, limit int) (result []*model.ScaStorageConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScaStorageConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scaStorageConfigDo) Debug() IScaStorageConfigDo {
	return s.withDO(s.DO.Debug())
}

func (s scaStorageConfigDo) WithContext(ctx context.Context) IScaStorageConfigDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scaStorageConfigDo) ReadDB() IScaStorageConfigDo {
	return s.Clauses(dbresolver.Read)
}

func (s scaStorageConfigDo) WriteDB() IScaStorageConfigDo {
	return s.Clauses(dbresolver.Write)
}

func (s scaStorageConfigDo) Session(config *gorm.Session) IScaStorageConfigDo {
	return s.withDO(s.DO.Session(config))
}

func (s scaStorageConfigDo) Clauses(conds ...clause.Expression) IScaStorageConfigDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scaStorageConfigDo) Returning(value interface{}, columns ...string) IScaStorageConfigDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scaStorageConfigDo) Not(conds ...gen.Condition) IScaStorageConfigDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scaStorageConfigDo) Or(conds ...gen.Condition) IScaStorageConfigDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scaStorageConfigDo) Select(conds ...field.Expr) IScaStorageConfigDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scaStorageConfigDo) Where(conds ...gen.Condition) IScaStorageConfigDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scaStorageConfigDo) Order(conds ...field.Expr) IScaStorageConfigDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scaStorageConfigDo) Distinct(cols ...field.Expr) IScaStorageConfigDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scaStorageConfigDo) Omit(cols ...field.Expr) IScaStorageConfigDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scaStorageConfigDo) Join(table schema.Tabler, on ...field.Expr) IScaStorageConfigDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scaStorageConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScaStorageConfigDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scaStorageConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IScaStorageConfigDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scaStorageConfigDo) Group(cols ...field.Expr) IScaStorageConfigDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scaStorageConfigDo) Having(conds ...gen.Condition) IScaStorageConfigDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scaStorageConfigDo) Limit(limit int) IScaStorageConfigDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scaStorageConfigDo) Offset(offset int) IScaStorageConfigDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scaStorageConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScaStorageConfigDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scaStorageConfigDo) Unscoped() IScaStorageConfigDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scaStorageConfigDo) Create(values ...*model.ScaStorageConfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scaStorageConfigDo) CreateInBatches(values []*model.ScaStorageConfig, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scaStorageConfigDo) Save(values ...*model.ScaStorageConfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scaStorageConfigDo) First() (*model.ScaStorageConfig, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageConfig), nil
	}
}

func (s scaStorageConfigDo) Take() (*model.ScaStorageConfig, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageConfig), nil
	}
}

func (s scaStorageConfigDo) Last() (*model.ScaStorageConfig, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageConfig), nil
	}
}

func (s scaStorageConfigDo) Find() ([]*model.ScaStorageConfig, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScaStorageConfig), err
}

func (s scaStorageConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaStorageConfig, err error) {
	buf := make([]*model.ScaStorageConfig, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scaStorageConfigDo) FindInBatches(result *[]*model.ScaStorageConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scaStorageConfigDo) Attrs(attrs ...field.AssignExpr) IScaStorageConfigDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scaStorageConfigDo) Assign(attrs ...field.AssignExpr) IScaStorageConfigDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scaStorageConfigDo) Joins(fields ...field.RelationField) IScaStorageConfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scaStorageConfigDo) Preload(fields ...field.RelationField) IScaStorageConfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scaStorageConfigDo) FirstOrInit() (*model.ScaStorageConfig, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageConfig), nil
	}
}

func (s scaStorageConfigDo) FirstOrCreate() (*model.ScaStorageConfig, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageConfig), nil
	}
}

func (s scaStorageConfigDo) FindByPage(offset int, limit int) (result []*model.ScaStorageConfig, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scaStorageConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scaStorageConfigDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scaStorageConfigDo) Delete(models ...*model.ScaStorageConfig) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scaStorageConfigDo) withDO(do gen.Dao) *scaStorageConfigDo {
	s.DO = *do.(*gen.DO)
	return s
}
