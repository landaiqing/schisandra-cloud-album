// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"
	"schisandra-album-cloud-microservices/app/auth/model/mysql/model"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newScaMessageReport(db *gorm.DB, opts ...gen.DOOption) scaMessageReport {
	_scaMessageReport := scaMessageReport{}

	_scaMessageReport.scaMessageReportDo.UseDB(db, opts...)
	_scaMessageReport.scaMessageReportDo.UseModel(&model.ScaMessageReport{})

	tableName := _scaMessageReport.scaMessageReportDo.TableName()
	_scaMessageReport.ALL = field.NewAsterisk(tableName)
	_scaMessageReport.ID = field.NewInt64(tableName, "id")
	_scaMessageReport.UserID = field.NewString(tableName, "user_id")
	_scaMessageReport.Type = field.NewInt64(tableName, "type")
	_scaMessageReport.CommentID = field.NewInt64(tableName, "comment_id")
	_scaMessageReport.TopicID = field.NewString(tableName, "topic_id")
	_scaMessageReport.ReportType = field.NewInt64(tableName, "report_type")
	_scaMessageReport.ReportContent = field.NewString(tableName, "report_content")
	_scaMessageReport.ReportTag = field.NewString(tableName, "report_tag")
	_scaMessageReport.Status = field.NewInt64(tableName, "status")
	_scaMessageReport.CreatedAt = field.NewTime(tableName, "created_at")
	_scaMessageReport.UpdatedAt = field.NewTime(tableName, "updated_at")
	_scaMessageReport.DeletedAt = field.NewField(tableName, "deleted_at")

	_scaMessageReport.fillFieldMap()

	return _scaMessageReport
}

type scaMessageReport struct {
	scaMessageReportDo

	ALL           field.Asterisk
	ID            field.Int64  // 主键
	UserID        field.String // 用户Id
	Type          field.Int64  // 举报类型 0评论 1 相册
	CommentID     field.Int64  // 评论Id
	TopicID       field.String // 话题Id
	ReportType    field.Int64  // 举报
	ReportContent field.String // 举报说明内容
	ReportTag     field.String // 举报标签
	Status        field.Int64  // 状态（0 未处理 1 已处理）
	CreatedAt     field.Time   // 创建时间
	UpdatedAt     field.Time   // 更新时间
	DeletedAt     field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s scaMessageReport) Table(newTableName string) *scaMessageReport {
	s.scaMessageReportDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scaMessageReport) As(alias string) *scaMessageReport {
	s.scaMessageReportDo.DO = *(s.scaMessageReportDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scaMessageReport) updateTableName(table string) *scaMessageReport {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewString(table, "user_id")
	s.Type = field.NewInt64(table, "type")
	s.CommentID = field.NewInt64(table, "comment_id")
	s.TopicID = field.NewString(table, "topic_id")
	s.ReportType = field.NewInt64(table, "report_type")
	s.ReportContent = field.NewString(table, "report_content")
	s.ReportTag = field.NewString(table, "report_tag")
	s.Status = field.NewInt64(table, "status")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *scaMessageReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scaMessageReport) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["type"] = s.Type
	s.fieldMap["comment_id"] = s.CommentID
	s.fieldMap["topic_id"] = s.TopicID
	s.fieldMap["report_type"] = s.ReportType
	s.fieldMap["report_content"] = s.ReportContent
	s.fieldMap["report_tag"] = s.ReportTag
	s.fieldMap["status"] = s.Status
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s scaMessageReport) clone(db *gorm.DB) scaMessageReport {
	s.scaMessageReportDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scaMessageReport) replaceDB(db *gorm.DB) scaMessageReport {
	s.scaMessageReportDo.ReplaceDB(db)
	return s
}

type scaMessageReportDo struct{ gen.DO }

type IScaMessageReportDo interface {
	gen.SubQuery
	Debug() IScaMessageReportDo
	WithContext(ctx context.Context) IScaMessageReportDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScaMessageReportDo
	WriteDB() IScaMessageReportDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScaMessageReportDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScaMessageReportDo
	Not(conds ...gen.Condition) IScaMessageReportDo
	Or(conds ...gen.Condition) IScaMessageReportDo
	Select(conds ...field.Expr) IScaMessageReportDo
	Where(conds ...gen.Condition) IScaMessageReportDo
	Order(conds ...field.Expr) IScaMessageReportDo
	Distinct(cols ...field.Expr) IScaMessageReportDo
	Omit(cols ...field.Expr) IScaMessageReportDo
	Join(table schema.Tabler, on ...field.Expr) IScaMessageReportDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScaMessageReportDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScaMessageReportDo
	Group(cols ...field.Expr) IScaMessageReportDo
	Having(conds ...gen.Condition) IScaMessageReportDo
	Limit(limit int) IScaMessageReportDo
	Offset(offset int) IScaMessageReportDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScaMessageReportDo
	Unscoped() IScaMessageReportDo
	Create(values ...*model.ScaMessageReport) error
	CreateInBatches(values []*model.ScaMessageReport, batchSize int) error
	Save(values ...*model.ScaMessageReport) error
	First() (*model.ScaMessageReport, error)
	Take() (*model.ScaMessageReport, error)
	Last() (*model.ScaMessageReport, error)
	Find() ([]*model.ScaMessageReport, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaMessageReport, err error)
	FindInBatches(result *[]*model.ScaMessageReport, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScaMessageReport) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScaMessageReportDo
	Assign(attrs ...field.AssignExpr) IScaMessageReportDo
	Joins(fields ...field.RelationField) IScaMessageReportDo
	Preload(fields ...field.RelationField) IScaMessageReportDo
	FirstOrInit() (*model.ScaMessageReport, error)
	FirstOrCreate() (*model.ScaMessageReport, error)
	FindByPage(offset int, limit int) (result []*model.ScaMessageReport, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScaMessageReportDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scaMessageReportDo) Debug() IScaMessageReportDo {
	return s.withDO(s.DO.Debug())
}

func (s scaMessageReportDo) WithContext(ctx context.Context) IScaMessageReportDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scaMessageReportDo) ReadDB() IScaMessageReportDo {
	return s.Clauses(dbresolver.Read)
}

func (s scaMessageReportDo) WriteDB() IScaMessageReportDo {
	return s.Clauses(dbresolver.Write)
}

func (s scaMessageReportDo) Session(config *gorm.Session) IScaMessageReportDo {
	return s.withDO(s.DO.Session(config))
}

func (s scaMessageReportDo) Clauses(conds ...clause.Expression) IScaMessageReportDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scaMessageReportDo) Returning(value interface{}, columns ...string) IScaMessageReportDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scaMessageReportDo) Not(conds ...gen.Condition) IScaMessageReportDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scaMessageReportDo) Or(conds ...gen.Condition) IScaMessageReportDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scaMessageReportDo) Select(conds ...field.Expr) IScaMessageReportDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scaMessageReportDo) Where(conds ...gen.Condition) IScaMessageReportDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scaMessageReportDo) Order(conds ...field.Expr) IScaMessageReportDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scaMessageReportDo) Distinct(cols ...field.Expr) IScaMessageReportDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scaMessageReportDo) Omit(cols ...field.Expr) IScaMessageReportDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scaMessageReportDo) Join(table schema.Tabler, on ...field.Expr) IScaMessageReportDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scaMessageReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScaMessageReportDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scaMessageReportDo) RightJoin(table schema.Tabler, on ...field.Expr) IScaMessageReportDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scaMessageReportDo) Group(cols ...field.Expr) IScaMessageReportDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scaMessageReportDo) Having(conds ...gen.Condition) IScaMessageReportDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scaMessageReportDo) Limit(limit int) IScaMessageReportDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scaMessageReportDo) Offset(offset int) IScaMessageReportDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scaMessageReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScaMessageReportDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scaMessageReportDo) Unscoped() IScaMessageReportDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scaMessageReportDo) Create(values ...*model.ScaMessageReport) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scaMessageReportDo) CreateInBatches(values []*model.ScaMessageReport, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scaMessageReportDo) Save(values ...*model.ScaMessageReport) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scaMessageReportDo) First() (*model.ScaMessageReport, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaMessageReport), nil
	}
}

func (s scaMessageReportDo) Take() (*model.ScaMessageReport, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaMessageReport), nil
	}
}

func (s scaMessageReportDo) Last() (*model.ScaMessageReport, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaMessageReport), nil
	}
}

func (s scaMessageReportDo) Find() ([]*model.ScaMessageReport, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScaMessageReport), err
}

func (s scaMessageReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaMessageReport, err error) {
	buf := make([]*model.ScaMessageReport, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scaMessageReportDo) FindInBatches(result *[]*model.ScaMessageReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scaMessageReportDo) Attrs(attrs ...field.AssignExpr) IScaMessageReportDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scaMessageReportDo) Assign(attrs ...field.AssignExpr) IScaMessageReportDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scaMessageReportDo) Joins(fields ...field.RelationField) IScaMessageReportDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scaMessageReportDo) Preload(fields ...field.RelationField) IScaMessageReportDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scaMessageReportDo) FirstOrInit() (*model.ScaMessageReport, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaMessageReport), nil
	}
}

func (s scaMessageReportDo) FirstOrCreate() (*model.ScaMessageReport, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaMessageReport), nil
	}
}

func (s scaMessageReportDo) FindByPage(offset int, limit int) (result []*model.ScaMessageReport, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scaMessageReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scaMessageReportDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scaMessageReportDo) Delete(models ...*model.ScaMessageReport) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scaMessageReportDo) withDO(do gen.Dao) *scaMessageReportDo {
	s.DO = *do.(*gen.DO)
	return s
}
