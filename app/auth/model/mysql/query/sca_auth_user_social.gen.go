// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schisandra-album-cloud-microservices/app/auth/model/mysql/model"
)

func newScaAuthUserSocial(db *gorm.DB, opts ...gen.DOOption) scaAuthUserSocial {
	_scaAuthUserSocial := scaAuthUserSocial{}

	_scaAuthUserSocial.scaAuthUserSocialDo.UseDB(db, opts...)
	_scaAuthUserSocial.scaAuthUserSocialDo.UseModel(&model.ScaAuthUserSocial{})

	tableName := _scaAuthUserSocial.scaAuthUserSocialDo.TableName()
	_scaAuthUserSocial.ALL = field.NewAsterisk(tableName)
	_scaAuthUserSocial.ID = field.NewInt64(tableName, "id")
	_scaAuthUserSocial.UserID = field.NewString(tableName, "user_id")
	_scaAuthUserSocial.OpenID = field.NewString(tableName, "open_id")
	_scaAuthUserSocial.Source = field.NewString(tableName, "source")
	_scaAuthUserSocial.Status = field.NewInt64(tableName, "status")
	_scaAuthUserSocial.CreatedAt = field.NewTime(tableName, "created_at")
	_scaAuthUserSocial.UpdatedAt = field.NewTime(tableName, "updated_at")
	_scaAuthUserSocial.DeletedAt = field.NewField(tableName, "deleted_at")

	_scaAuthUserSocial.fillFieldMap()

	return _scaAuthUserSocial
}

// scaAuthUserSocial 第三方登录信息表
type scaAuthUserSocial struct {
	scaAuthUserSocialDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键ID
	UserID    field.String // 用户ID
	OpenID    field.String // 第三方用户的 open id
	Source    field.String // 第三方用户来源
	Status    field.Int64  // 状态 0正常 1 封禁
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s scaAuthUserSocial) Table(newTableName string) *scaAuthUserSocial {
	s.scaAuthUserSocialDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scaAuthUserSocial) As(alias string) *scaAuthUserSocial {
	s.scaAuthUserSocialDo.DO = *(s.scaAuthUserSocialDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scaAuthUserSocial) updateTableName(table string) *scaAuthUserSocial {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewString(table, "user_id")
	s.OpenID = field.NewString(table, "open_id")
	s.Source = field.NewString(table, "source")
	s.Status = field.NewInt64(table, "status")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *scaAuthUserSocial) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scaAuthUserSocial) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["open_id"] = s.OpenID
	s.fieldMap["source"] = s.Source
	s.fieldMap["status"] = s.Status
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s scaAuthUserSocial) clone(db *gorm.DB) scaAuthUserSocial {
	s.scaAuthUserSocialDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scaAuthUserSocial) replaceDB(db *gorm.DB) scaAuthUserSocial {
	s.scaAuthUserSocialDo.ReplaceDB(db)
	return s
}

type scaAuthUserSocialDo struct{ gen.DO }

type IScaAuthUserSocialDo interface {
	gen.SubQuery
	Debug() IScaAuthUserSocialDo
	WithContext(ctx context.Context) IScaAuthUserSocialDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScaAuthUserSocialDo
	WriteDB() IScaAuthUserSocialDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScaAuthUserSocialDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScaAuthUserSocialDo
	Not(conds ...gen.Condition) IScaAuthUserSocialDo
	Or(conds ...gen.Condition) IScaAuthUserSocialDo
	Select(conds ...field.Expr) IScaAuthUserSocialDo
	Where(conds ...gen.Condition) IScaAuthUserSocialDo
	Order(conds ...field.Expr) IScaAuthUserSocialDo
	Distinct(cols ...field.Expr) IScaAuthUserSocialDo
	Omit(cols ...field.Expr) IScaAuthUserSocialDo
	Join(table schema.Tabler, on ...field.Expr) IScaAuthUserSocialDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScaAuthUserSocialDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScaAuthUserSocialDo
	Group(cols ...field.Expr) IScaAuthUserSocialDo
	Having(conds ...gen.Condition) IScaAuthUserSocialDo
	Limit(limit int) IScaAuthUserSocialDo
	Offset(offset int) IScaAuthUserSocialDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScaAuthUserSocialDo
	Unscoped() IScaAuthUserSocialDo
	Create(values ...*model.ScaAuthUserSocial) error
	CreateInBatches(values []*model.ScaAuthUserSocial, batchSize int) error
	Save(values ...*model.ScaAuthUserSocial) error
	First() (*model.ScaAuthUserSocial, error)
	Take() (*model.ScaAuthUserSocial, error)
	Last() (*model.ScaAuthUserSocial, error)
	Find() ([]*model.ScaAuthUserSocial, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaAuthUserSocial, err error)
	FindInBatches(result *[]*model.ScaAuthUserSocial, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScaAuthUserSocial) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScaAuthUserSocialDo
	Assign(attrs ...field.AssignExpr) IScaAuthUserSocialDo
	Joins(fields ...field.RelationField) IScaAuthUserSocialDo
	Preload(fields ...field.RelationField) IScaAuthUserSocialDo
	FirstOrInit() (*model.ScaAuthUserSocial, error)
	FirstOrCreate() (*model.ScaAuthUserSocial, error)
	FindByPage(offset int, limit int) (result []*model.ScaAuthUserSocial, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScaAuthUserSocialDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scaAuthUserSocialDo) Debug() IScaAuthUserSocialDo {
	return s.withDO(s.DO.Debug())
}

func (s scaAuthUserSocialDo) WithContext(ctx context.Context) IScaAuthUserSocialDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scaAuthUserSocialDo) ReadDB() IScaAuthUserSocialDo {
	return s.Clauses(dbresolver.Read)
}

func (s scaAuthUserSocialDo) WriteDB() IScaAuthUserSocialDo {
	return s.Clauses(dbresolver.Write)
}

func (s scaAuthUserSocialDo) Session(config *gorm.Session) IScaAuthUserSocialDo {
	return s.withDO(s.DO.Session(config))
}

func (s scaAuthUserSocialDo) Clauses(conds ...clause.Expression) IScaAuthUserSocialDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scaAuthUserSocialDo) Returning(value interface{}, columns ...string) IScaAuthUserSocialDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scaAuthUserSocialDo) Not(conds ...gen.Condition) IScaAuthUserSocialDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scaAuthUserSocialDo) Or(conds ...gen.Condition) IScaAuthUserSocialDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scaAuthUserSocialDo) Select(conds ...field.Expr) IScaAuthUserSocialDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scaAuthUserSocialDo) Where(conds ...gen.Condition) IScaAuthUserSocialDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scaAuthUserSocialDo) Order(conds ...field.Expr) IScaAuthUserSocialDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scaAuthUserSocialDo) Distinct(cols ...field.Expr) IScaAuthUserSocialDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scaAuthUserSocialDo) Omit(cols ...field.Expr) IScaAuthUserSocialDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scaAuthUserSocialDo) Join(table schema.Tabler, on ...field.Expr) IScaAuthUserSocialDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scaAuthUserSocialDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScaAuthUserSocialDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scaAuthUserSocialDo) RightJoin(table schema.Tabler, on ...field.Expr) IScaAuthUserSocialDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scaAuthUserSocialDo) Group(cols ...field.Expr) IScaAuthUserSocialDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scaAuthUserSocialDo) Having(conds ...gen.Condition) IScaAuthUserSocialDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scaAuthUserSocialDo) Limit(limit int) IScaAuthUserSocialDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scaAuthUserSocialDo) Offset(offset int) IScaAuthUserSocialDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scaAuthUserSocialDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScaAuthUserSocialDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scaAuthUserSocialDo) Unscoped() IScaAuthUserSocialDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scaAuthUserSocialDo) Create(values ...*model.ScaAuthUserSocial) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scaAuthUserSocialDo) CreateInBatches(values []*model.ScaAuthUserSocial, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scaAuthUserSocialDo) Save(values ...*model.ScaAuthUserSocial) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scaAuthUserSocialDo) First() (*model.ScaAuthUserSocial, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthUserSocial), nil
	}
}

func (s scaAuthUserSocialDo) Take() (*model.ScaAuthUserSocial, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthUserSocial), nil
	}
}

func (s scaAuthUserSocialDo) Last() (*model.ScaAuthUserSocial, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthUserSocial), nil
	}
}

func (s scaAuthUserSocialDo) Find() ([]*model.ScaAuthUserSocial, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScaAuthUserSocial), err
}

func (s scaAuthUserSocialDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaAuthUserSocial, err error) {
	buf := make([]*model.ScaAuthUserSocial, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scaAuthUserSocialDo) FindInBatches(result *[]*model.ScaAuthUserSocial, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scaAuthUserSocialDo) Attrs(attrs ...field.AssignExpr) IScaAuthUserSocialDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scaAuthUserSocialDo) Assign(attrs ...field.AssignExpr) IScaAuthUserSocialDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scaAuthUserSocialDo) Joins(fields ...field.RelationField) IScaAuthUserSocialDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scaAuthUserSocialDo) Preload(fields ...field.RelationField) IScaAuthUserSocialDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scaAuthUserSocialDo) FirstOrInit() (*model.ScaAuthUserSocial, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthUserSocial), nil
	}
}

func (s scaAuthUserSocialDo) FirstOrCreate() (*model.ScaAuthUserSocial, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthUserSocial), nil
	}
}

func (s scaAuthUserSocialDo) FindByPage(offset int, limit int) (result []*model.ScaAuthUserSocial, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scaAuthUserSocialDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scaAuthUserSocialDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scaAuthUserSocialDo) Delete(models ...*model.ScaAuthUserSocial) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scaAuthUserSocialDo) withDO(do gen.Dao) *scaAuthUserSocialDo {
	s.DO = *do.(*gen.DO)
	return s
}
