// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schisandra-album-cloud-microservices/app/auth/model/mysql/model"
)

func newScaStorageTag(db *gorm.DB, opts ...gen.DOOption) scaStorageTag {
	_scaStorageTag := scaStorageTag{}

	_scaStorageTag.scaStorageTagDo.UseDB(db, opts...)
	_scaStorageTag.scaStorageTagDo.UseModel(&model.ScaStorageTag{})

	tableName := _scaStorageTag.scaStorageTagDo.TableName()
	_scaStorageTag.ALL = field.NewAsterisk(tableName)
	_scaStorageTag.ID = field.NewInt64(tableName, "id")
	_scaStorageTag.FileID = field.NewInt64(tableName, "file_id")
	_scaStorageTag.TagID = field.NewInt64(tableName, "tag_id")
	_scaStorageTag.CreatedAt = field.NewTime(tableName, "created_at")
	_scaStorageTag.UpdatedAt = field.NewTime(tableName, "updated_at")
	_scaStorageTag.DeletedAt = field.NewField(tableName, "deleted_at")

	_scaStorageTag.fillFieldMap()

	return _scaStorageTag
}

type scaStorageTag struct {
	scaStorageTagDo

	ALL       field.Asterisk
	ID        field.Int64 // 主键
	FileID    field.Int64 // 文件ID
	TagID     field.Int64 // 标签ID
	CreatedAt field.Time  // 创建时间
	UpdatedAt field.Time  // 更新时间
	DeletedAt field.Field // 删除时间

	fieldMap map[string]field.Expr
}

func (s scaStorageTag) Table(newTableName string) *scaStorageTag {
	s.scaStorageTagDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scaStorageTag) As(alias string) *scaStorageTag {
	s.scaStorageTagDo.DO = *(s.scaStorageTagDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scaStorageTag) updateTableName(table string) *scaStorageTag {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.FileID = field.NewInt64(table, "file_id")
	s.TagID = field.NewInt64(table, "tag_id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *scaStorageTag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scaStorageTag) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["file_id"] = s.FileID
	s.fieldMap["tag_id"] = s.TagID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s scaStorageTag) clone(db *gorm.DB) scaStorageTag {
	s.scaStorageTagDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scaStorageTag) replaceDB(db *gorm.DB) scaStorageTag {
	s.scaStorageTagDo.ReplaceDB(db)
	return s
}

type scaStorageTagDo struct{ gen.DO }

type IScaStorageTagDo interface {
	gen.SubQuery
	Debug() IScaStorageTagDo
	WithContext(ctx context.Context) IScaStorageTagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScaStorageTagDo
	WriteDB() IScaStorageTagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScaStorageTagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScaStorageTagDo
	Not(conds ...gen.Condition) IScaStorageTagDo
	Or(conds ...gen.Condition) IScaStorageTagDo
	Select(conds ...field.Expr) IScaStorageTagDo
	Where(conds ...gen.Condition) IScaStorageTagDo
	Order(conds ...field.Expr) IScaStorageTagDo
	Distinct(cols ...field.Expr) IScaStorageTagDo
	Omit(cols ...field.Expr) IScaStorageTagDo
	Join(table schema.Tabler, on ...field.Expr) IScaStorageTagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScaStorageTagDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScaStorageTagDo
	Group(cols ...field.Expr) IScaStorageTagDo
	Having(conds ...gen.Condition) IScaStorageTagDo
	Limit(limit int) IScaStorageTagDo
	Offset(offset int) IScaStorageTagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScaStorageTagDo
	Unscoped() IScaStorageTagDo
	Create(values ...*model.ScaStorageTag) error
	CreateInBatches(values []*model.ScaStorageTag, batchSize int) error
	Save(values ...*model.ScaStorageTag) error
	First() (*model.ScaStorageTag, error)
	Take() (*model.ScaStorageTag, error)
	Last() (*model.ScaStorageTag, error)
	Find() ([]*model.ScaStorageTag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaStorageTag, err error)
	FindInBatches(result *[]*model.ScaStorageTag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScaStorageTag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScaStorageTagDo
	Assign(attrs ...field.AssignExpr) IScaStorageTagDo
	Joins(fields ...field.RelationField) IScaStorageTagDo
	Preload(fields ...field.RelationField) IScaStorageTagDo
	FirstOrInit() (*model.ScaStorageTag, error)
	FirstOrCreate() (*model.ScaStorageTag, error)
	FindByPage(offset int, limit int) (result []*model.ScaStorageTag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScaStorageTagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scaStorageTagDo) Debug() IScaStorageTagDo {
	return s.withDO(s.DO.Debug())
}

func (s scaStorageTagDo) WithContext(ctx context.Context) IScaStorageTagDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scaStorageTagDo) ReadDB() IScaStorageTagDo {
	return s.Clauses(dbresolver.Read)
}

func (s scaStorageTagDo) WriteDB() IScaStorageTagDo {
	return s.Clauses(dbresolver.Write)
}

func (s scaStorageTagDo) Session(config *gorm.Session) IScaStorageTagDo {
	return s.withDO(s.DO.Session(config))
}

func (s scaStorageTagDo) Clauses(conds ...clause.Expression) IScaStorageTagDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scaStorageTagDo) Returning(value interface{}, columns ...string) IScaStorageTagDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scaStorageTagDo) Not(conds ...gen.Condition) IScaStorageTagDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scaStorageTagDo) Or(conds ...gen.Condition) IScaStorageTagDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scaStorageTagDo) Select(conds ...field.Expr) IScaStorageTagDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scaStorageTagDo) Where(conds ...gen.Condition) IScaStorageTagDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scaStorageTagDo) Order(conds ...field.Expr) IScaStorageTagDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scaStorageTagDo) Distinct(cols ...field.Expr) IScaStorageTagDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scaStorageTagDo) Omit(cols ...field.Expr) IScaStorageTagDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scaStorageTagDo) Join(table schema.Tabler, on ...field.Expr) IScaStorageTagDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scaStorageTagDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScaStorageTagDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scaStorageTagDo) RightJoin(table schema.Tabler, on ...field.Expr) IScaStorageTagDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scaStorageTagDo) Group(cols ...field.Expr) IScaStorageTagDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scaStorageTagDo) Having(conds ...gen.Condition) IScaStorageTagDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scaStorageTagDo) Limit(limit int) IScaStorageTagDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scaStorageTagDo) Offset(offset int) IScaStorageTagDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scaStorageTagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScaStorageTagDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scaStorageTagDo) Unscoped() IScaStorageTagDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scaStorageTagDo) Create(values ...*model.ScaStorageTag) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scaStorageTagDo) CreateInBatches(values []*model.ScaStorageTag, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scaStorageTagDo) Save(values ...*model.ScaStorageTag) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scaStorageTagDo) First() (*model.ScaStorageTag, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageTag), nil
	}
}

func (s scaStorageTagDo) Take() (*model.ScaStorageTag, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageTag), nil
	}
}

func (s scaStorageTagDo) Last() (*model.ScaStorageTag, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageTag), nil
	}
}

func (s scaStorageTagDo) Find() ([]*model.ScaStorageTag, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScaStorageTag), err
}

func (s scaStorageTagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaStorageTag, err error) {
	buf := make([]*model.ScaStorageTag, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scaStorageTagDo) FindInBatches(result *[]*model.ScaStorageTag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scaStorageTagDo) Attrs(attrs ...field.AssignExpr) IScaStorageTagDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scaStorageTagDo) Assign(attrs ...field.AssignExpr) IScaStorageTagDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scaStorageTagDo) Joins(fields ...field.RelationField) IScaStorageTagDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scaStorageTagDo) Preload(fields ...field.RelationField) IScaStorageTagDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scaStorageTagDo) FirstOrInit() (*model.ScaStorageTag, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageTag), nil
	}
}

func (s scaStorageTagDo) FirstOrCreate() (*model.ScaStorageTag, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageTag), nil
	}
}

func (s scaStorageTagDo) FindByPage(offset int, limit int) (result []*model.ScaStorageTag, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scaStorageTagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scaStorageTagDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scaStorageTagDo) Delete(models ...*model.ScaStorageTag) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scaStorageTagDo) withDO(do gen.Dao) *scaStorageTagDo {
	s.DO = *do.(*gen.DO)
	return s
}
