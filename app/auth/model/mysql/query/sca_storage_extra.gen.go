// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schisandra-album-cloud-microservices/app/auth/model/mysql/model"
)

func newScaStorageExtra(db *gorm.DB, opts ...gen.DOOption) scaStorageExtra {
	_scaStorageExtra := scaStorageExtra{}

	_scaStorageExtra.scaStorageExtraDo.UseDB(db, opts...)
	_scaStorageExtra.scaStorageExtraDo.UseModel(&model.ScaStorageExtra{})

	tableName := _scaStorageExtra.scaStorageExtraDo.TableName()
	_scaStorageExtra.ALL = field.NewAsterisk(tableName)
	_scaStorageExtra.ID = field.NewInt64(tableName, "id")
	_scaStorageExtra.UserID = field.NewString(tableName, "user_id")
	_scaStorageExtra.InfoID = field.NewInt64(tableName, "info_id")
	_scaStorageExtra.Category = field.NewString(tableName, "category")
	_scaStorageExtra.Tag = field.NewString(tableName, "tag")
	_scaStorageExtra.IsAnime = field.NewString(tableName, "is_anime")
	_scaStorageExtra.Landscape = field.NewString(tableName, "landscape")
	_scaStorageExtra.Hash = field.NewString(tableName, "hash")
	_scaStorageExtra.CreatedAt = field.NewTime(tableName, "created_at")
	_scaStorageExtra.UpdatedAt = field.NewTime(tableName, "updated_at")
	_scaStorageExtra.DeletedAt = field.NewField(tableName, "deleted_at")

	_scaStorageExtra.fillFieldMap()

	return _scaStorageExtra
}

// scaStorageExtra 文件信息额外表
type scaStorageExtra struct {
	scaStorageExtraDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键
	UserID    field.String // 用户ID
	InfoID    field.Int64  // 文件信息ID
	Category  field.String // 分类
	Tag       field.String // 标签
	IsAnime   field.String // 是否是动漫图片
	Landscape field.String // 风景类型
	Hash      field.String // 哈希值
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s scaStorageExtra) Table(newTableName string) *scaStorageExtra {
	s.scaStorageExtraDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scaStorageExtra) As(alias string) *scaStorageExtra {
	s.scaStorageExtraDo.DO = *(s.scaStorageExtraDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scaStorageExtra) updateTableName(table string) *scaStorageExtra {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewString(table, "user_id")
	s.InfoID = field.NewInt64(table, "info_id")
	s.Category = field.NewString(table, "category")
	s.Tag = field.NewString(table, "tag")
	s.IsAnime = field.NewString(table, "is_anime")
	s.Landscape = field.NewString(table, "landscape")
	s.Hash = field.NewString(table, "hash")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *scaStorageExtra) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scaStorageExtra) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["info_id"] = s.InfoID
	s.fieldMap["category"] = s.Category
	s.fieldMap["tag"] = s.Tag
	s.fieldMap["is_anime"] = s.IsAnime
	s.fieldMap["landscape"] = s.Landscape
	s.fieldMap["hash"] = s.Hash
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s scaStorageExtra) clone(db *gorm.DB) scaStorageExtra {
	s.scaStorageExtraDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scaStorageExtra) replaceDB(db *gorm.DB) scaStorageExtra {
	s.scaStorageExtraDo.ReplaceDB(db)
	return s
}

type scaStorageExtraDo struct{ gen.DO }

type IScaStorageExtraDo interface {
	gen.SubQuery
	Debug() IScaStorageExtraDo
	WithContext(ctx context.Context) IScaStorageExtraDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScaStorageExtraDo
	WriteDB() IScaStorageExtraDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScaStorageExtraDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScaStorageExtraDo
	Not(conds ...gen.Condition) IScaStorageExtraDo
	Or(conds ...gen.Condition) IScaStorageExtraDo
	Select(conds ...field.Expr) IScaStorageExtraDo
	Where(conds ...gen.Condition) IScaStorageExtraDo
	Order(conds ...field.Expr) IScaStorageExtraDo
	Distinct(cols ...field.Expr) IScaStorageExtraDo
	Omit(cols ...field.Expr) IScaStorageExtraDo
	Join(table schema.Tabler, on ...field.Expr) IScaStorageExtraDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScaStorageExtraDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScaStorageExtraDo
	Group(cols ...field.Expr) IScaStorageExtraDo
	Having(conds ...gen.Condition) IScaStorageExtraDo
	Limit(limit int) IScaStorageExtraDo
	Offset(offset int) IScaStorageExtraDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScaStorageExtraDo
	Unscoped() IScaStorageExtraDo
	Create(values ...*model.ScaStorageExtra) error
	CreateInBatches(values []*model.ScaStorageExtra, batchSize int) error
	Save(values ...*model.ScaStorageExtra) error
	First() (*model.ScaStorageExtra, error)
	Take() (*model.ScaStorageExtra, error)
	Last() (*model.ScaStorageExtra, error)
	Find() ([]*model.ScaStorageExtra, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaStorageExtra, err error)
	FindInBatches(result *[]*model.ScaStorageExtra, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScaStorageExtra) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScaStorageExtraDo
	Assign(attrs ...field.AssignExpr) IScaStorageExtraDo
	Joins(fields ...field.RelationField) IScaStorageExtraDo
	Preload(fields ...field.RelationField) IScaStorageExtraDo
	FirstOrInit() (*model.ScaStorageExtra, error)
	FirstOrCreate() (*model.ScaStorageExtra, error)
	FindByPage(offset int, limit int) (result []*model.ScaStorageExtra, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScaStorageExtraDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scaStorageExtraDo) Debug() IScaStorageExtraDo {
	return s.withDO(s.DO.Debug())
}

func (s scaStorageExtraDo) WithContext(ctx context.Context) IScaStorageExtraDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scaStorageExtraDo) ReadDB() IScaStorageExtraDo {
	return s.Clauses(dbresolver.Read)
}

func (s scaStorageExtraDo) WriteDB() IScaStorageExtraDo {
	return s.Clauses(dbresolver.Write)
}

func (s scaStorageExtraDo) Session(config *gorm.Session) IScaStorageExtraDo {
	return s.withDO(s.DO.Session(config))
}

func (s scaStorageExtraDo) Clauses(conds ...clause.Expression) IScaStorageExtraDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scaStorageExtraDo) Returning(value interface{}, columns ...string) IScaStorageExtraDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scaStorageExtraDo) Not(conds ...gen.Condition) IScaStorageExtraDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scaStorageExtraDo) Or(conds ...gen.Condition) IScaStorageExtraDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scaStorageExtraDo) Select(conds ...field.Expr) IScaStorageExtraDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scaStorageExtraDo) Where(conds ...gen.Condition) IScaStorageExtraDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scaStorageExtraDo) Order(conds ...field.Expr) IScaStorageExtraDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scaStorageExtraDo) Distinct(cols ...field.Expr) IScaStorageExtraDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scaStorageExtraDo) Omit(cols ...field.Expr) IScaStorageExtraDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scaStorageExtraDo) Join(table schema.Tabler, on ...field.Expr) IScaStorageExtraDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scaStorageExtraDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScaStorageExtraDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scaStorageExtraDo) RightJoin(table schema.Tabler, on ...field.Expr) IScaStorageExtraDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scaStorageExtraDo) Group(cols ...field.Expr) IScaStorageExtraDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scaStorageExtraDo) Having(conds ...gen.Condition) IScaStorageExtraDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scaStorageExtraDo) Limit(limit int) IScaStorageExtraDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scaStorageExtraDo) Offset(offset int) IScaStorageExtraDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scaStorageExtraDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScaStorageExtraDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scaStorageExtraDo) Unscoped() IScaStorageExtraDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scaStorageExtraDo) Create(values ...*model.ScaStorageExtra) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scaStorageExtraDo) CreateInBatches(values []*model.ScaStorageExtra, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scaStorageExtraDo) Save(values ...*model.ScaStorageExtra) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scaStorageExtraDo) First() (*model.ScaStorageExtra, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageExtra), nil
	}
}

func (s scaStorageExtraDo) Take() (*model.ScaStorageExtra, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageExtra), nil
	}
}

func (s scaStorageExtraDo) Last() (*model.ScaStorageExtra, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageExtra), nil
	}
}

func (s scaStorageExtraDo) Find() ([]*model.ScaStorageExtra, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScaStorageExtra), err
}

func (s scaStorageExtraDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaStorageExtra, err error) {
	buf := make([]*model.ScaStorageExtra, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scaStorageExtraDo) FindInBatches(result *[]*model.ScaStorageExtra, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scaStorageExtraDo) Attrs(attrs ...field.AssignExpr) IScaStorageExtraDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scaStorageExtraDo) Assign(attrs ...field.AssignExpr) IScaStorageExtraDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scaStorageExtraDo) Joins(fields ...field.RelationField) IScaStorageExtraDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scaStorageExtraDo) Preload(fields ...field.RelationField) IScaStorageExtraDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scaStorageExtraDo) FirstOrInit() (*model.ScaStorageExtra, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageExtra), nil
	}
}

func (s scaStorageExtraDo) FirstOrCreate() (*model.ScaStorageExtra, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageExtra), nil
	}
}

func (s scaStorageExtraDo) FindByPage(offset int, limit int) (result []*model.ScaStorageExtra, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scaStorageExtraDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scaStorageExtraDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scaStorageExtraDo) Delete(models ...*model.ScaStorageExtra) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scaStorageExtraDo) withDO(do gen.Dao) *scaStorageExtraDo {
	s.DO = *do.(*gen.DO)
	return s
}
