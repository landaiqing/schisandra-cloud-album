// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schisandra-album-cloud-microservices/app/auth/model/mysql/model"
)

func newScaStorageShareVisit(db *gorm.DB, opts ...gen.DOOption) scaStorageShareVisit {
	_scaStorageShareVisit := scaStorageShareVisit{}

	_scaStorageShareVisit.scaStorageShareVisitDo.UseDB(db, opts...)
	_scaStorageShareVisit.scaStorageShareVisitDo.UseModel(&model.ScaStorageShareVisit{})

	tableName := _scaStorageShareVisit.scaStorageShareVisitDo.TableName()
	_scaStorageShareVisit.ALL = field.NewAsterisk(tableName)
	_scaStorageShareVisit.ID = field.NewInt64(tableName, "id")
	_scaStorageShareVisit.UserID = field.NewString(tableName, "user_id")
	_scaStorageShareVisit.ShareID = field.NewInt64(tableName, "share_id")
	_scaStorageShareVisit.Views = field.NewInt64(tableName, "views")
	_scaStorageShareVisit.Version = field.NewField(tableName, "version")
	_scaStorageShareVisit.CreatedAt = field.NewTime(tableName, "created_at")
	_scaStorageShareVisit.UpdatedAt = field.NewTime(tableName, "updated_at")
	_scaStorageShareVisit.DeletedAt = field.NewField(tableName, "deleted_at")

	_scaStorageShareVisit.fillFieldMap()

	return _scaStorageShareVisit
}

// scaStorageShareVisit 分享浏览记录
type scaStorageShareVisit struct {
	scaStorageShareVisitDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键
	UserID    field.String // 用户ID
	ShareID   field.Int64  // 分享ID
	Views     field.Int64  // 浏览次数
	Version   field.Field  // 版本
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s scaStorageShareVisit) Table(newTableName string) *scaStorageShareVisit {
	s.scaStorageShareVisitDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scaStorageShareVisit) As(alias string) *scaStorageShareVisit {
	s.scaStorageShareVisitDo.DO = *(s.scaStorageShareVisitDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scaStorageShareVisit) updateTableName(table string) *scaStorageShareVisit {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewString(table, "user_id")
	s.ShareID = field.NewInt64(table, "share_id")
	s.Views = field.NewInt64(table, "views")
	s.Version = field.NewField(table, "version")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *scaStorageShareVisit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scaStorageShareVisit) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["share_id"] = s.ShareID
	s.fieldMap["views"] = s.Views
	s.fieldMap["version"] = s.Version
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s scaStorageShareVisit) clone(db *gorm.DB) scaStorageShareVisit {
	s.scaStorageShareVisitDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scaStorageShareVisit) replaceDB(db *gorm.DB) scaStorageShareVisit {
	s.scaStorageShareVisitDo.ReplaceDB(db)
	return s
}

type scaStorageShareVisitDo struct{ gen.DO }

type IScaStorageShareVisitDo interface {
	gen.SubQuery
	Debug() IScaStorageShareVisitDo
	WithContext(ctx context.Context) IScaStorageShareVisitDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScaStorageShareVisitDo
	WriteDB() IScaStorageShareVisitDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScaStorageShareVisitDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScaStorageShareVisitDo
	Not(conds ...gen.Condition) IScaStorageShareVisitDo
	Or(conds ...gen.Condition) IScaStorageShareVisitDo
	Select(conds ...field.Expr) IScaStorageShareVisitDo
	Where(conds ...gen.Condition) IScaStorageShareVisitDo
	Order(conds ...field.Expr) IScaStorageShareVisitDo
	Distinct(cols ...field.Expr) IScaStorageShareVisitDo
	Omit(cols ...field.Expr) IScaStorageShareVisitDo
	Join(table schema.Tabler, on ...field.Expr) IScaStorageShareVisitDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScaStorageShareVisitDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScaStorageShareVisitDo
	Group(cols ...field.Expr) IScaStorageShareVisitDo
	Having(conds ...gen.Condition) IScaStorageShareVisitDo
	Limit(limit int) IScaStorageShareVisitDo
	Offset(offset int) IScaStorageShareVisitDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScaStorageShareVisitDo
	Unscoped() IScaStorageShareVisitDo
	Create(values ...*model.ScaStorageShareVisit) error
	CreateInBatches(values []*model.ScaStorageShareVisit, batchSize int) error
	Save(values ...*model.ScaStorageShareVisit) error
	First() (*model.ScaStorageShareVisit, error)
	Take() (*model.ScaStorageShareVisit, error)
	Last() (*model.ScaStorageShareVisit, error)
	Find() ([]*model.ScaStorageShareVisit, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaStorageShareVisit, err error)
	FindInBatches(result *[]*model.ScaStorageShareVisit, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScaStorageShareVisit) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScaStorageShareVisitDo
	Assign(attrs ...field.AssignExpr) IScaStorageShareVisitDo
	Joins(fields ...field.RelationField) IScaStorageShareVisitDo
	Preload(fields ...field.RelationField) IScaStorageShareVisitDo
	FirstOrInit() (*model.ScaStorageShareVisit, error)
	FirstOrCreate() (*model.ScaStorageShareVisit, error)
	FindByPage(offset int, limit int) (result []*model.ScaStorageShareVisit, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScaStorageShareVisitDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scaStorageShareVisitDo) Debug() IScaStorageShareVisitDo {
	return s.withDO(s.DO.Debug())
}

func (s scaStorageShareVisitDo) WithContext(ctx context.Context) IScaStorageShareVisitDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scaStorageShareVisitDo) ReadDB() IScaStorageShareVisitDo {
	return s.Clauses(dbresolver.Read)
}

func (s scaStorageShareVisitDo) WriteDB() IScaStorageShareVisitDo {
	return s.Clauses(dbresolver.Write)
}

func (s scaStorageShareVisitDo) Session(config *gorm.Session) IScaStorageShareVisitDo {
	return s.withDO(s.DO.Session(config))
}

func (s scaStorageShareVisitDo) Clauses(conds ...clause.Expression) IScaStorageShareVisitDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scaStorageShareVisitDo) Returning(value interface{}, columns ...string) IScaStorageShareVisitDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scaStorageShareVisitDo) Not(conds ...gen.Condition) IScaStorageShareVisitDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scaStorageShareVisitDo) Or(conds ...gen.Condition) IScaStorageShareVisitDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scaStorageShareVisitDo) Select(conds ...field.Expr) IScaStorageShareVisitDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scaStorageShareVisitDo) Where(conds ...gen.Condition) IScaStorageShareVisitDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scaStorageShareVisitDo) Order(conds ...field.Expr) IScaStorageShareVisitDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scaStorageShareVisitDo) Distinct(cols ...field.Expr) IScaStorageShareVisitDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scaStorageShareVisitDo) Omit(cols ...field.Expr) IScaStorageShareVisitDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scaStorageShareVisitDo) Join(table schema.Tabler, on ...field.Expr) IScaStorageShareVisitDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scaStorageShareVisitDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScaStorageShareVisitDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scaStorageShareVisitDo) RightJoin(table schema.Tabler, on ...field.Expr) IScaStorageShareVisitDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scaStorageShareVisitDo) Group(cols ...field.Expr) IScaStorageShareVisitDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scaStorageShareVisitDo) Having(conds ...gen.Condition) IScaStorageShareVisitDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scaStorageShareVisitDo) Limit(limit int) IScaStorageShareVisitDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scaStorageShareVisitDo) Offset(offset int) IScaStorageShareVisitDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scaStorageShareVisitDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScaStorageShareVisitDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scaStorageShareVisitDo) Unscoped() IScaStorageShareVisitDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scaStorageShareVisitDo) Create(values ...*model.ScaStorageShareVisit) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scaStorageShareVisitDo) CreateInBatches(values []*model.ScaStorageShareVisit, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scaStorageShareVisitDo) Save(values ...*model.ScaStorageShareVisit) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scaStorageShareVisitDo) First() (*model.ScaStorageShareVisit, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageShareVisit), nil
	}
}

func (s scaStorageShareVisitDo) Take() (*model.ScaStorageShareVisit, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageShareVisit), nil
	}
}

func (s scaStorageShareVisitDo) Last() (*model.ScaStorageShareVisit, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageShareVisit), nil
	}
}

func (s scaStorageShareVisitDo) Find() ([]*model.ScaStorageShareVisit, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScaStorageShareVisit), err
}

func (s scaStorageShareVisitDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaStorageShareVisit, err error) {
	buf := make([]*model.ScaStorageShareVisit, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scaStorageShareVisitDo) FindInBatches(result *[]*model.ScaStorageShareVisit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scaStorageShareVisitDo) Attrs(attrs ...field.AssignExpr) IScaStorageShareVisitDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scaStorageShareVisitDo) Assign(attrs ...field.AssignExpr) IScaStorageShareVisitDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scaStorageShareVisitDo) Joins(fields ...field.RelationField) IScaStorageShareVisitDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scaStorageShareVisitDo) Preload(fields ...field.RelationField) IScaStorageShareVisitDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scaStorageShareVisitDo) FirstOrInit() (*model.ScaStorageShareVisit, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageShareVisit), nil
	}
}

func (s scaStorageShareVisitDo) FirstOrCreate() (*model.ScaStorageShareVisit, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageShareVisit), nil
	}
}

func (s scaStorageShareVisitDo) FindByPage(offset int, limit int) (result []*model.ScaStorageShareVisit, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scaStorageShareVisitDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scaStorageShareVisitDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scaStorageShareVisitDo) Delete(models ...*model.ScaStorageShareVisit) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scaStorageShareVisitDo) withDO(do gen.Dao) *scaStorageShareVisitDo {
	s.DO = *do.(*gen.DO)
	return s
}
