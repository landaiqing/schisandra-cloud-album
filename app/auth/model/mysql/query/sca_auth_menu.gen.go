// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"
	"schisandra-album-cloud-microservices/app/auth/model/mysql/model"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newScaAuthMenu(db *gorm.DB, opts ...gen.DOOption) scaAuthMenu {
	_scaAuthMenu := scaAuthMenu{}

	_scaAuthMenu.scaAuthMenuDo.UseDB(db, opts...)
	_scaAuthMenu.scaAuthMenuDo.UseModel(&model.ScaAuthMenu{})

	tableName := _scaAuthMenu.scaAuthMenuDo.TableName()
	_scaAuthMenu.ALL = field.NewAsterisk(tableName)
	_scaAuthMenu.ID = field.NewInt64(tableName, "id")
	_scaAuthMenu.MenuName = field.NewString(tableName, "menu_name")
	_scaAuthMenu.ParentID = field.NewInt64(tableName, "parent_id")
	_scaAuthMenu.Type = field.NewInt64(tableName, "type")
	_scaAuthMenu.Path = field.NewString(tableName, "path")
	_scaAuthMenu.Status = field.NewInt64(tableName, "status")
	_scaAuthMenu.Icon = field.NewString(tableName, "icon")
	_scaAuthMenu.MenuKey = field.NewString(tableName, "menu_key")
	_scaAuthMenu.Order_ = field.NewInt64(tableName, "order")
	_scaAuthMenu.CreatedAt = field.NewTime(tableName, "created_at")
	_scaAuthMenu.UpdatedAt = field.NewTime(tableName, "updated_at")
	_scaAuthMenu.Remark = field.NewString(tableName, "remark")
	_scaAuthMenu.DeletedAt = field.NewField(tableName, "deleted_at")

	_scaAuthMenu.fillFieldMap()

	return _scaAuthMenu
}

type scaAuthMenu struct {
	scaAuthMenuDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键ID
	MenuName  field.String // 名称
	ParentID  field.Int64  // 父ID
	Type      field.Int64  // 类型
	Path      field.String // 路径
	Status    field.Int64  // 状态 0 启用 1 停用
	Icon      field.String // 图标
	MenuKey   field.String // 关键字
	Order_    field.Int64  // 排序
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	Remark    field.String // 备注 描述
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s scaAuthMenu) Table(newTableName string) *scaAuthMenu {
	s.scaAuthMenuDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scaAuthMenu) As(alias string) *scaAuthMenu {
	s.scaAuthMenuDo.DO = *(s.scaAuthMenuDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scaAuthMenu) updateTableName(table string) *scaAuthMenu {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.MenuName = field.NewString(table, "menu_name")
	s.ParentID = field.NewInt64(table, "parent_id")
	s.Type = field.NewInt64(table, "type")
	s.Path = field.NewString(table, "path")
	s.Status = field.NewInt64(table, "status")
	s.Icon = field.NewString(table, "icon")
	s.MenuKey = field.NewString(table, "menu_key")
	s.Order_ = field.NewInt64(table, "order")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.Remark = field.NewString(table, "remark")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *scaAuthMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scaAuthMenu) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["id"] = s.ID
	s.fieldMap["menu_name"] = s.MenuName
	s.fieldMap["parent_id"] = s.ParentID
	s.fieldMap["type"] = s.Type
	s.fieldMap["path"] = s.Path
	s.fieldMap["status"] = s.Status
	s.fieldMap["icon"] = s.Icon
	s.fieldMap["menu_key"] = s.MenuKey
	s.fieldMap["order"] = s.Order_
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s scaAuthMenu) clone(db *gorm.DB) scaAuthMenu {
	s.scaAuthMenuDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scaAuthMenu) replaceDB(db *gorm.DB) scaAuthMenu {
	s.scaAuthMenuDo.ReplaceDB(db)
	return s
}

type scaAuthMenuDo struct{ gen.DO }

type IScaAuthMenuDo interface {
	gen.SubQuery
	Debug() IScaAuthMenuDo
	WithContext(ctx context.Context) IScaAuthMenuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScaAuthMenuDo
	WriteDB() IScaAuthMenuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScaAuthMenuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScaAuthMenuDo
	Not(conds ...gen.Condition) IScaAuthMenuDo
	Or(conds ...gen.Condition) IScaAuthMenuDo
	Select(conds ...field.Expr) IScaAuthMenuDo
	Where(conds ...gen.Condition) IScaAuthMenuDo
	Order(conds ...field.Expr) IScaAuthMenuDo
	Distinct(cols ...field.Expr) IScaAuthMenuDo
	Omit(cols ...field.Expr) IScaAuthMenuDo
	Join(table schema.Tabler, on ...field.Expr) IScaAuthMenuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScaAuthMenuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScaAuthMenuDo
	Group(cols ...field.Expr) IScaAuthMenuDo
	Having(conds ...gen.Condition) IScaAuthMenuDo
	Limit(limit int) IScaAuthMenuDo
	Offset(offset int) IScaAuthMenuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScaAuthMenuDo
	Unscoped() IScaAuthMenuDo
	Create(values ...*model.ScaAuthMenu) error
	CreateInBatches(values []*model.ScaAuthMenu, batchSize int) error
	Save(values ...*model.ScaAuthMenu) error
	First() (*model.ScaAuthMenu, error)
	Take() (*model.ScaAuthMenu, error)
	Last() (*model.ScaAuthMenu, error)
	Find() ([]*model.ScaAuthMenu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaAuthMenu, err error)
	FindInBatches(result *[]*model.ScaAuthMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScaAuthMenu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScaAuthMenuDo
	Assign(attrs ...field.AssignExpr) IScaAuthMenuDo
	Joins(fields ...field.RelationField) IScaAuthMenuDo
	Preload(fields ...field.RelationField) IScaAuthMenuDo
	FirstOrInit() (*model.ScaAuthMenu, error)
	FirstOrCreate() (*model.ScaAuthMenu, error)
	FindByPage(offset int, limit int) (result []*model.ScaAuthMenu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScaAuthMenuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scaAuthMenuDo) Debug() IScaAuthMenuDo {
	return s.withDO(s.DO.Debug())
}

func (s scaAuthMenuDo) WithContext(ctx context.Context) IScaAuthMenuDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scaAuthMenuDo) ReadDB() IScaAuthMenuDo {
	return s.Clauses(dbresolver.Read)
}

func (s scaAuthMenuDo) WriteDB() IScaAuthMenuDo {
	return s.Clauses(dbresolver.Write)
}

func (s scaAuthMenuDo) Session(config *gorm.Session) IScaAuthMenuDo {
	return s.withDO(s.DO.Session(config))
}

func (s scaAuthMenuDo) Clauses(conds ...clause.Expression) IScaAuthMenuDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scaAuthMenuDo) Returning(value interface{}, columns ...string) IScaAuthMenuDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scaAuthMenuDo) Not(conds ...gen.Condition) IScaAuthMenuDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scaAuthMenuDo) Or(conds ...gen.Condition) IScaAuthMenuDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scaAuthMenuDo) Select(conds ...field.Expr) IScaAuthMenuDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scaAuthMenuDo) Where(conds ...gen.Condition) IScaAuthMenuDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scaAuthMenuDo) Order(conds ...field.Expr) IScaAuthMenuDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scaAuthMenuDo) Distinct(cols ...field.Expr) IScaAuthMenuDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scaAuthMenuDo) Omit(cols ...field.Expr) IScaAuthMenuDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scaAuthMenuDo) Join(table schema.Tabler, on ...field.Expr) IScaAuthMenuDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scaAuthMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScaAuthMenuDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scaAuthMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) IScaAuthMenuDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scaAuthMenuDo) Group(cols ...field.Expr) IScaAuthMenuDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scaAuthMenuDo) Having(conds ...gen.Condition) IScaAuthMenuDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scaAuthMenuDo) Limit(limit int) IScaAuthMenuDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scaAuthMenuDo) Offset(offset int) IScaAuthMenuDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scaAuthMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScaAuthMenuDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scaAuthMenuDo) Unscoped() IScaAuthMenuDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scaAuthMenuDo) Create(values ...*model.ScaAuthMenu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scaAuthMenuDo) CreateInBatches(values []*model.ScaAuthMenu, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scaAuthMenuDo) Save(values ...*model.ScaAuthMenu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scaAuthMenuDo) First() (*model.ScaAuthMenu, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthMenu), nil
	}
}

func (s scaAuthMenuDo) Take() (*model.ScaAuthMenu, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthMenu), nil
	}
}

func (s scaAuthMenuDo) Last() (*model.ScaAuthMenu, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthMenu), nil
	}
}

func (s scaAuthMenuDo) Find() ([]*model.ScaAuthMenu, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScaAuthMenu), err
}

func (s scaAuthMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaAuthMenu, err error) {
	buf := make([]*model.ScaAuthMenu, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scaAuthMenuDo) FindInBatches(result *[]*model.ScaAuthMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scaAuthMenuDo) Attrs(attrs ...field.AssignExpr) IScaAuthMenuDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scaAuthMenuDo) Assign(attrs ...field.AssignExpr) IScaAuthMenuDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scaAuthMenuDo) Joins(fields ...field.RelationField) IScaAuthMenuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scaAuthMenuDo) Preload(fields ...field.RelationField) IScaAuthMenuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scaAuthMenuDo) FirstOrInit() (*model.ScaAuthMenu, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthMenu), nil
	}
}

func (s scaAuthMenuDo) FirstOrCreate() (*model.ScaAuthMenu, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaAuthMenu), nil
	}
}

func (s scaAuthMenuDo) FindByPage(offset int, limit int) (result []*model.ScaAuthMenu, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scaAuthMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scaAuthMenuDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scaAuthMenuDo) Delete(models ...*model.ScaAuthMenu) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scaAuthMenuDo) withDO(do gen.Dao) *scaAuthMenuDo {
	s.DO = *do.(*gen.DO)
	return s
}
