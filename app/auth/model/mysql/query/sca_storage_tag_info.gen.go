// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schisandra-album-cloud-microservices/app/auth/model/mysql/model"
)

func newScaStorageTagInfo(db *gorm.DB, opts ...gen.DOOption) scaStorageTagInfo {
	_scaStorageTagInfo := scaStorageTagInfo{}

	_scaStorageTagInfo.scaStorageTagInfoDo.UseDB(db, opts...)
	_scaStorageTagInfo.scaStorageTagInfoDo.UseModel(&model.ScaStorageTagInfo{})

	tableName := _scaStorageTagInfo.scaStorageTagInfoDo.TableName()
	_scaStorageTagInfo.ALL = field.NewAsterisk(tableName)
	_scaStorageTagInfo.ID = field.NewInt64(tableName, "id")
	_scaStorageTagInfo.TagName = field.NewString(tableName, "tag_name")
	_scaStorageTagInfo.TagKey = field.NewString(tableName, "tag_key")
	_scaStorageTagInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_scaStorageTagInfo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_scaStorageTagInfo.DeletedAt = field.NewField(tableName, "deleted_at")

	_scaStorageTagInfo.fillFieldMap()

	return _scaStorageTagInfo
}

type scaStorageTagInfo struct {
	scaStorageTagInfoDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键
	TagName   field.String // 标签名称
	TagKey    field.String // 标签关键字
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s scaStorageTagInfo) Table(newTableName string) *scaStorageTagInfo {
	s.scaStorageTagInfoDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scaStorageTagInfo) As(alias string) *scaStorageTagInfo {
	s.scaStorageTagInfoDo.DO = *(s.scaStorageTagInfoDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scaStorageTagInfo) updateTableName(table string) *scaStorageTagInfo {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.TagName = field.NewString(table, "tag_name")
	s.TagKey = field.NewString(table, "tag_key")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *scaStorageTagInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scaStorageTagInfo) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["id"] = s.ID
	s.fieldMap["tag_name"] = s.TagName
	s.fieldMap["tag_key"] = s.TagKey
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s scaStorageTagInfo) clone(db *gorm.DB) scaStorageTagInfo {
	s.scaStorageTagInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scaStorageTagInfo) replaceDB(db *gorm.DB) scaStorageTagInfo {
	s.scaStorageTagInfoDo.ReplaceDB(db)
	return s
}

type scaStorageTagInfoDo struct{ gen.DO }

type IScaStorageTagInfoDo interface {
	gen.SubQuery
	Debug() IScaStorageTagInfoDo
	WithContext(ctx context.Context) IScaStorageTagInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScaStorageTagInfoDo
	WriteDB() IScaStorageTagInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScaStorageTagInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScaStorageTagInfoDo
	Not(conds ...gen.Condition) IScaStorageTagInfoDo
	Or(conds ...gen.Condition) IScaStorageTagInfoDo
	Select(conds ...field.Expr) IScaStorageTagInfoDo
	Where(conds ...gen.Condition) IScaStorageTagInfoDo
	Order(conds ...field.Expr) IScaStorageTagInfoDo
	Distinct(cols ...field.Expr) IScaStorageTagInfoDo
	Omit(cols ...field.Expr) IScaStorageTagInfoDo
	Join(table schema.Tabler, on ...field.Expr) IScaStorageTagInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScaStorageTagInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScaStorageTagInfoDo
	Group(cols ...field.Expr) IScaStorageTagInfoDo
	Having(conds ...gen.Condition) IScaStorageTagInfoDo
	Limit(limit int) IScaStorageTagInfoDo
	Offset(offset int) IScaStorageTagInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScaStorageTagInfoDo
	Unscoped() IScaStorageTagInfoDo
	Create(values ...*model.ScaStorageTagInfo) error
	CreateInBatches(values []*model.ScaStorageTagInfo, batchSize int) error
	Save(values ...*model.ScaStorageTagInfo) error
	First() (*model.ScaStorageTagInfo, error)
	Take() (*model.ScaStorageTagInfo, error)
	Last() (*model.ScaStorageTagInfo, error)
	Find() ([]*model.ScaStorageTagInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaStorageTagInfo, err error)
	FindInBatches(result *[]*model.ScaStorageTagInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScaStorageTagInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScaStorageTagInfoDo
	Assign(attrs ...field.AssignExpr) IScaStorageTagInfoDo
	Joins(fields ...field.RelationField) IScaStorageTagInfoDo
	Preload(fields ...field.RelationField) IScaStorageTagInfoDo
	FirstOrInit() (*model.ScaStorageTagInfo, error)
	FirstOrCreate() (*model.ScaStorageTagInfo, error)
	FindByPage(offset int, limit int) (result []*model.ScaStorageTagInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScaStorageTagInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scaStorageTagInfoDo) Debug() IScaStorageTagInfoDo {
	return s.withDO(s.DO.Debug())
}

func (s scaStorageTagInfoDo) WithContext(ctx context.Context) IScaStorageTagInfoDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scaStorageTagInfoDo) ReadDB() IScaStorageTagInfoDo {
	return s.Clauses(dbresolver.Read)
}

func (s scaStorageTagInfoDo) WriteDB() IScaStorageTagInfoDo {
	return s.Clauses(dbresolver.Write)
}

func (s scaStorageTagInfoDo) Session(config *gorm.Session) IScaStorageTagInfoDo {
	return s.withDO(s.DO.Session(config))
}

func (s scaStorageTagInfoDo) Clauses(conds ...clause.Expression) IScaStorageTagInfoDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scaStorageTagInfoDo) Returning(value interface{}, columns ...string) IScaStorageTagInfoDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scaStorageTagInfoDo) Not(conds ...gen.Condition) IScaStorageTagInfoDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scaStorageTagInfoDo) Or(conds ...gen.Condition) IScaStorageTagInfoDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scaStorageTagInfoDo) Select(conds ...field.Expr) IScaStorageTagInfoDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scaStorageTagInfoDo) Where(conds ...gen.Condition) IScaStorageTagInfoDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scaStorageTagInfoDo) Order(conds ...field.Expr) IScaStorageTagInfoDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scaStorageTagInfoDo) Distinct(cols ...field.Expr) IScaStorageTagInfoDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scaStorageTagInfoDo) Omit(cols ...field.Expr) IScaStorageTagInfoDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scaStorageTagInfoDo) Join(table schema.Tabler, on ...field.Expr) IScaStorageTagInfoDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scaStorageTagInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScaStorageTagInfoDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scaStorageTagInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IScaStorageTagInfoDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scaStorageTagInfoDo) Group(cols ...field.Expr) IScaStorageTagInfoDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scaStorageTagInfoDo) Having(conds ...gen.Condition) IScaStorageTagInfoDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scaStorageTagInfoDo) Limit(limit int) IScaStorageTagInfoDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scaStorageTagInfoDo) Offset(offset int) IScaStorageTagInfoDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scaStorageTagInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScaStorageTagInfoDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scaStorageTagInfoDo) Unscoped() IScaStorageTagInfoDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scaStorageTagInfoDo) Create(values ...*model.ScaStorageTagInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scaStorageTagInfoDo) CreateInBatches(values []*model.ScaStorageTagInfo, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scaStorageTagInfoDo) Save(values ...*model.ScaStorageTagInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scaStorageTagInfoDo) First() (*model.ScaStorageTagInfo, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageTagInfo), nil
	}
}

func (s scaStorageTagInfoDo) Take() (*model.ScaStorageTagInfo, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageTagInfo), nil
	}
}

func (s scaStorageTagInfoDo) Last() (*model.ScaStorageTagInfo, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageTagInfo), nil
	}
}

func (s scaStorageTagInfoDo) Find() ([]*model.ScaStorageTagInfo, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScaStorageTagInfo), err
}

func (s scaStorageTagInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaStorageTagInfo, err error) {
	buf := make([]*model.ScaStorageTagInfo, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scaStorageTagInfoDo) FindInBatches(result *[]*model.ScaStorageTagInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scaStorageTagInfoDo) Attrs(attrs ...field.AssignExpr) IScaStorageTagInfoDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scaStorageTagInfoDo) Assign(attrs ...field.AssignExpr) IScaStorageTagInfoDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scaStorageTagInfoDo) Joins(fields ...field.RelationField) IScaStorageTagInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scaStorageTagInfoDo) Preload(fields ...field.RelationField) IScaStorageTagInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scaStorageTagInfoDo) FirstOrInit() (*model.ScaStorageTagInfo, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageTagInfo), nil
	}
}

func (s scaStorageTagInfoDo) FirstOrCreate() (*model.ScaStorageTagInfo, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageTagInfo), nil
	}
}

func (s scaStorageTagInfoDo) FindByPage(offset int, limit int) (result []*model.ScaStorageTagInfo, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scaStorageTagInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scaStorageTagInfoDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scaStorageTagInfoDo) Delete(models ...*model.ScaStorageTagInfo) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scaStorageTagInfoDo) withDO(do gen.Dao) *scaStorageTagInfoDo {
	s.DO = *do.(*gen.DO)
	return s
}
