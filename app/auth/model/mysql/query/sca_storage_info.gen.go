// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schisandra-album-cloud-microservices/app/auth/model/mysql/model"
)

func newScaStorageInfo(db *gorm.DB, opts ...gen.DOOption) scaStorageInfo {
	_scaStorageInfo := scaStorageInfo{}

	_scaStorageInfo.scaStorageInfoDo.UseDB(db, opts...)
	_scaStorageInfo.scaStorageInfoDo.UseModel(&model.ScaStorageInfo{})

	tableName := _scaStorageInfo.scaStorageInfoDo.TableName()
	_scaStorageInfo.ALL = field.NewAsterisk(tableName)
	_scaStorageInfo.ID = field.NewInt64(tableName, "id")
	_scaStorageInfo.UserID = field.NewString(tableName, "user_id")
	_scaStorageInfo.Storage = field.NewString(tableName, "storage")
	_scaStorageInfo.Bucket = field.NewString(tableName, "bucket")
	_scaStorageInfo.Type = field.NewString(tableName, "type")
	_scaStorageInfo.Path = field.NewString(tableName, "path")
	_scaStorageInfo.FileName = field.NewString(tableName, "file_name")
	_scaStorageInfo.Category = field.NewString(tableName, "category")
	_scaStorageInfo.Loaction = field.NewString(tableName, "loaction")
	_scaStorageInfo.Hash = field.NewString(tableName, "hash")
	_scaStorageInfo.Anime = field.NewString(tableName, "anime")
	_scaStorageInfo.HasFace = field.NewString(tableName, "has_face")
	_scaStorageInfo.FaceID = field.NewInt64(tableName, "face_id")
	_scaStorageInfo.Landscape = field.NewString(tableName, "landscape")
	_scaStorageInfo.Objects = field.NewString(tableName, "objects")
	_scaStorageInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_scaStorageInfo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_scaStorageInfo.DeletedAt = field.NewField(tableName, "deleted_at")

	_scaStorageInfo.fillFieldMap()

	return _scaStorageInfo
}

type scaStorageInfo struct {
	scaStorageInfoDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键
	UserID    field.String // 用户ID
	Storage   field.String // 存储空间
	Bucket    field.String // 存储桶
	Type      field.String // 类型
	Path      field.String // 路径
	FileName  field.String // 名称
	Category  field.String // 分类
	Loaction  field.String // 地址
	Hash      field.String // 哈希值
	Anime     field.String // 是否是动漫图片
	HasFace   field.String // 是否人像
	FaceID    field.Int64  // 人像ID
	Landscape field.String // 风景类型
	Objects   field.String // 对象识别
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s scaStorageInfo) Table(newTableName string) *scaStorageInfo {
	s.scaStorageInfoDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scaStorageInfo) As(alias string) *scaStorageInfo {
	s.scaStorageInfoDo.DO = *(s.scaStorageInfoDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scaStorageInfo) updateTableName(table string) *scaStorageInfo {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewString(table, "user_id")
	s.Storage = field.NewString(table, "storage")
	s.Bucket = field.NewString(table, "bucket")
	s.Type = field.NewString(table, "type")
	s.Path = field.NewString(table, "path")
	s.FileName = field.NewString(table, "file_name")
	s.Category = field.NewString(table, "category")
	s.Loaction = field.NewString(table, "loaction")
	s.Hash = field.NewString(table, "hash")
	s.Anime = field.NewString(table, "anime")
	s.HasFace = field.NewString(table, "has_face")
	s.FaceID = field.NewInt64(table, "face_id")
	s.Landscape = field.NewString(table, "landscape")
	s.Objects = field.NewString(table, "objects")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *scaStorageInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scaStorageInfo) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 18)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["storage"] = s.Storage
	s.fieldMap["bucket"] = s.Bucket
	s.fieldMap["type"] = s.Type
	s.fieldMap["path"] = s.Path
	s.fieldMap["file_name"] = s.FileName
	s.fieldMap["category"] = s.Category
	s.fieldMap["loaction"] = s.Loaction
	s.fieldMap["hash"] = s.Hash
	s.fieldMap["anime"] = s.Anime
	s.fieldMap["has_face"] = s.HasFace
	s.fieldMap["face_id"] = s.FaceID
	s.fieldMap["landscape"] = s.Landscape
	s.fieldMap["objects"] = s.Objects
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s scaStorageInfo) clone(db *gorm.DB) scaStorageInfo {
	s.scaStorageInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scaStorageInfo) replaceDB(db *gorm.DB) scaStorageInfo {
	s.scaStorageInfoDo.ReplaceDB(db)
	return s
}

type scaStorageInfoDo struct{ gen.DO }

type IScaStorageInfoDo interface {
	gen.SubQuery
	Debug() IScaStorageInfoDo
	WithContext(ctx context.Context) IScaStorageInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScaStorageInfoDo
	WriteDB() IScaStorageInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScaStorageInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScaStorageInfoDo
	Not(conds ...gen.Condition) IScaStorageInfoDo
	Or(conds ...gen.Condition) IScaStorageInfoDo
	Select(conds ...field.Expr) IScaStorageInfoDo
	Where(conds ...gen.Condition) IScaStorageInfoDo
	Order(conds ...field.Expr) IScaStorageInfoDo
	Distinct(cols ...field.Expr) IScaStorageInfoDo
	Omit(cols ...field.Expr) IScaStorageInfoDo
	Join(table schema.Tabler, on ...field.Expr) IScaStorageInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScaStorageInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScaStorageInfoDo
	Group(cols ...field.Expr) IScaStorageInfoDo
	Having(conds ...gen.Condition) IScaStorageInfoDo
	Limit(limit int) IScaStorageInfoDo
	Offset(offset int) IScaStorageInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScaStorageInfoDo
	Unscoped() IScaStorageInfoDo
	Create(values ...*model.ScaStorageInfo) error
	CreateInBatches(values []*model.ScaStorageInfo, batchSize int) error
	Save(values ...*model.ScaStorageInfo) error
	First() (*model.ScaStorageInfo, error)
	Take() (*model.ScaStorageInfo, error)
	Last() (*model.ScaStorageInfo, error)
	Find() ([]*model.ScaStorageInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaStorageInfo, err error)
	FindInBatches(result *[]*model.ScaStorageInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScaStorageInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScaStorageInfoDo
	Assign(attrs ...field.AssignExpr) IScaStorageInfoDo
	Joins(fields ...field.RelationField) IScaStorageInfoDo
	Preload(fields ...field.RelationField) IScaStorageInfoDo
	FirstOrInit() (*model.ScaStorageInfo, error)
	FirstOrCreate() (*model.ScaStorageInfo, error)
	FindByPage(offset int, limit int) (result []*model.ScaStorageInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScaStorageInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scaStorageInfoDo) Debug() IScaStorageInfoDo {
	return s.withDO(s.DO.Debug())
}

func (s scaStorageInfoDo) WithContext(ctx context.Context) IScaStorageInfoDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scaStorageInfoDo) ReadDB() IScaStorageInfoDo {
	return s.Clauses(dbresolver.Read)
}

func (s scaStorageInfoDo) WriteDB() IScaStorageInfoDo {
	return s.Clauses(dbresolver.Write)
}

func (s scaStorageInfoDo) Session(config *gorm.Session) IScaStorageInfoDo {
	return s.withDO(s.DO.Session(config))
}

func (s scaStorageInfoDo) Clauses(conds ...clause.Expression) IScaStorageInfoDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scaStorageInfoDo) Returning(value interface{}, columns ...string) IScaStorageInfoDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scaStorageInfoDo) Not(conds ...gen.Condition) IScaStorageInfoDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scaStorageInfoDo) Or(conds ...gen.Condition) IScaStorageInfoDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scaStorageInfoDo) Select(conds ...field.Expr) IScaStorageInfoDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scaStorageInfoDo) Where(conds ...gen.Condition) IScaStorageInfoDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scaStorageInfoDo) Order(conds ...field.Expr) IScaStorageInfoDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scaStorageInfoDo) Distinct(cols ...field.Expr) IScaStorageInfoDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scaStorageInfoDo) Omit(cols ...field.Expr) IScaStorageInfoDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scaStorageInfoDo) Join(table schema.Tabler, on ...field.Expr) IScaStorageInfoDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scaStorageInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScaStorageInfoDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scaStorageInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IScaStorageInfoDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scaStorageInfoDo) Group(cols ...field.Expr) IScaStorageInfoDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scaStorageInfoDo) Having(conds ...gen.Condition) IScaStorageInfoDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scaStorageInfoDo) Limit(limit int) IScaStorageInfoDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scaStorageInfoDo) Offset(offset int) IScaStorageInfoDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scaStorageInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScaStorageInfoDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scaStorageInfoDo) Unscoped() IScaStorageInfoDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scaStorageInfoDo) Create(values ...*model.ScaStorageInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scaStorageInfoDo) CreateInBatches(values []*model.ScaStorageInfo, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scaStorageInfoDo) Save(values ...*model.ScaStorageInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scaStorageInfoDo) First() (*model.ScaStorageInfo, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageInfo), nil
	}
}

func (s scaStorageInfoDo) Take() (*model.ScaStorageInfo, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageInfo), nil
	}
}

func (s scaStorageInfoDo) Last() (*model.ScaStorageInfo, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageInfo), nil
	}
}

func (s scaStorageInfoDo) Find() ([]*model.ScaStorageInfo, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScaStorageInfo), err
}

func (s scaStorageInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaStorageInfo, err error) {
	buf := make([]*model.ScaStorageInfo, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scaStorageInfoDo) FindInBatches(result *[]*model.ScaStorageInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scaStorageInfoDo) Attrs(attrs ...field.AssignExpr) IScaStorageInfoDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scaStorageInfoDo) Assign(attrs ...field.AssignExpr) IScaStorageInfoDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scaStorageInfoDo) Joins(fields ...field.RelationField) IScaStorageInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scaStorageInfoDo) Preload(fields ...field.RelationField) IScaStorageInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scaStorageInfoDo) FirstOrInit() (*model.ScaStorageInfo, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageInfo), nil
	}
}

func (s scaStorageInfoDo) FirstOrCreate() (*model.ScaStorageInfo, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageInfo), nil
	}
}

func (s scaStorageInfoDo) FindByPage(offset int, limit int) (result []*model.ScaStorageInfo, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scaStorageInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scaStorageInfoDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scaStorageInfoDo) Delete(models ...*model.ScaStorageInfo) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scaStorageInfoDo) withDO(do gen.Dao) *scaStorageInfoDo {
	s.DO = *do.(*gen.DO)
	return s
}
