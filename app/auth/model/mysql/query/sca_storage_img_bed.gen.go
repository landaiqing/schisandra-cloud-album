// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schisandra-album-cloud-microservices/app/auth/model/mysql/model"
)

func newScaStorageImgBed(db *gorm.DB, opts ...gen.DOOption) scaStorageImgBed {
	_scaStorageImgBed := scaStorageImgBed{}

	_scaStorageImgBed.scaStorageImgBedDo.UseDB(db, opts...)
	_scaStorageImgBed.scaStorageImgBedDo.UseModel(&model.ScaStorageImgBed{})

	tableName := _scaStorageImgBed.scaStorageImgBedDo.TableName()
	_scaStorageImgBed.ALL = field.NewAsterisk(tableName)
	_scaStorageImgBed.ID = field.NewInt64(tableName, "id")
	_scaStorageImgBed.UserID = field.NewString(tableName, "user_id")
	_scaStorageImgBed.Provider = field.NewString(tableName, "provider")
	_scaStorageImgBed.Bucket = field.NewString(tableName, "bucket")
	_scaStorageImgBed.Path = field.NewString(tableName, "path")
	_scaStorageImgBed.ThumbPath = field.NewString(tableName, "thumb_path")
	_scaStorageImgBed.FileName = field.NewString(tableName, "file_name")
	_scaStorageImgBed.FileSize = field.NewInt64(tableName, "file_size")
	_scaStorageImgBed.FileType = field.NewString(tableName, "file_type")
	_scaStorageImgBed.Width = field.NewFloat64(tableName, "width")
	_scaStorageImgBed.Height = field.NewFloat64(tableName, "height")
	_scaStorageImgBed.CreatedAt = field.NewTime(tableName, "created_at")
	_scaStorageImgBed.UpdatedAt = field.NewTime(tableName, "updated_at")
	_scaStorageImgBed.DeletedAt = field.NewField(tableName, "deleted_at")

	_scaStorageImgBed.fillFieldMap()

	return _scaStorageImgBed
}

type scaStorageImgBed struct {
	scaStorageImgBedDo

	ALL       field.Asterisk
	ID        field.Int64   // 主键
	UserID    field.String  // 用户ID
	Provider  field.String  // 供应商
	Bucket    field.String  // 存储桶
	Path      field.String  // 路径
	ThumbPath field.String  // 缩略图路径
	FileName  field.String  // 文件名称
	FileSize  field.Int64   // 文件大小
	FileType  field.String  // 文件类型
	Width     field.Float64 // 宽
	Height    field.Float64 // 高
	CreatedAt field.Time    // 创建时间
	UpdatedAt field.Time    // 更新时间
	DeletedAt field.Field   // 删除时间

	fieldMap map[string]field.Expr
}

func (s scaStorageImgBed) Table(newTableName string) *scaStorageImgBed {
	s.scaStorageImgBedDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scaStorageImgBed) As(alias string) *scaStorageImgBed {
	s.scaStorageImgBedDo.DO = *(s.scaStorageImgBedDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scaStorageImgBed) updateTableName(table string) *scaStorageImgBed {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewString(table, "user_id")
	s.Provider = field.NewString(table, "provider")
	s.Bucket = field.NewString(table, "bucket")
	s.Path = field.NewString(table, "path")
	s.ThumbPath = field.NewString(table, "thumb_path")
	s.FileName = field.NewString(table, "file_name")
	s.FileSize = field.NewInt64(table, "file_size")
	s.FileType = field.NewString(table, "file_type")
	s.Width = field.NewFloat64(table, "width")
	s.Height = field.NewFloat64(table, "height")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *scaStorageImgBed) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scaStorageImgBed) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["provider"] = s.Provider
	s.fieldMap["bucket"] = s.Bucket
	s.fieldMap["path"] = s.Path
	s.fieldMap["thumb_path"] = s.ThumbPath
	s.fieldMap["file_name"] = s.FileName
	s.fieldMap["file_size"] = s.FileSize
	s.fieldMap["file_type"] = s.FileType
	s.fieldMap["width"] = s.Width
	s.fieldMap["height"] = s.Height
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s scaStorageImgBed) clone(db *gorm.DB) scaStorageImgBed {
	s.scaStorageImgBedDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scaStorageImgBed) replaceDB(db *gorm.DB) scaStorageImgBed {
	s.scaStorageImgBedDo.ReplaceDB(db)
	return s
}

type scaStorageImgBedDo struct{ gen.DO }

type IScaStorageImgBedDo interface {
	gen.SubQuery
	Debug() IScaStorageImgBedDo
	WithContext(ctx context.Context) IScaStorageImgBedDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScaStorageImgBedDo
	WriteDB() IScaStorageImgBedDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScaStorageImgBedDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScaStorageImgBedDo
	Not(conds ...gen.Condition) IScaStorageImgBedDo
	Or(conds ...gen.Condition) IScaStorageImgBedDo
	Select(conds ...field.Expr) IScaStorageImgBedDo
	Where(conds ...gen.Condition) IScaStorageImgBedDo
	Order(conds ...field.Expr) IScaStorageImgBedDo
	Distinct(cols ...field.Expr) IScaStorageImgBedDo
	Omit(cols ...field.Expr) IScaStorageImgBedDo
	Join(table schema.Tabler, on ...field.Expr) IScaStorageImgBedDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScaStorageImgBedDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScaStorageImgBedDo
	Group(cols ...field.Expr) IScaStorageImgBedDo
	Having(conds ...gen.Condition) IScaStorageImgBedDo
	Limit(limit int) IScaStorageImgBedDo
	Offset(offset int) IScaStorageImgBedDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScaStorageImgBedDo
	Unscoped() IScaStorageImgBedDo
	Create(values ...*model.ScaStorageImgBed) error
	CreateInBatches(values []*model.ScaStorageImgBed, batchSize int) error
	Save(values ...*model.ScaStorageImgBed) error
	First() (*model.ScaStorageImgBed, error)
	Take() (*model.ScaStorageImgBed, error)
	Last() (*model.ScaStorageImgBed, error)
	Find() ([]*model.ScaStorageImgBed, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaStorageImgBed, err error)
	FindInBatches(result *[]*model.ScaStorageImgBed, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScaStorageImgBed) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScaStorageImgBedDo
	Assign(attrs ...field.AssignExpr) IScaStorageImgBedDo
	Joins(fields ...field.RelationField) IScaStorageImgBedDo
	Preload(fields ...field.RelationField) IScaStorageImgBedDo
	FirstOrInit() (*model.ScaStorageImgBed, error)
	FirstOrCreate() (*model.ScaStorageImgBed, error)
	FindByPage(offset int, limit int) (result []*model.ScaStorageImgBed, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScaStorageImgBedDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scaStorageImgBedDo) Debug() IScaStorageImgBedDo {
	return s.withDO(s.DO.Debug())
}

func (s scaStorageImgBedDo) WithContext(ctx context.Context) IScaStorageImgBedDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scaStorageImgBedDo) ReadDB() IScaStorageImgBedDo {
	return s.Clauses(dbresolver.Read)
}

func (s scaStorageImgBedDo) WriteDB() IScaStorageImgBedDo {
	return s.Clauses(dbresolver.Write)
}

func (s scaStorageImgBedDo) Session(config *gorm.Session) IScaStorageImgBedDo {
	return s.withDO(s.DO.Session(config))
}

func (s scaStorageImgBedDo) Clauses(conds ...clause.Expression) IScaStorageImgBedDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scaStorageImgBedDo) Returning(value interface{}, columns ...string) IScaStorageImgBedDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scaStorageImgBedDo) Not(conds ...gen.Condition) IScaStorageImgBedDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scaStorageImgBedDo) Or(conds ...gen.Condition) IScaStorageImgBedDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scaStorageImgBedDo) Select(conds ...field.Expr) IScaStorageImgBedDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scaStorageImgBedDo) Where(conds ...gen.Condition) IScaStorageImgBedDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scaStorageImgBedDo) Order(conds ...field.Expr) IScaStorageImgBedDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scaStorageImgBedDo) Distinct(cols ...field.Expr) IScaStorageImgBedDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scaStorageImgBedDo) Omit(cols ...field.Expr) IScaStorageImgBedDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scaStorageImgBedDo) Join(table schema.Tabler, on ...field.Expr) IScaStorageImgBedDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scaStorageImgBedDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScaStorageImgBedDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scaStorageImgBedDo) RightJoin(table schema.Tabler, on ...field.Expr) IScaStorageImgBedDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scaStorageImgBedDo) Group(cols ...field.Expr) IScaStorageImgBedDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scaStorageImgBedDo) Having(conds ...gen.Condition) IScaStorageImgBedDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scaStorageImgBedDo) Limit(limit int) IScaStorageImgBedDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scaStorageImgBedDo) Offset(offset int) IScaStorageImgBedDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scaStorageImgBedDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScaStorageImgBedDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scaStorageImgBedDo) Unscoped() IScaStorageImgBedDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scaStorageImgBedDo) Create(values ...*model.ScaStorageImgBed) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scaStorageImgBedDo) CreateInBatches(values []*model.ScaStorageImgBed, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scaStorageImgBedDo) Save(values ...*model.ScaStorageImgBed) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scaStorageImgBedDo) First() (*model.ScaStorageImgBed, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageImgBed), nil
	}
}

func (s scaStorageImgBedDo) Take() (*model.ScaStorageImgBed, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageImgBed), nil
	}
}

func (s scaStorageImgBedDo) Last() (*model.ScaStorageImgBed, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageImgBed), nil
	}
}

func (s scaStorageImgBedDo) Find() ([]*model.ScaStorageImgBed, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScaStorageImgBed), err
}

func (s scaStorageImgBedDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaStorageImgBed, err error) {
	buf := make([]*model.ScaStorageImgBed, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scaStorageImgBedDo) FindInBatches(result *[]*model.ScaStorageImgBed, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scaStorageImgBedDo) Attrs(attrs ...field.AssignExpr) IScaStorageImgBedDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scaStorageImgBedDo) Assign(attrs ...field.AssignExpr) IScaStorageImgBedDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scaStorageImgBedDo) Joins(fields ...field.RelationField) IScaStorageImgBedDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scaStorageImgBedDo) Preload(fields ...field.RelationField) IScaStorageImgBedDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scaStorageImgBedDo) FirstOrInit() (*model.ScaStorageImgBed, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageImgBed), nil
	}
}

func (s scaStorageImgBedDo) FirstOrCreate() (*model.ScaStorageImgBed, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageImgBed), nil
	}
}

func (s scaStorageImgBedDo) FindByPage(offset int, limit int) (result []*model.ScaStorageImgBed, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scaStorageImgBedDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scaStorageImgBedDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scaStorageImgBedDo) Delete(models ...*model.ScaStorageImgBed) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scaStorageImgBedDo) withDO(do gen.Dao) *scaStorageImgBedDo {
	s.DO = *do.(*gen.DO)
	return s
}
