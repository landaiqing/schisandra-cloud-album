// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"schisandra-album-cloud-microservices/app/auth/model/mysql/model"
)

func newScaStorageShare(db *gorm.DB, opts ...gen.DOOption) scaStorageShare {
	_scaStorageShare := scaStorageShare{}

	_scaStorageShare.scaStorageShareDo.UseDB(db, opts...)
	_scaStorageShare.scaStorageShareDo.UseModel(&model.ScaStorageShare{})

	tableName := _scaStorageShare.scaStorageShareDo.TableName()
	_scaStorageShare.ALL = field.NewAsterisk(tableName)
	_scaStorageShare.ID = field.NewInt64(tableName, "id")
	_scaStorageShare.UserID = field.NewString(tableName, "user_id")
	_scaStorageShare.AlbumID = field.NewInt64(tableName, "album_id")
	_scaStorageShare.Provider = field.NewString(tableName, "provider")
	_scaStorageShare.Bucket = field.NewString(tableName, "bucket")
	_scaStorageShare.InviteCode = field.NewString(tableName, "invite_code")
	_scaStorageShare.ExpireTime = field.NewTime(tableName, "expire_time")
	_scaStorageShare.ValidityPeriod = field.NewInt64(tableName, "validity_period")
	_scaStorageShare.Status = field.NewInt64(tableName, "status")
	_scaStorageShare.AccessPassword = field.NewString(tableName, "access_password")
	_scaStorageShare.VisitLimit = field.NewInt64(tableName, "visit_limit")
	_scaStorageShare.ImageCount = field.NewInt64(tableName, "image_count")
	_scaStorageShare.Version = field.NewField(tableName, "version")
	_scaStorageShare.CreatedAt = field.NewTime(tableName, "created_at")
	_scaStorageShare.UpdatedAt = field.NewTime(tableName, "updated_at")
	_scaStorageShare.DeletedAt = field.NewField(tableName, "deleted_at")

	_scaStorageShare.fillFieldMap()

	return _scaStorageShare
}

// scaStorageShare 快传分享表
type scaStorageShare struct {
	scaStorageShareDo

	ALL            field.Asterisk
	ID             field.Int64  // 主键
	UserID         field.String // 用户ID
	AlbumID        field.Int64  // 相册ID
	Provider       field.String // 存储商
	Bucket         field.String // 存储桶
	InviteCode     field.String // 邀请码（用于访问分享链接）
	ExpireTime     field.Time   // 过期时间
	ValidityPeriod field.Int64  // 有效期
	Status         field.Int64  // 是否失效（0 有效 -1已失效 1 永久）
	AccessPassword field.String // 访问密码
	VisitLimit     field.Int64  // 限制次数
	ImageCount     field.Int64  // 图片数量
	Version        field.Field  // 版本
	CreatedAt      field.Time   // 创建时间
	UpdatedAt      field.Time   // 更新时间
	DeletedAt      field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s scaStorageShare) Table(newTableName string) *scaStorageShare {
	s.scaStorageShareDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s scaStorageShare) As(alias string) *scaStorageShare {
	s.scaStorageShareDo.DO = *(s.scaStorageShareDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *scaStorageShare) updateTableName(table string) *scaStorageShare {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewString(table, "user_id")
	s.AlbumID = field.NewInt64(table, "album_id")
	s.Provider = field.NewString(table, "provider")
	s.Bucket = field.NewString(table, "bucket")
	s.InviteCode = field.NewString(table, "invite_code")
	s.ExpireTime = field.NewTime(table, "expire_time")
	s.ValidityPeriod = field.NewInt64(table, "validity_period")
	s.Status = field.NewInt64(table, "status")
	s.AccessPassword = field.NewString(table, "access_password")
	s.VisitLimit = field.NewInt64(table, "visit_limit")
	s.ImageCount = field.NewInt64(table, "image_count")
	s.Version = field.NewField(table, "version")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *scaStorageShare) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *scaStorageShare) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 16)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["album_id"] = s.AlbumID
	s.fieldMap["provider"] = s.Provider
	s.fieldMap["bucket"] = s.Bucket
	s.fieldMap["invite_code"] = s.InviteCode
	s.fieldMap["expire_time"] = s.ExpireTime
	s.fieldMap["validity_period"] = s.ValidityPeriod
	s.fieldMap["status"] = s.Status
	s.fieldMap["access_password"] = s.AccessPassword
	s.fieldMap["visit_limit"] = s.VisitLimit
	s.fieldMap["image_count"] = s.ImageCount
	s.fieldMap["version"] = s.Version
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s scaStorageShare) clone(db *gorm.DB) scaStorageShare {
	s.scaStorageShareDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s scaStorageShare) replaceDB(db *gorm.DB) scaStorageShare {
	s.scaStorageShareDo.ReplaceDB(db)
	return s
}

type scaStorageShareDo struct{ gen.DO }

type IScaStorageShareDo interface {
	gen.SubQuery
	Debug() IScaStorageShareDo
	WithContext(ctx context.Context) IScaStorageShareDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScaStorageShareDo
	WriteDB() IScaStorageShareDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScaStorageShareDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScaStorageShareDo
	Not(conds ...gen.Condition) IScaStorageShareDo
	Or(conds ...gen.Condition) IScaStorageShareDo
	Select(conds ...field.Expr) IScaStorageShareDo
	Where(conds ...gen.Condition) IScaStorageShareDo
	Order(conds ...field.Expr) IScaStorageShareDo
	Distinct(cols ...field.Expr) IScaStorageShareDo
	Omit(cols ...field.Expr) IScaStorageShareDo
	Join(table schema.Tabler, on ...field.Expr) IScaStorageShareDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScaStorageShareDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScaStorageShareDo
	Group(cols ...field.Expr) IScaStorageShareDo
	Having(conds ...gen.Condition) IScaStorageShareDo
	Limit(limit int) IScaStorageShareDo
	Offset(offset int) IScaStorageShareDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScaStorageShareDo
	Unscoped() IScaStorageShareDo
	Create(values ...*model.ScaStorageShare) error
	CreateInBatches(values []*model.ScaStorageShare, batchSize int) error
	Save(values ...*model.ScaStorageShare) error
	First() (*model.ScaStorageShare, error)
	Take() (*model.ScaStorageShare, error)
	Last() (*model.ScaStorageShare, error)
	Find() ([]*model.ScaStorageShare, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaStorageShare, err error)
	FindInBatches(result *[]*model.ScaStorageShare, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ScaStorageShare) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScaStorageShareDo
	Assign(attrs ...field.AssignExpr) IScaStorageShareDo
	Joins(fields ...field.RelationField) IScaStorageShareDo
	Preload(fields ...field.RelationField) IScaStorageShareDo
	FirstOrInit() (*model.ScaStorageShare, error)
	FirstOrCreate() (*model.ScaStorageShare, error)
	FindByPage(offset int, limit int) (result []*model.ScaStorageShare, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScaStorageShareDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scaStorageShareDo) Debug() IScaStorageShareDo {
	return s.withDO(s.DO.Debug())
}

func (s scaStorageShareDo) WithContext(ctx context.Context) IScaStorageShareDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scaStorageShareDo) ReadDB() IScaStorageShareDo {
	return s.Clauses(dbresolver.Read)
}

func (s scaStorageShareDo) WriteDB() IScaStorageShareDo {
	return s.Clauses(dbresolver.Write)
}

func (s scaStorageShareDo) Session(config *gorm.Session) IScaStorageShareDo {
	return s.withDO(s.DO.Session(config))
}

func (s scaStorageShareDo) Clauses(conds ...clause.Expression) IScaStorageShareDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scaStorageShareDo) Returning(value interface{}, columns ...string) IScaStorageShareDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scaStorageShareDo) Not(conds ...gen.Condition) IScaStorageShareDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scaStorageShareDo) Or(conds ...gen.Condition) IScaStorageShareDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scaStorageShareDo) Select(conds ...field.Expr) IScaStorageShareDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scaStorageShareDo) Where(conds ...gen.Condition) IScaStorageShareDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scaStorageShareDo) Order(conds ...field.Expr) IScaStorageShareDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scaStorageShareDo) Distinct(cols ...field.Expr) IScaStorageShareDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scaStorageShareDo) Omit(cols ...field.Expr) IScaStorageShareDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scaStorageShareDo) Join(table schema.Tabler, on ...field.Expr) IScaStorageShareDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scaStorageShareDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScaStorageShareDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scaStorageShareDo) RightJoin(table schema.Tabler, on ...field.Expr) IScaStorageShareDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scaStorageShareDo) Group(cols ...field.Expr) IScaStorageShareDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scaStorageShareDo) Having(conds ...gen.Condition) IScaStorageShareDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scaStorageShareDo) Limit(limit int) IScaStorageShareDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scaStorageShareDo) Offset(offset int) IScaStorageShareDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scaStorageShareDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScaStorageShareDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scaStorageShareDo) Unscoped() IScaStorageShareDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scaStorageShareDo) Create(values ...*model.ScaStorageShare) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scaStorageShareDo) CreateInBatches(values []*model.ScaStorageShare, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scaStorageShareDo) Save(values ...*model.ScaStorageShare) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scaStorageShareDo) First() (*model.ScaStorageShare, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageShare), nil
	}
}

func (s scaStorageShareDo) Take() (*model.ScaStorageShare, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageShare), nil
	}
}

func (s scaStorageShareDo) Last() (*model.ScaStorageShare, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageShare), nil
	}
}

func (s scaStorageShareDo) Find() ([]*model.ScaStorageShare, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScaStorageShare), err
}

func (s scaStorageShareDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScaStorageShare, err error) {
	buf := make([]*model.ScaStorageShare, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scaStorageShareDo) FindInBatches(result *[]*model.ScaStorageShare, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scaStorageShareDo) Attrs(attrs ...field.AssignExpr) IScaStorageShareDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scaStorageShareDo) Assign(attrs ...field.AssignExpr) IScaStorageShareDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scaStorageShareDo) Joins(fields ...field.RelationField) IScaStorageShareDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scaStorageShareDo) Preload(fields ...field.RelationField) IScaStorageShareDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scaStorageShareDo) FirstOrInit() (*model.ScaStorageShare, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageShare), nil
	}
}

func (s scaStorageShareDo) FirstOrCreate() (*model.ScaStorageShare, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScaStorageShare), nil
	}
}

func (s scaStorageShareDo) FindByPage(offset int, limit int) (result []*model.ScaStorageShare, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scaStorageShareDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scaStorageShareDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scaStorageShareDo) Delete(models ...*model.ScaStorageShare) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scaStorageShareDo) withDO(do gen.Dao) *scaStorageShareDo {
	s.DO = *do.(*gen.DO)
	return s
}
