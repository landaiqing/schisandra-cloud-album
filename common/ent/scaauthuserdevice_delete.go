// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"schisandra-album-cloud-microservices/common/ent/predicate"
	"schisandra-album-cloud-microservices/common/ent/scaauthuserdevice"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScaAuthUserDeviceDelete is the builder for deleting a ScaAuthUserDevice entity.
type ScaAuthUserDeviceDelete struct {
	config
	hooks    []Hook
	mutation *ScaAuthUserDeviceMutation
}

// Where appends a list predicates to the ScaAuthUserDeviceDelete builder.
func (saudd *ScaAuthUserDeviceDelete) Where(ps ...predicate.ScaAuthUserDevice) *ScaAuthUserDeviceDelete {
	saudd.mutation.Where(ps...)
	return saudd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (saudd *ScaAuthUserDeviceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, saudd.sqlExec, saudd.mutation, saudd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (saudd *ScaAuthUserDeviceDelete) ExecX(ctx context.Context) int {
	n, err := saudd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (saudd *ScaAuthUserDeviceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(scaauthuserdevice.Table, sqlgraph.NewFieldSpec(scaauthuserdevice.FieldID, field.TypeInt64))
	if ps := saudd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, saudd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	saudd.mutation.done = true
	return affected, err
}

// ScaAuthUserDeviceDeleteOne is the builder for deleting a single ScaAuthUserDevice entity.
type ScaAuthUserDeviceDeleteOne struct {
	saudd *ScaAuthUserDeviceDelete
}

// Where appends a list predicates to the ScaAuthUserDeviceDelete builder.
func (sauddo *ScaAuthUserDeviceDeleteOne) Where(ps ...predicate.ScaAuthUserDevice) *ScaAuthUserDeviceDeleteOne {
	sauddo.saudd.mutation.Where(ps...)
	return sauddo
}

// Exec executes the deletion query.
func (sauddo *ScaAuthUserDeviceDeleteOne) Exec(ctx context.Context) error {
	n, err := sauddo.saudd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{scaauthuserdevice.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sauddo *ScaAuthUserDeviceDeleteOne) ExecX(ctx context.Context) {
	if err := sauddo.Exec(ctx); err != nil {
		panic(err)
	}
}
