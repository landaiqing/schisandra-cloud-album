// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"schisandra-album-cloud-microservices/common/ent/scaauthuser"
	"schisandra-album-cloud-microservices/common/ent/scaauthuserdevice"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScaAuthUserDeviceCreate is the builder for creating a ScaAuthUserDevice entity.
type ScaAuthUserDeviceCreate struct {
	config
	mutation *ScaAuthUserDeviceMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (saudc *ScaAuthUserDeviceCreate) SetUserID(s string) *ScaAuthUserDeviceCreate {
	saudc.mutation.SetUserID(s)
	return saudc
}

// SetIP sets the "ip" field.
func (saudc *ScaAuthUserDeviceCreate) SetIP(s string) *ScaAuthUserDeviceCreate {
	saudc.mutation.SetIP(s)
	return saudc
}

// SetLocation sets the "location" field.
func (saudc *ScaAuthUserDeviceCreate) SetLocation(s string) *ScaAuthUserDeviceCreate {
	saudc.mutation.SetLocation(s)
	return saudc
}

// SetAgent sets the "agent" field.
func (saudc *ScaAuthUserDeviceCreate) SetAgent(s string) *ScaAuthUserDeviceCreate {
	saudc.mutation.SetAgent(s)
	return saudc
}

// SetCreatedAt sets the "created_at" field.
func (saudc *ScaAuthUserDeviceCreate) SetCreatedAt(t time.Time) *ScaAuthUserDeviceCreate {
	saudc.mutation.SetCreatedAt(t)
	return saudc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (saudc *ScaAuthUserDeviceCreate) SetNillableCreatedAt(t *time.Time) *ScaAuthUserDeviceCreate {
	if t != nil {
		saudc.SetCreatedAt(*t)
	}
	return saudc
}

// SetUpdateAt sets the "update_at" field.
func (saudc *ScaAuthUserDeviceCreate) SetUpdateAt(t time.Time) *ScaAuthUserDeviceCreate {
	saudc.mutation.SetUpdateAt(t)
	return saudc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (saudc *ScaAuthUserDeviceCreate) SetNillableUpdateAt(t *time.Time) *ScaAuthUserDeviceCreate {
	if t != nil {
		saudc.SetUpdateAt(*t)
	}
	return saudc
}

// SetDeleted sets the "deleted" field.
func (saudc *ScaAuthUserDeviceCreate) SetDeleted(i int) *ScaAuthUserDeviceCreate {
	saudc.mutation.SetDeleted(i)
	return saudc
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (saudc *ScaAuthUserDeviceCreate) SetNillableDeleted(i *int) *ScaAuthUserDeviceCreate {
	if i != nil {
		saudc.SetDeleted(*i)
	}
	return saudc
}

// SetBrowser sets the "browser" field.
func (saudc *ScaAuthUserDeviceCreate) SetBrowser(s string) *ScaAuthUserDeviceCreate {
	saudc.mutation.SetBrowser(s)
	return saudc
}

// SetOperatingSystem sets the "operating_system" field.
func (saudc *ScaAuthUserDeviceCreate) SetOperatingSystem(s string) *ScaAuthUserDeviceCreate {
	saudc.mutation.SetOperatingSystem(s)
	return saudc
}

// SetBrowserVersion sets the "browser_version" field.
func (saudc *ScaAuthUserDeviceCreate) SetBrowserVersion(s string) *ScaAuthUserDeviceCreate {
	saudc.mutation.SetBrowserVersion(s)
	return saudc
}

// SetMobile sets the "mobile" field.
func (saudc *ScaAuthUserDeviceCreate) SetMobile(i int) *ScaAuthUserDeviceCreate {
	saudc.mutation.SetMobile(i)
	return saudc
}

// SetBot sets the "bot" field.
func (saudc *ScaAuthUserDeviceCreate) SetBot(i int) *ScaAuthUserDeviceCreate {
	saudc.mutation.SetBot(i)
	return saudc
}

// SetMozilla sets the "mozilla" field.
func (saudc *ScaAuthUserDeviceCreate) SetMozilla(s string) *ScaAuthUserDeviceCreate {
	saudc.mutation.SetMozilla(s)
	return saudc
}

// SetPlatform sets the "platform" field.
func (saudc *ScaAuthUserDeviceCreate) SetPlatform(s string) *ScaAuthUserDeviceCreate {
	saudc.mutation.SetPlatform(s)
	return saudc
}

// SetEngineName sets the "engine_name" field.
func (saudc *ScaAuthUserDeviceCreate) SetEngineName(s string) *ScaAuthUserDeviceCreate {
	saudc.mutation.SetEngineName(s)
	return saudc
}

// SetEngineVersion sets the "engine_version" field.
func (saudc *ScaAuthUserDeviceCreate) SetEngineVersion(s string) *ScaAuthUserDeviceCreate {
	saudc.mutation.SetEngineVersion(s)
	return saudc
}

// SetID sets the "id" field.
func (saudc *ScaAuthUserDeviceCreate) SetID(i int64) *ScaAuthUserDeviceCreate {
	saudc.mutation.SetID(i)
	return saudc
}

// SetScaAuthUserID sets the "sca_auth_user" edge to the ScaAuthUser entity by ID.
func (saudc *ScaAuthUserDeviceCreate) SetScaAuthUserID(id int64) *ScaAuthUserDeviceCreate {
	saudc.mutation.SetScaAuthUserID(id)
	return saudc
}

// SetNillableScaAuthUserID sets the "sca_auth_user" edge to the ScaAuthUser entity by ID if the given value is not nil.
func (saudc *ScaAuthUserDeviceCreate) SetNillableScaAuthUserID(id *int64) *ScaAuthUserDeviceCreate {
	if id != nil {
		saudc = saudc.SetScaAuthUserID(*id)
	}
	return saudc
}

// SetScaAuthUser sets the "sca_auth_user" edge to the ScaAuthUser entity.
func (saudc *ScaAuthUserDeviceCreate) SetScaAuthUser(s *ScaAuthUser) *ScaAuthUserDeviceCreate {
	return saudc.SetScaAuthUserID(s.ID)
}

// Mutation returns the ScaAuthUserDeviceMutation object of the builder.
func (saudc *ScaAuthUserDeviceCreate) Mutation() *ScaAuthUserDeviceMutation {
	return saudc.mutation
}

// Save creates the ScaAuthUserDevice in the database.
func (saudc *ScaAuthUserDeviceCreate) Save(ctx context.Context) (*ScaAuthUserDevice, error) {
	saudc.defaults()
	return withHooks(ctx, saudc.sqlSave, saudc.mutation, saudc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (saudc *ScaAuthUserDeviceCreate) SaveX(ctx context.Context) *ScaAuthUserDevice {
	v, err := saudc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (saudc *ScaAuthUserDeviceCreate) Exec(ctx context.Context) error {
	_, err := saudc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (saudc *ScaAuthUserDeviceCreate) ExecX(ctx context.Context) {
	if err := saudc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (saudc *ScaAuthUserDeviceCreate) defaults() {
	if _, ok := saudc.mutation.CreatedAt(); !ok {
		v := scaauthuserdevice.DefaultCreatedAt()
		saudc.mutation.SetCreatedAt(v)
	}
	if _, ok := saudc.mutation.UpdateAt(); !ok {
		v := scaauthuserdevice.DefaultUpdateAt()
		saudc.mutation.SetUpdateAt(v)
	}
	if _, ok := saudc.mutation.Deleted(); !ok {
		v := scaauthuserdevice.DefaultDeleted
		saudc.mutation.SetDeleted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (saudc *ScaAuthUserDeviceCreate) check() error {
	if _, ok := saudc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ScaAuthUserDevice.user_id"`)}
	}
	if v, ok := saudc.mutation.UserID(); ok {
		if err := scaauthuserdevice.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.user_id": %w`, err)}
		}
	}
	if _, ok := saudc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "ScaAuthUserDevice.ip"`)}
	}
	if v, ok := saudc.mutation.IP(); ok {
		if err := scaauthuserdevice.IPValidator(v); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.ip": %w`, err)}
		}
	}
	if _, ok := saudc.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "ScaAuthUserDevice.location"`)}
	}
	if v, ok := saudc.mutation.Location(); ok {
		if err := scaauthuserdevice.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.location": %w`, err)}
		}
	}
	if _, ok := saudc.mutation.Agent(); !ok {
		return &ValidationError{Name: "agent", err: errors.New(`ent: missing required field "ScaAuthUserDevice.agent"`)}
	}
	if v, ok := saudc.mutation.Agent(); ok {
		if err := scaauthuserdevice.AgentValidator(v); err != nil {
			return &ValidationError{Name: "agent", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.agent": %w`, err)}
		}
	}
	if _, ok := saudc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "ScaAuthUserDevice.update_at"`)}
	}
	if _, ok := saudc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "ScaAuthUserDevice.deleted"`)}
	}
	if _, ok := saudc.mutation.Browser(); !ok {
		return &ValidationError{Name: "browser", err: errors.New(`ent: missing required field "ScaAuthUserDevice.browser"`)}
	}
	if v, ok := saudc.mutation.Browser(); ok {
		if err := scaauthuserdevice.BrowserValidator(v); err != nil {
			return &ValidationError{Name: "browser", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.browser": %w`, err)}
		}
	}
	if _, ok := saudc.mutation.OperatingSystem(); !ok {
		return &ValidationError{Name: "operating_system", err: errors.New(`ent: missing required field "ScaAuthUserDevice.operating_system"`)}
	}
	if v, ok := saudc.mutation.OperatingSystem(); ok {
		if err := scaauthuserdevice.OperatingSystemValidator(v); err != nil {
			return &ValidationError{Name: "operating_system", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.operating_system": %w`, err)}
		}
	}
	if _, ok := saudc.mutation.BrowserVersion(); !ok {
		return &ValidationError{Name: "browser_version", err: errors.New(`ent: missing required field "ScaAuthUserDevice.browser_version"`)}
	}
	if v, ok := saudc.mutation.BrowserVersion(); ok {
		if err := scaauthuserdevice.BrowserVersionValidator(v); err != nil {
			return &ValidationError{Name: "browser_version", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.browser_version": %w`, err)}
		}
	}
	if _, ok := saudc.mutation.Mobile(); !ok {
		return &ValidationError{Name: "mobile", err: errors.New(`ent: missing required field "ScaAuthUserDevice.mobile"`)}
	}
	if _, ok := saudc.mutation.Bot(); !ok {
		return &ValidationError{Name: "bot", err: errors.New(`ent: missing required field "ScaAuthUserDevice.bot"`)}
	}
	if _, ok := saudc.mutation.Mozilla(); !ok {
		return &ValidationError{Name: "mozilla", err: errors.New(`ent: missing required field "ScaAuthUserDevice.mozilla"`)}
	}
	if v, ok := saudc.mutation.Mozilla(); ok {
		if err := scaauthuserdevice.MozillaValidator(v); err != nil {
			return &ValidationError{Name: "mozilla", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.mozilla": %w`, err)}
		}
	}
	if _, ok := saudc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "ScaAuthUserDevice.platform"`)}
	}
	if v, ok := saudc.mutation.Platform(); ok {
		if err := scaauthuserdevice.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.platform": %w`, err)}
		}
	}
	if _, ok := saudc.mutation.EngineName(); !ok {
		return &ValidationError{Name: "engine_name", err: errors.New(`ent: missing required field "ScaAuthUserDevice.engine_name"`)}
	}
	if v, ok := saudc.mutation.EngineName(); ok {
		if err := scaauthuserdevice.EngineNameValidator(v); err != nil {
			return &ValidationError{Name: "engine_name", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.engine_name": %w`, err)}
		}
	}
	if _, ok := saudc.mutation.EngineVersion(); !ok {
		return &ValidationError{Name: "engine_version", err: errors.New(`ent: missing required field "ScaAuthUserDevice.engine_version"`)}
	}
	if v, ok := saudc.mutation.EngineVersion(); ok {
		if err := scaauthuserdevice.EngineVersionValidator(v); err != nil {
			return &ValidationError{Name: "engine_version", err: fmt.Errorf(`ent: validator failed for field "ScaAuthUserDevice.engine_version": %w`, err)}
		}
	}
	return nil
}

func (saudc *ScaAuthUserDeviceCreate) sqlSave(ctx context.Context) (*ScaAuthUserDevice, error) {
	if err := saudc.check(); err != nil {
		return nil, err
	}
	_node, _spec := saudc.createSpec()
	if err := sqlgraph.CreateNode(ctx, saudc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	saudc.mutation.id = &_node.ID
	saudc.mutation.done = true
	return _node, nil
}

func (saudc *ScaAuthUserDeviceCreate) createSpec() (*ScaAuthUserDevice, *sqlgraph.CreateSpec) {
	var (
		_node = &ScaAuthUserDevice{config: saudc.config}
		_spec = sqlgraph.NewCreateSpec(scaauthuserdevice.Table, sqlgraph.NewFieldSpec(scaauthuserdevice.FieldID, field.TypeInt64))
	)
	if id, ok := saudc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := saudc.mutation.UserID(); ok {
		_spec.SetField(scaauthuserdevice.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := saudc.mutation.IP(); ok {
		_spec.SetField(scaauthuserdevice.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := saudc.mutation.Location(); ok {
		_spec.SetField(scaauthuserdevice.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := saudc.mutation.Agent(); ok {
		_spec.SetField(scaauthuserdevice.FieldAgent, field.TypeString, value)
		_node.Agent = value
	}
	if value, ok := saudc.mutation.CreatedAt(); ok {
		_spec.SetField(scaauthuserdevice.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := saudc.mutation.UpdateAt(); ok {
		_spec.SetField(scaauthuserdevice.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = &value
	}
	if value, ok := saudc.mutation.Deleted(); ok {
		_spec.SetField(scaauthuserdevice.FieldDeleted, field.TypeInt, value)
		_node.Deleted = value
	}
	if value, ok := saudc.mutation.Browser(); ok {
		_spec.SetField(scaauthuserdevice.FieldBrowser, field.TypeString, value)
		_node.Browser = value
	}
	if value, ok := saudc.mutation.OperatingSystem(); ok {
		_spec.SetField(scaauthuserdevice.FieldOperatingSystem, field.TypeString, value)
		_node.OperatingSystem = value
	}
	if value, ok := saudc.mutation.BrowserVersion(); ok {
		_spec.SetField(scaauthuserdevice.FieldBrowserVersion, field.TypeString, value)
		_node.BrowserVersion = value
	}
	if value, ok := saudc.mutation.Mobile(); ok {
		_spec.SetField(scaauthuserdevice.FieldMobile, field.TypeInt, value)
		_node.Mobile = value
	}
	if value, ok := saudc.mutation.Bot(); ok {
		_spec.SetField(scaauthuserdevice.FieldBot, field.TypeInt, value)
		_node.Bot = value
	}
	if value, ok := saudc.mutation.Mozilla(); ok {
		_spec.SetField(scaauthuserdevice.FieldMozilla, field.TypeString, value)
		_node.Mozilla = value
	}
	if value, ok := saudc.mutation.Platform(); ok {
		_spec.SetField(scaauthuserdevice.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	if value, ok := saudc.mutation.EngineName(); ok {
		_spec.SetField(scaauthuserdevice.FieldEngineName, field.TypeString, value)
		_node.EngineName = value
	}
	if value, ok := saudc.mutation.EngineVersion(); ok {
		_spec.SetField(scaauthuserdevice.FieldEngineVersion, field.TypeString, value)
		_node.EngineVersion = value
	}
	if nodes := saudc.mutation.ScaAuthUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scaauthuserdevice.ScaAuthUserTable,
			Columns: []string{scaauthuserdevice.ScaAuthUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scaauthuser.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.sca_auth_user_sca_auth_user_device = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScaAuthUserDeviceCreateBulk is the builder for creating many ScaAuthUserDevice entities in bulk.
type ScaAuthUserDeviceCreateBulk struct {
	config
	err      error
	builders []*ScaAuthUserDeviceCreate
}

// Save creates the ScaAuthUserDevice entities in the database.
func (saudcb *ScaAuthUserDeviceCreateBulk) Save(ctx context.Context) ([]*ScaAuthUserDevice, error) {
	if saudcb.err != nil {
		return nil, saudcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(saudcb.builders))
	nodes := make([]*ScaAuthUserDevice, len(saudcb.builders))
	mutators := make([]Mutator, len(saudcb.builders))
	for i := range saudcb.builders {
		func(i int, root context.Context) {
			builder := saudcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScaAuthUserDeviceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, saudcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, saudcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, saudcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (saudcb *ScaAuthUserDeviceCreateBulk) SaveX(ctx context.Context) []*ScaAuthUserDevice {
	v, err := saudcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (saudcb *ScaAuthUserDeviceCreateBulk) Exec(ctx context.Context) error {
	_, err := saudcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (saudcb *ScaAuthUserDeviceCreateBulk) ExecX(ctx context.Context) {
	if err := saudcb.Exec(ctx); err != nil {
		panic(err)
	}
}
