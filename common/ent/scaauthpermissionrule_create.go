// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"schisandra-album-cloud-microservices/common/ent/scaauthpermissionrule"
	"schisandra-album-cloud-microservices/common/ent/scaauthrole"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScaAuthPermissionRuleCreate is the builder for creating a ScaAuthPermissionRule entity.
type ScaAuthPermissionRuleCreate struct {
	config
	mutation *ScaAuthPermissionRuleMutation
	hooks    []Hook
}

// SetPtype sets the "ptype" field.
func (saprc *ScaAuthPermissionRuleCreate) SetPtype(s string) *ScaAuthPermissionRuleCreate {
	saprc.mutation.SetPtype(s)
	return saprc
}

// SetV0 sets the "v0" field.
func (saprc *ScaAuthPermissionRuleCreate) SetV0(s string) *ScaAuthPermissionRuleCreate {
	saprc.mutation.SetV0(s)
	return saprc
}

// SetV1 sets the "v1" field.
func (saprc *ScaAuthPermissionRuleCreate) SetV1(s string) *ScaAuthPermissionRuleCreate {
	saprc.mutation.SetV1(s)
	return saprc
}

// SetV2 sets the "v2" field.
func (saprc *ScaAuthPermissionRuleCreate) SetV2(s string) *ScaAuthPermissionRuleCreate {
	saprc.mutation.SetV2(s)
	return saprc
}

// SetNillableV2 sets the "v2" field if the given value is not nil.
func (saprc *ScaAuthPermissionRuleCreate) SetNillableV2(s *string) *ScaAuthPermissionRuleCreate {
	if s != nil {
		saprc.SetV2(*s)
	}
	return saprc
}

// SetV3 sets the "v3" field.
func (saprc *ScaAuthPermissionRuleCreate) SetV3(s string) *ScaAuthPermissionRuleCreate {
	saprc.mutation.SetV3(s)
	return saprc
}

// SetNillableV3 sets the "v3" field if the given value is not nil.
func (saprc *ScaAuthPermissionRuleCreate) SetNillableV3(s *string) *ScaAuthPermissionRuleCreate {
	if s != nil {
		saprc.SetV3(*s)
	}
	return saprc
}

// SetV4 sets the "v4" field.
func (saprc *ScaAuthPermissionRuleCreate) SetV4(s string) *ScaAuthPermissionRuleCreate {
	saprc.mutation.SetV4(s)
	return saprc
}

// SetNillableV4 sets the "v4" field if the given value is not nil.
func (saprc *ScaAuthPermissionRuleCreate) SetNillableV4(s *string) *ScaAuthPermissionRuleCreate {
	if s != nil {
		saprc.SetV4(*s)
	}
	return saprc
}

// SetV5 sets the "v5" field.
func (saprc *ScaAuthPermissionRuleCreate) SetV5(s string) *ScaAuthPermissionRuleCreate {
	saprc.mutation.SetV5(s)
	return saprc
}

// SetNillableV5 sets the "v5" field if the given value is not nil.
func (saprc *ScaAuthPermissionRuleCreate) SetNillableV5(s *string) *ScaAuthPermissionRuleCreate {
	if s != nil {
		saprc.SetV5(*s)
	}
	return saprc
}

// SetID sets the "id" field.
func (saprc *ScaAuthPermissionRuleCreate) SetID(i int64) *ScaAuthPermissionRuleCreate {
	saprc.mutation.SetID(i)
	return saprc
}

// SetScaAuthRoleID sets the "sca_auth_role" edge to the ScaAuthRole entity by ID.
func (saprc *ScaAuthPermissionRuleCreate) SetScaAuthRoleID(id int64) *ScaAuthPermissionRuleCreate {
	saprc.mutation.SetScaAuthRoleID(id)
	return saprc
}

// SetNillableScaAuthRoleID sets the "sca_auth_role" edge to the ScaAuthRole entity by ID if the given value is not nil.
func (saprc *ScaAuthPermissionRuleCreate) SetNillableScaAuthRoleID(id *int64) *ScaAuthPermissionRuleCreate {
	if id != nil {
		saprc = saprc.SetScaAuthRoleID(*id)
	}
	return saprc
}

// SetScaAuthRole sets the "sca_auth_role" edge to the ScaAuthRole entity.
func (saprc *ScaAuthPermissionRuleCreate) SetScaAuthRole(s *ScaAuthRole) *ScaAuthPermissionRuleCreate {
	return saprc.SetScaAuthRoleID(s.ID)
}

// Mutation returns the ScaAuthPermissionRuleMutation object of the builder.
func (saprc *ScaAuthPermissionRuleCreate) Mutation() *ScaAuthPermissionRuleMutation {
	return saprc.mutation
}

// Save creates the ScaAuthPermissionRule in the database.
func (saprc *ScaAuthPermissionRuleCreate) Save(ctx context.Context) (*ScaAuthPermissionRule, error) {
	return withHooks(ctx, saprc.sqlSave, saprc.mutation, saprc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (saprc *ScaAuthPermissionRuleCreate) SaveX(ctx context.Context) *ScaAuthPermissionRule {
	v, err := saprc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (saprc *ScaAuthPermissionRuleCreate) Exec(ctx context.Context) error {
	_, err := saprc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (saprc *ScaAuthPermissionRuleCreate) ExecX(ctx context.Context) {
	if err := saprc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (saprc *ScaAuthPermissionRuleCreate) check() error {
	if _, ok := saprc.mutation.Ptype(); !ok {
		return &ValidationError{Name: "ptype", err: errors.New(`ent: missing required field "ScaAuthPermissionRule.ptype"`)}
	}
	if v, ok := saprc.mutation.Ptype(); ok {
		if err := scaauthpermissionrule.PtypeValidator(v); err != nil {
			return &ValidationError{Name: "ptype", err: fmt.Errorf(`ent: validator failed for field "ScaAuthPermissionRule.ptype": %w`, err)}
		}
	}
	if _, ok := saprc.mutation.V0(); !ok {
		return &ValidationError{Name: "v0", err: errors.New(`ent: missing required field "ScaAuthPermissionRule.v0"`)}
	}
	if v, ok := saprc.mutation.V0(); ok {
		if err := scaauthpermissionrule.V0Validator(v); err != nil {
			return &ValidationError{Name: "v0", err: fmt.Errorf(`ent: validator failed for field "ScaAuthPermissionRule.v0": %w`, err)}
		}
	}
	if _, ok := saprc.mutation.V1(); !ok {
		return &ValidationError{Name: "v1", err: errors.New(`ent: missing required field "ScaAuthPermissionRule.v1"`)}
	}
	if v, ok := saprc.mutation.V1(); ok {
		if err := scaauthpermissionrule.V1Validator(v); err != nil {
			return &ValidationError{Name: "v1", err: fmt.Errorf(`ent: validator failed for field "ScaAuthPermissionRule.v1": %w`, err)}
		}
	}
	if v, ok := saprc.mutation.V2(); ok {
		if err := scaauthpermissionrule.V2Validator(v); err != nil {
			return &ValidationError{Name: "v2", err: fmt.Errorf(`ent: validator failed for field "ScaAuthPermissionRule.v2": %w`, err)}
		}
	}
	if v, ok := saprc.mutation.V3(); ok {
		if err := scaauthpermissionrule.V3Validator(v); err != nil {
			return &ValidationError{Name: "v3", err: fmt.Errorf(`ent: validator failed for field "ScaAuthPermissionRule.v3": %w`, err)}
		}
	}
	if v, ok := saprc.mutation.V4(); ok {
		if err := scaauthpermissionrule.V4Validator(v); err != nil {
			return &ValidationError{Name: "v4", err: fmt.Errorf(`ent: validator failed for field "ScaAuthPermissionRule.v4": %w`, err)}
		}
	}
	if v, ok := saprc.mutation.V5(); ok {
		if err := scaauthpermissionrule.V5Validator(v); err != nil {
			return &ValidationError{Name: "v5", err: fmt.Errorf(`ent: validator failed for field "ScaAuthPermissionRule.v5": %w`, err)}
		}
	}
	return nil
}

func (saprc *ScaAuthPermissionRuleCreate) sqlSave(ctx context.Context) (*ScaAuthPermissionRule, error) {
	if err := saprc.check(); err != nil {
		return nil, err
	}
	_node, _spec := saprc.createSpec()
	if err := sqlgraph.CreateNode(ctx, saprc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	saprc.mutation.id = &_node.ID
	saprc.mutation.done = true
	return _node, nil
}

func (saprc *ScaAuthPermissionRuleCreate) createSpec() (*ScaAuthPermissionRule, *sqlgraph.CreateSpec) {
	var (
		_node = &ScaAuthPermissionRule{config: saprc.config}
		_spec = sqlgraph.NewCreateSpec(scaauthpermissionrule.Table, sqlgraph.NewFieldSpec(scaauthpermissionrule.FieldID, field.TypeInt64))
	)
	if id, ok := saprc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := saprc.mutation.Ptype(); ok {
		_spec.SetField(scaauthpermissionrule.FieldPtype, field.TypeString, value)
		_node.Ptype = &value
	}
	if value, ok := saprc.mutation.V0(); ok {
		_spec.SetField(scaauthpermissionrule.FieldV0, field.TypeString, value)
		_node.V0 = &value
	}
	if value, ok := saprc.mutation.V1(); ok {
		_spec.SetField(scaauthpermissionrule.FieldV1, field.TypeString, value)
		_node.V1 = &value
	}
	if value, ok := saprc.mutation.V2(); ok {
		_spec.SetField(scaauthpermissionrule.FieldV2, field.TypeString, value)
		_node.V2 = &value
	}
	if value, ok := saprc.mutation.V3(); ok {
		_spec.SetField(scaauthpermissionrule.FieldV3, field.TypeString, value)
		_node.V3 = &value
	}
	if value, ok := saprc.mutation.V4(); ok {
		_spec.SetField(scaauthpermissionrule.FieldV4, field.TypeString, value)
		_node.V4 = &value
	}
	if value, ok := saprc.mutation.V5(); ok {
		_spec.SetField(scaauthpermissionrule.FieldV5, field.TypeString, value)
		_node.V5 = &value
	}
	if nodes := saprc.mutation.ScaAuthRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scaauthpermissionrule.ScaAuthRoleTable,
			Columns: []string{scaauthpermissionrule.ScaAuthRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scaauthrole.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.sca_auth_role_sca_auth_permission_rule = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScaAuthPermissionRuleCreateBulk is the builder for creating many ScaAuthPermissionRule entities in bulk.
type ScaAuthPermissionRuleCreateBulk struct {
	config
	err      error
	builders []*ScaAuthPermissionRuleCreate
}

// Save creates the ScaAuthPermissionRule entities in the database.
func (saprcb *ScaAuthPermissionRuleCreateBulk) Save(ctx context.Context) ([]*ScaAuthPermissionRule, error) {
	if saprcb.err != nil {
		return nil, saprcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(saprcb.builders))
	nodes := make([]*ScaAuthPermissionRule, len(saprcb.builders))
	mutators := make([]Mutator, len(saprcb.builders))
	for i := range saprcb.builders {
		func(i int, root context.Context) {
			builder := saprcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScaAuthPermissionRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, saprcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, saprcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, saprcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (saprcb *ScaAuthPermissionRuleCreateBulk) SaveX(ctx context.Context) []*ScaAuthPermissionRule {
	v, err := saprcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (saprcb *ScaAuthPermissionRuleCreateBulk) Exec(ctx context.Context) error {
	_, err := saprcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (saprcb *ScaAuthPermissionRuleCreateBulk) ExecX(ctx context.Context) {
	if err := saprcb.Exec(ctx); err != nil {
		panic(err)
	}
}
