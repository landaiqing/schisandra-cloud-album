// Code generated by ent, DO NOT EDIT.

package scaauthuserdevice

import (
	"schisandra-album-cloud-microservices/common/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldUpdatedAt, v))
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v int8) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldDeleted, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldUserID, v))
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldIP, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldLocation, v))
}

// Agent applies equality check predicate on the "agent" field. It's identical to AgentEQ.
func Agent(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldAgent, v))
}

// Browser applies equality check predicate on the "browser" field. It's identical to BrowserEQ.
func Browser(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldBrowser, v))
}

// OperatingSystem applies equality check predicate on the "operating_system" field. It's identical to OperatingSystemEQ.
func OperatingSystem(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldOperatingSystem, v))
}

// BrowserVersion applies equality check predicate on the "browser_version" field. It's identical to BrowserVersionEQ.
func BrowserVersion(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldBrowserVersion, v))
}

// Mobile applies equality check predicate on the "mobile" field. It's identical to MobileEQ.
func Mobile(v int) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldMobile, v))
}

// Bot applies equality check predicate on the "bot" field. It's identical to BotEQ.
func Bot(v int) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldBot, v))
}

// Mozilla applies equality check predicate on the "mozilla" field. It's identical to MozillaEQ.
func Mozilla(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldMozilla, v))
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldPlatform, v))
}

// EngineName applies equality check predicate on the "engine_name" field. It's identical to EngineNameEQ.
func EngineName(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldEngineName, v))
}

// EngineVersion applies equality check predicate on the "engine_version" field. It's identical to EngineVersionEQ.
func EngineVersion(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldEngineVersion, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v int8) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldDeleted, v))
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v int8) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNEQ(FieldDeleted, v))
}

// DeletedIn applies the In predicate on the "deleted" field.
func DeletedIn(vs ...int8) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldIn(FieldDeleted, vs...))
}

// DeletedNotIn applies the NotIn predicate on the "deleted" field.
func DeletedNotIn(vs ...int8) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNotIn(FieldDeleted, vs...))
}

// DeletedGT applies the GT predicate on the "deleted" field.
func DeletedGT(v int8) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGT(FieldDeleted, v))
}

// DeletedGTE applies the GTE predicate on the "deleted" field.
func DeletedGTE(v int8) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGTE(FieldDeleted, v))
}

// DeletedLT applies the LT predicate on the "deleted" field.
func DeletedLT(v int8) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLT(FieldDeleted, v))
}

// DeletedLTE applies the LTE predicate on the "deleted" field.
func DeletedLTE(v int8) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLTE(FieldDeleted, v))
}

// DeletedIsNil applies the IsNil predicate on the "deleted" field.
func DeletedIsNil() predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldIsNull(FieldDeleted))
}

// DeletedNotNil applies the NotNil predicate on the "deleted" field.
func DeletedNotNil() predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNotNull(FieldDeleted))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldContainsFold(FieldUserID, v))
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLTE(FieldIP, v))
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldContains(FieldIP, v))
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldHasPrefix(FieldIP, v))
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldHasSuffix(FieldIP, v))
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEqualFold(FieldIP, v))
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldContainsFold(FieldIP, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldContainsFold(FieldLocation, v))
}

// AgentEQ applies the EQ predicate on the "agent" field.
func AgentEQ(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldAgent, v))
}

// AgentNEQ applies the NEQ predicate on the "agent" field.
func AgentNEQ(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNEQ(FieldAgent, v))
}

// AgentIn applies the In predicate on the "agent" field.
func AgentIn(vs ...string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldIn(FieldAgent, vs...))
}

// AgentNotIn applies the NotIn predicate on the "agent" field.
func AgentNotIn(vs ...string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNotIn(FieldAgent, vs...))
}

// AgentGT applies the GT predicate on the "agent" field.
func AgentGT(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGT(FieldAgent, v))
}

// AgentGTE applies the GTE predicate on the "agent" field.
func AgentGTE(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGTE(FieldAgent, v))
}

// AgentLT applies the LT predicate on the "agent" field.
func AgentLT(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLT(FieldAgent, v))
}

// AgentLTE applies the LTE predicate on the "agent" field.
func AgentLTE(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLTE(FieldAgent, v))
}

// AgentContains applies the Contains predicate on the "agent" field.
func AgentContains(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldContains(FieldAgent, v))
}

// AgentHasPrefix applies the HasPrefix predicate on the "agent" field.
func AgentHasPrefix(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldHasPrefix(FieldAgent, v))
}

// AgentHasSuffix applies the HasSuffix predicate on the "agent" field.
func AgentHasSuffix(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldHasSuffix(FieldAgent, v))
}

// AgentEqualFold applies the EqualFold predicate on the "agent" field.
func AgentEqualFold(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEqualFold(FieldAgent, v))
}

// AgentContainsFold applies the ContainsFold predicate on the "agent" field.
func AgentContainsFold(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldContainsFold(FieldAgent, v))
}

// BrowserEQ applies the EQ predicate on the "browser" field.
func BrowserEQ(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldBrowser, v))
}

// BrowserNEQ applies the NEQ predicate on the "browser" field.
func BrowserNEQ(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNEQ(FieldBrowser, v))
}

// BrowserIn applies the In predicate on the "browser" field.
func BrowserIn(vs ...string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldIn(FieldBrowser, vs...))
}

// BrowserNotIn applies the NotIn predicate on the "browser" field.
func BrowserNotIn(vs ...string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNotIn(FieldBrowser, vs...))
}

// BrowserGT applies the GT predicate on the "browser" field.
func BrowserGT(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGT(FieldBrowser, v))
}

// BrowserGTE applies the GTE predicate on the "browser" field.
func BrowserGTE(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGTE(FieldBrowser, v))
}

// BrowserLT applies the LT predicate on the "browser" field.
func BrowserLT(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLT(FieldBrowser, v))
}

// BrowserLTE applies the LTE predicate on the "browser" field.
func BrowserLTE(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLTE(FieldBrowser, v))
}

// BrowserContains applies the Contains predicate on the "browser" field.
func BrowserContains(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldContains(FieldBrowser, v))
}

// BrowserHasPrefix applies the HasPrefix predicate on the "browser" field.
func BrowserHasPrefix(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldHasPrefix(FieldBrowser, v))
}

// BrowserHasSuffix applies the HasSuffix predicate on the "browser" field.
func BrowserHasSuffix(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldHasSuffix(FieldBrowser, v))
}

// BrowserEqualFold applies the EqualFold predicate on the "browser" field.
func BrowserEqualFold(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEqualFold(FieldBrowser, v))
}

// BrowserContainsFold applies the ContainsFold predicate on the "browser" field.
func BrowserContainsFold(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldContainsFold(FieldBrowser, v))
}

// OperatingSystemEQ applies the EQ predicate on the "operating_system" field.
func OperatingSystemEQ(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldOperatingSystem, v))
}

// OperatingSystemNEQ applies the NEQ predicate on the "operating_system" field.
func OperatingSystemNEQ(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNEQ(FieldOperatingSystem, v))
}

// OperatingSystemIn applies the In predicate on the "operating_system" field.
func OperatingSystemIn(vs ...string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldIn(FieldOperatingSystem, vs...))
}

// OperatingSystemNotIn applies the NotIn predicate on the "operating_system" field.
func OperatingSystemNotIn(vs ...string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNotIn(FieldOperatingSystem, vs...))
}

// OperatingSystemGT applies the GT predicate on the "operating_system" field.
func OperatingSystemGT(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGT(FieldOperatingSystem, v))
}

// OperatingSystemGTE applies the GTE predicate on the "operating_system" field.
func OperatingSystemGTE(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGTE(FieldOperatingSystem, v))
}

// OperatingSystemLT applies the LT predicate on the "operating_system" field.
func OperatingSystemLT(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLT(FieldOperatingSystem, v))
}

// OperatingSystemLTE applies the LTE predicate on the "operating_system" field.
func OperatingSystemLTE(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLTE(FieldOperatingSystem, v))
}

// OperatingSystemContains applies the Contains predicate on the "operating_system" field.
func OperatingSystemContains(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldContains(FieldOperatingSystem, v))
}

// OperatingSystemHasPrefix applies the HasPrefix predicate on the "operating_system" field.
func OperatingSystemHasPrefix(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldHasPrefix(FieldOperatingSystem, v))
}

// OperatingSystemHasSuffix applies the HasSuffix predicate on the "operating_system" field.
func OperatingSystemHasSuffix(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldHasSuffix(FieldOperatingSystem, v))
}

// OperatingSystemEqualFold applies the EqualFold predicate on the "operating_system" field.
func OperatingSystemEqualFold(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEqualFold(FieldOperatingSystem, v))
}

// OperatingSystemContainsFold applies the ContainsFold predicate on the "operating_system" field.
func OperatingSystemContainsFold(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldContainsFold(FieldOperatingSystem, v))
}

// BrowserVersionEQ applies the EQ predicate on the "browser_version" field.
func BrowserVersionEQ(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldBrowserVersion, v))
}

// BrowserVersionNEQ applies the NEQ predicate on the "browser_version" field.
func BrowserVersionNEQ(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNEQ(FieldBrowserVersion, v))
}

// BrowserVersionIn applies the In predicate on the "browser_version" field.
func BrowserVersionIn(vs ...string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldIn(FieldBrowserVersion, vs...))
}

// BrowserVersionNotIn applies the NotIn predicate on the "browser_version" field.
func BrowserVersionNotIn(vs ...string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNotIn(FieldBrowserVersion, vs...))
}

// BrowserVersionGT applies the GT predicate on the "browser_version" field.
func BrowserVersionGT(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGT(FieldBrowserVersion, v))
}

// BrowserVersionGTE applies the GTE predicate on the "browser_version" field.
func BrowserVersionGTE(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGTE(FieldBrowserVersion, v))
}

// BrowserVersionLT applies the LT predicate on the "browser_version" field.
func BrowserVersionLT(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLT(FieldBrowserVersion, v))
}

// BrowserVersionLTE applies the LTE predicate on the "browser_version" field.
func BrowserVersionLTE(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLTE(FieldBrowserVersion, v))
}

// BrowserVersionContains applies the Contains predicate on the "browser_version" field.
func BrowserVersionContains(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldContains(FieldBrowserVersion, v))
}

// BrowserVersionHasPrefix applies the HasPrefix predicate on the "browser_version" field.
func BrowserVersionHasPrefix(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldHasPrefix(FieldBrowserVersion, v))
}

// BrowserVersionHasSuffix applies the HasSuffix predicate on the "browser_version" field.
func BrowserVersionHasSuffix(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldHasSuffix(FieldBrowserVersion, v))
}

// BrowserVersionEqualFold applies the EqualFold predicate on the "browser_version" field.
func BrowserVersionEqualFold(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEqualFold(FieldBrowserVersion, v))
}

// BrowserVersionContainsFold applies the ContainsFold predicate on the "browser_version" field.
func BrowserVersionContainsFold(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldContainsFold(FieldBrowserVersion, v))
}

// MobileEQ applies the EQ predicate on the "mobile" field.
func MobileEQ(v int) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldMobile, v))
}

// MobileNEQ applies the NEQ predicate on the "mobile" field.
func MobileNEQ(v int) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNEQ(FieldMobile, v))
}

// MobileIn applies the In predicate on the "mobile" field.
func MobileIn(vs ...int) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldIn(FieldMobile, vs...))
}

// MobileNotIn applies the NotIn predicate on the "mobile" field.
func MobileNotIn(vs ...int) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNotIn(FieldMobile, vs...))
}

// MobileGT applies the GT predicate on the "mobile" field.
func MobileGT(v int) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGT(FieldMobile, v))
}

// MobileGTE applies the GTE predicate on the "mobile" field.
func MobileGTE(v int) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGTE(FieldMobile, v))
}

// MobileLT applies the LT predicate on the "mobile" field.
func MobileLT(v int) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLT(FieldMobile, v))
}

// MobileLTE applies the LTE predicate on the "mobile" field.
func MobileLTE(v int) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLTE(FieldMobile, v))
}

// BotEQ applies the EQ predicate on the "bot" field.
func BotEQ(v int) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldBot, v))
}

// BotNEQ applies the NEQ predicate on the "bot" field.
func BotNEQ(v int) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNEQ(FieldBot, v))
}

// BotIn applies the In predicate on the "bot" field.
func BotIn(vs ...int) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldIn(FieldBot, vs...))
}

// BotNotIn applies the NotIn predicate on the "bot" field.
func BotNotIn(vs ...int) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNotIn(FieldBot, vs...))
}

// BotGT applies the GT predicate on the "bot" field.
func BotGT(v int) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGT(FieldBot, v))
}

// BotGTE applies the GTE predicate on the "bot" field.
func BotGTE(v int) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGTE(FieldBot, v))
}

// BotLT applies the LT predicate on the "bot" field.
func BotLT(v int) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLT(FieldBot, v))
}

// BotLTE applies the LTE predicate on the "bot" field.
func BotLTE(v int) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLTE(FieldBot, v))
}

// MozillaEQ applies the EQ predicate on the "mozilla" field.
func MozillaEQ(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldMozilla, v))
}

// MozillaNEQ applies the NEQ predicate on the "mozilla" field.
func MozillaNEQ(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNEQ(FieldMozilla, v))
}

// MozillaIn applies the In predicate on the "mozilla" field.
func MozillaIn(vs ...string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldIn(FieldMozilla, vs...))
}

// MozillaNotIn applies the NotIn predicate on the "mozilla" field.
func MozillaNotIn(vs ...string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNotIn(FieldMozilla, vs...))
}

// MozillaGT applies the GT predicate on the "mozilla" field.
func MozillaGT(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGT(FieldMozilla, v))
}

// MozillaGTE applies the GTE predicate on the "mozilla" field.
func MozillaGTE(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGTE(FieldMozilla, v))
}

// MozillaLT applies the LT predicate on the "mozilla" field.
func MozillaLT(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLT(FieldMozilla, v))
}

// MozillaLTE applies the LTE predicate on the "mozilla" field.
func MozillaLTE(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLTE(FieldMozilla, v))
}

// MozillaContains applies the Contains predicate on the "mozilla" field.
func MozillaContains(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldContains(FieldMozilla, v))
}

// MozillaHasPrefix applies the HasPrefix predicate on the "mozilla" field.
func MozillaHasPrefix(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldHasPrefix(FieldMozilla, v))
}

// MozillaHasSuffix applies the HasSuffix predicate on the "mozilla" field.
func MozillaHasSuffix(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldHasSuffix(FieldMozilla, v))
}

// MozillaEqualFold applies the EqualFold predicate on the "mozilla" field.
func MozillaEqualFold(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEqualFold(FieldMozilla, v))
}

// MozillaContainsFold applies the ContainsFold predicate on the "mozilla" field.
func MozillaContainsFold(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldContainsFold(FieldMozilla, v))
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldPlatform, v))
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNEQ(FieldPlatform, v))
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldIn(FieldPlatform, vs...))
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNotIn(FieldPlatform, vs...))
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGT(FieldPlatform, v))
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGTE(FieldPlatform, v))
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLT(FieldPlatform, v))
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLTE(FieldPlatform, v))
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldContains(FieldPlatform, v))
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldHasPrefix(FieldPlatform, v))
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldHasSuffix(FieldPlatform, v))
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEqualFold(FieldPlatform, v))
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldContainsFold(FieldPlatform, v))
}

// EngineNameEQ applies the EQ predicate on the "engine_name" field.
func EngineNameEQ(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldEngineName, v))
}

// EngineNameNEQ applies the NEQ predicate on the "engine_name" field.
func EngineNameNEQ(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNEQ(FieldEngineName, v))
}

// EngineNameIn applies the In predicate on the "engine_name" field.
func EngineNameIn(vs ...string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldIn(FieldEngineName, vs...))
}

// EngineNameNotIn applies the NotIn predicate on the "engine_name" field.
func EngineNameNotIn(vs ...string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNotIn(FieldEngineName, vs...))
}

// EngineNameGT applies the GT predicate on the "engine_name" field.
func EngineNameGT(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGT(FieldEngineName, v))
}

// EngineNameGTE applies the GTE predicate on the "engine_name" field.
func EngineNameGTE(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGTE(FieldEngineName, v))
}

// EngineNameLT applies the LT predicate on the "engine_name" field.
func EngineNameLT(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLT(FieldEngineName, v))
}

// EngineNameLTE applies the LTE predicate on the "engine_name" field.
func EngineNameLTE(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLTE(FieldEngineName, v))
}

// EngineNameContains applies the Contains predicate on the "engine_name" field.
func EngineNameContains(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldContains(FieldEngineName, v))
}

// EngineNameHasPrefix applies the HasPrefix predicate on the "engine_name" field.
func EngineNameHasPrefix(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldHasPrefix(FieldEngineName, v))
}

// EngineNameHasSuffix applies the HasSuffix predicate on the "engine_name" field.
func EngineNameHasSuffix(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldHasSuffix(FieldEngineName, v))
}

// EngineNameEqualFold applies the EqualFold predicate on the "engine_name" field.
func EngineNameEqualFold(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEqualFold(FieldEngineName, v))
}

// EngineNameContainsFold applies the ContainsFold predicate on the "engine_name" field.
func EngineNameContainsFold(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldContainsFold(FieldEngineName, v))
}

// EngineVersionEQ applies the EQ predicate on the "engine_version" field.
func EngineVersionEQ(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEQ(FieldEngineVersion, v))
}

// EngineVersionNEQ applies the NEQ predicate on the "engine_version" field.
func EngineVersionNEQ(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNEQ(FieldEngineVersion, v))
}

// EngineVersionIn applies the In predicate on the "engine_version" field.
func EngineVersionIn(vs ...string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldIn(FieldEngineVersion, vs...))
}

// EngineVersionNotIn applies the NotIn predicate on the "engine_version" field.
func EngineVersionNotIn(vs ...string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldNotIn(FieldEngineVersion, vs...))
}

// EngineVersionGT applies the GT predicate on the "engine_version" field.
func EngineVersionGT(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGT(FieldEngineVersion, v))
}

// EngineVersionGTE applies the GTE predicate on the "engine_version" field.
func EngineVersionGTE(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldGTE(FieldEngineVersion, v))
}

// EngineVersionLT applies the LT predicate on the "engine_version" field.
func EngineVersionLT(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLT(FieldEngineVersion, v))
}

// EngineVersionLTE applies the LTE predicate on the "engine_version" field.
func EngineVersionLTE(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldLTE(FieldEngineVersion, v))
}

// EngineVersionContains applies the Contains predicate on the "engine_version" field.
func EngineVersionContains(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldContains(FieldEngineVersion, v))
}

// EngineVersionHasPrefix applies the HasPrefix predicate on the "engine_version" field.
func EngineVersionHasPrefix(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldHasPrefix(FieldEngineVersion, v))
}

// EngineVersionHasSuffix applies the HasSuffix predicate on the "engine_version" field.
func EngineVersionHasSuffix(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldHasSuffix(FieldEngineVersion, v))
}

// EngineVersionEqualFold applies the EqualFold predicate on the "engine_version" field.
func EngineVersionEqualFold(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldEqualFold(FieldEngineVersion, v))
}

// EngineVersionContainsFold applies the ContainsFold predicate on the "engine_version" field.
func EngineVersionContainsFold(v string) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.FieldContainsFold(FieldEngineVersion, v))
}

// HasScaAuthUser applies the HasEdge predicate on the "sca_auth_user" edge.
func HasScaAuthUser() predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScaAuthUserTable, ScaAuthUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScaAuthUserWith applies the HasEdge predicate on the "sca_auth_user" edge with a given conditions (other predicates).
func HasScaAuthUserWith(preds ...predicate.ScaAuthUser) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(func(s *sql.Selector) {
		step := newScaAuthUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ScaAuthUserDevice) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ScaAuthUserDevice) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ScaAuthUserDevice) predicate.ScaAuthUserDevice {
	return predicate.ScaAuthUserDevice(sql.NotPredicates(p))
}
